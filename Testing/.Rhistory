1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df0, 8,15)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 2,3)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 3,5)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 4,7)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 6,11)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 8,15)
1-pchisq(ad$deviance, ad$df.residual)
summary(ad)
path_to_numbers='../pilot_numbers/'
lfiles=list.files(path_to_numbers)
easy_filenames=c('rep1','rep2_all','rep2_M','rep3_all', 'rep3_M','rep0d_all','rep0d_M','rep0v')
dfs=list()
i=0
filnames=c()
for(fil in lfiles){
i=i+1
dfs[[i]]<-read.csv(paste(path_to_numbers,fil,sep='/'), header=T)
dfs[[i]]$file=easy_filenames[i]
filnames=c(filnames, fil)
}
df_big=do.call(rbind, dfs)
library(tidyverse)
df_big %>% dplyr::select(Area, X,Y,file) %>% separate(file, sep='_', into=c('picture','particles')) -> df
write.csv(file='full_df.csv',x = df)
df %>% group_by(picture) %>%
mutate(minY=min(Y),
maxY=max(Y),
minX=min(X),
maxX=max(X)) %>%
mutate(rY=(Y-minY)/(maxY-minY),
rX=(X-minX)/(maxX-minX)) -> df
path_to_numbers='../pilot_numbers/'
lfiles=list.files(path_to_numbers)
easy_filenames=c('rep1','rep2_all','rep2_M','rep3_all', 'rep3_M','rep0d_all','rep0d_M','rep0v')
dfs=list()
i=0
filnames=c()
for(fil in lfiles){
i=i+1
dfs[[i]]<-read.csv(paste(path_to_numbers,fil,sep='/'), header=T)
dfs[[i]]$file=easy_filenames[i]
filnames=c(filnames, fil)
}
df_big=do.call(rbind, dfs)
library(tidyverse)
df_big %>% dplyr::select(Area, X,Y,file) %>% separate(file, sep='_', into=c('picture','particles')) -> df
write.csv(file='full_df.csv',x = df)
df %>% group_by(picture) %>%
mutate(minY=min(Y),
maxY=max(Y),
minX=min(X),
maxX=max(X)) %>%
mutate(rY=(Y-minY)/(maxY-minY),
rX=(X-minX)/(maxX-minX)) -> df
table(df$picture, df$particles)
ggplot(filter(df), aes(x=runif(length(rX)), y=runif(length(rX)), color=particles))+geom_density_2d()+facet_wrap(~picture)
ggplot(filter(df), aes(x=rX, y=rY, color=particles))+geom_density_2d()+facet_wrap(~picture)
gridder=function(nx,ny){
xseq=seq(0,1,length.out = nx)
yseq=seq(0,1,length.out = ny)
grid_assignment=function(x,y){
i=Position(function(z) z>=x, xseq )-1
j=Position(function(z) z>=y, yseq )-1
if(i==0){
i=i+1
}
if(j==0){
j=j+1
}
return(paste(i,j, sep=','))
}
return(grid_assignment)
}
attach_columns=function(df, nx,ny){
g_assigner=gridder(nx,ny)
df %>% mutate(assignment=mapply(g_assigner, rX,rY)) -> res_df
return(res_df)
}
subdivide_dataset=function(df0,ni,nj){
rdf=attach_columns(df0, ni,nj)
rdf %>% group_by(picture, particles, assignment) %>% summarise(particle_count=length(X)) %>% ungroup() -> count_df
count_df %>% mutate(f=as.character(interaction(picture, ifelse(is.na(particles), NA, particles))),
picture=as.character(picture),
particles=as.character(particles)
) -> count_df
all_levels=unique(count_df$assignment)
for(fa in unique(count_df$f)){
rd=strsplit(fa, '.', fixed=T)[[1]]
print(rd)
count_df %>% filter(fa==f) -> tmp_df
seen_levels=unique(tmp_df$assignment)
missing_levels=setdiff(all_levels, seen_levels)
if(length(missing_levels)>0){
extra_df=data.frame(picture=rd[1],particles=rd[2], assignment=missing_levels,particle_count=0,  f=fa)
count_df =rbind(count_df, extra_df)
}
}
count_df %>% separate(assignment, into=c('xbin','ybin'), sep = ',') %>%
mutate(xbin=as.numeric(xbin), ybin=as.numeric(ybin)) -> count_df2
return(count_df2)
}
cdf= subdivide_dataset(df, 7,7)
ggplot(filter(cdf,particles=='all'), aes(x=xbin, y=ybin, fill=particle_count)) + geom_tile()+facet_wrap(~f, scales = 'free') +  scale_fill_distiller(palette = "RdPu")
ggplot(filter(cdf, particles=='M'), aes(x=xbin, y=ybin, fill=particle_count)) + geom_tile()+facet_wrap(~f, scales = 'free') +  scale_fill_distiller(palette = "RdPu")
chitest=function(x){
if(sum(x)>0){
if(mean(x)<5){
return(chisq.test(x, simulate.p.value = T)$p.value)
}
return(chisq.test(x)$p.value)
}
return(NA)
}
cdf %>% group_by(particles, picture) %>%
summarise(pval=chitest(particle_count))
## First I do some more data cleaning by thinning the small points and subdividing the giant points.
multiplicity=Vectorize(function(area){
if(area<200){
return(0)
}
if(area>2400){
return(floor(area/1200))
}
else{
return(1)
}
})
df %>% mutate(mult=multiplicity(Area)) -> df_r
df_r %>% filter(mult>0) -> df_r2
rowids=rep(1:nrow(df_r2), df_r2$mult)
df_r3=df_r2[rowids,]
## Then, I filter based on the statistical depth
library(depth)
df_r3$depth_val=-1
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
condition <- eval(substitute(condition), .data, envir)
original_variables=colnames(.data)
.data[condition, ] <- .data[condition, ] %>% mutate(...) %>% dplyr::select(original_variables)
.data
}
for(r in unique(df_r3$picture)){
nvals= ungroup(df_r3) %>% filter(picture==r, particles!='M' || is.na(particles)) %>% dplyr::select(rX,rY) %>% as.matrix()
nvals2=ungroup(df_r3) %>% filter(picture==r) %>% dplyr::select(rX,rY) %>% as.matrix()
df_r3 %>% ungroup() %>% mutate_cond(picture==r, depth_val=apply(nvals2,1,depth, x=nvals)) -> df_r3
}
make_smaller=function(df_r3, proportion, square){
df_r3 %>% group_by(picture) %>% arrange(depth_val) %>% slice(floor(n()*proportion):n()) -> df_r4
df_r4 %>% group_by(picture) %>%
mutate(minY=min(rY),
maxY=max(rY),
minX=min(rX),
maxX=max(rX)) %>%
mutate(rY=(rY-minY)/(maxY-minY),
rX=(rX-minX)/(maxX-minX)) -> df_r4
df_r4 %>% group_by(picture) %>% filter(rY<1-square, rY>square, rX>square, rY<1-square) %>%
mutate(minY=min(rY),
maxY=max(rY),
minX=min(rX),
maxX=max(rX)) %>%
mutate(rY=(rY-minY)/(maxY-minY),
rX=(rX-minX)/(maxX-minX)) -> df_r5
}
df_r3 %>% ungroup() %>% mutate(id=1:n()) -> df_r3
df_r5 <- make_smaller(df_r3,0.1,0.2)
df_r3 %>% mutate(filtered=ifelse(id %in% df_r5$id,'In', 'Out')) -> df_r3
ggplot(df_r3, aes(x=rX, y=rY, color=filtered))+geom_point()+facet_wrap(picture~particles)
ggplot(filter(df_r5), aes(x=rX, y=rY, color=particles))+geom_density_2d()+facet_wrap(~picture)
ggplot(df_r5, aes(x=runif(length(rX)), y=runif(length(rX)), color=particles))+geom_density_2d()+facet_wrap(~picture)
cdf= subdivide_dataset(df_r5, 5,5)
ggplot(filter(cdf,particles=='all'), aes(x=xbin, y=ybin, fill=particle_count)) + geom_tile()+facet_wrap(~f, scales = 'free') +  scale_fill_distiller(palette = "RdPu")
ggplot(filter(cdf, particles=='M'), aes(x=xbin, y=ybin, fill=particle_count)) + geom_tile()+facet_wrap(~f, scales = 'free') +  scale_fill_distiller(palette = "RdPu")
cdf %>% group_by(particles, picture) %>%
summarise(pval=chitest(particle_count))
prediction_band_plot=function(df0,ni,nj){
count_df2 = subdivide_dataset(df0, ni,nj)
count_df2 %>% filter(!is.na(particles)) -> dual_df
dual_df %>% ungroup() %>%
dplyr::select(-f) %>%
pivot_wider(id_cols= c(picture, xbin, ybin),
names_from = particles,
values_from = particle_count) -> dual_df2
dual_df2 %>% mutate(V=all-M) -> dual_df2
dual_df0= dual_df2 %>% filter(V!=0)
nbfit=glm.nb(M ~ log(V), data=dual_df0)
dual_df3 = dual_df0 %>% mutate(predicted=exp(predict(nbfit)))
r=nbfit$theta
xs=exp(predict(nbfit))
ps=xs/r/(1+xs/r)
lowervals=qnbinom(p=0.025, size=r, prob = 1-ps)
uppervals=qnbinom(p=0.975, size=r, prob = 1-ps)
new_df= dual_df3 %>% mutate(lowervals=lowervals,
uppervals=uppervals)
na=ni-1
nb=nj-1
main=paste(na*nb,'squares per picture','(',na,'*',nb, ')')
g <- ggplot(new_df, aes(x=V, y=M))+geom_point()+geom_line(aes(x=V, y=predicted))+geom_ribbon(alpha=0.3, aes(ymin=lowervals, ymax=uppervals))+ggtitle(main)
print(g)
return(nbfit)
}
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
condition <- eval(substitute(condition), .data, envir)
original_variables=colnames(.data)
.data[condition, ] <- .data[condition, ] %>% mutate(...) %>% dplyr::select(original_variables)
.data
}
df0= df %>% mutate_cond(picture=="rep2", tmp=rY, rY=rX, rX=tmp) %>% filter(!is.na(particles))
ad=prediction_band_plot(df0, 2,3)
library(MASS)
prediction_band_plot=function(df0,ni,nj){
count_df2 = subdivide_dataset(df0, ni,nj)
count_df2 %>% filter(!is.na(particles)) -> dual_df
dual_df %>% ungroup() %>%
dplyr::select(-f) %>%
pivot_wider(id_cols= c(picture, xbin, ybin),
names_from = particles,
values_from = particle_count) -> dual_df2
dual_df2 %>% mutate(V=all-M) -> dual_df2
dual_df0= dual_df2 %>% filter(V!=0)
nbfit=glm.nb(M ~ log(V), data=dual_df0)
dual_df3 = dual_df0 %>% mutate(predicted=exp(predict(nbfit)))
r=nbfit$theta
xs=exp(predict(nbfit))
ps=xs/r/(1+xs/r)
lowervals=qnbinom(p=0.025, size=r, prob = 1-ps)
uppervals=qnbinom(p=0.975, size=r, prob = 1-ps)
new_df= dual_df3 %>% mutate(lowervals=lowervals,
uppervals=uppervals)
na=ni-1
nb=nj-1
main=paste(na*nb,'squares per picture','(',na,'*',nb, ')')
g <- ggplot(new_df, aes(x=V, y=M))+geom_point()+geom_line(aes(x=V, y=predicted))+geom_ribbon(alpha=0.3, aes(ymin=lowervals, ymax=uppervals))+ggtitle(main)
print(g)
return(nbfit)
}
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
condition <- eval(substitute(condition), .data, envir)
original_variables=colnames(.data)
.data[condition, ] <- .data[condition, ] %>% mutate(...) %>% dplyr::select(original_variables)
.data
}
df0= df %>% mutate_cond(picture=="rep2", tmp=rY, rY=rX, rX=tmp) %>% filter(!is.na(particles))
ad=prediction_band_plot(df0, 2,3)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df0, 3,5)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df0, 4,7)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df0, 6,11)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df0, 8,15)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 2,3)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 3,5)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 4,7)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 6,11)
1-pchisq(ad$deviance, ad$df.residual)
ad=prediction_band_plot(df_r5, 8,15)
1-pchisq(ad$deviance, ad$df.residual)
help(cor.test)
50*5000
1.5*1.6*1.7*1.8
c(0.8,0.9,0.5/2)
c(0.8,0.9,0.5)/2.2
1/1,9
1/1.9
0.4/1.9
0.45/1.9
0.25/1.9
c(1,0.4,0.45,0.25)/2.1
0.75/2.1
0.3/2.1
0.05/2.1
install.packages('admixturegraph')
mat=rbind(c(1,0.5,0.5,0.25),
c(1,1.5,0.5,0.75),
c(1,0.5,2,1),
c(1,1.5,2,3))
iv=solve(mat)
switcher=rbind(c(1,0,0,0),
c(0,0,1,0),
c(0,1,0,0),
c(0,0,0,1))
iv%*%R
R=c(1,2,3,8)
iv%*%R
rd=read.table('C:/Users/Svend/git/DeathCauses/compile/rrds.txt', header=T, sep=',')
get_interval=function(val){
RV=strsplit(val, split='-', fixed=T)[[1]]
if(length(RV)==1){
res <- as.numeric(c(RV[1],RV[1]))
}
else{
res <- as.numeric(c(RV[1], RV[2]))
}
return(res)
}
z_in_interval=function(intervals, z){
for(i in 1:length(intervals)){
interval=intervals[[i]]
if(z>interval[2]+1e-7 || z<interval[1]-1e-7){
return(F)
}
}
return(T)
}
construct_f=function(fromtos, formulas){
r=list()
for(i in 1:length(formulas)){
form=formulas[i]
f=parse_formula(form)
r[[i]] <- f
}
intervals=list()
for(i in 1:nrow(fromtos)){
intervals_for_area=list()
for(j in 1:ncol(fromtos)){
intervals_for_area[[j]] <- get_interval(fromtos[i,j])
}
intervals[[i]] <- intervals_for_area
}
interpol_function=function(z){
for(i in 1:length(intervals)){
if(z_in_interval(intervals[[i]], z)){
return(r[[i]](z))
}
}
}
return(interpol_function)
}
library(R.utils)
parse_formula=function(form){
parts=strsplit(form,split='+', fixed = T)[[1]]
nested_list=strsplit(parts, split='*', fixed=T)
coefficients=numeric(length(nested_list))
all_factors=character()
for( n in 1:length(nested_list)){
if(length(nested_list[[n]])> 1){
all_factors=c(all_factors, nested_list[[n]][2:length(nested_list[[n]])])
}
coefficients[n]=as.numeric(nested_list[[n]][1])
}
all_factors=unique(all_factors)
reverse=1:length(all_factors)
names(reverse) <- all_factors
list_of_indices=list()
for(n in 1:length(nested_list)){
if(length(nested_list[[n]])>1){
factors=nested_list[[n]][2:length(nested_list[[n]])]
list_of_indices[[n]] <- reverse[factors]
}
else{
list_of_indices[[n]] <-  c()
}
}
res_f=function(x){
res=0
for(i in 1:length(nested_list)){
term=coefficients[i]
required_factors=list_of_indices[[i]]
if(length(required_factors)>0){
term=term*prod(x[required_factors])
}
res=res+term
}
return(res)
}
return(res_f)
}
fromtos=as.matrix(rd[,1:(ncol(rd)-1)])
vals=rd[,ncol(rd)]
f=construct_f(fromtos,as.character(vals))
valmat=matrix(0,nrow=0,ncol=3)
x=seq(0,42, length.out = 100)
y=seq(0,60, length.out=100)
z=matrix(0, nrow=100,ncol=100)
for(i in 1:100){
for(j in 1:100){
z[i,j]=f(c(x[i],y[j]))
}
}
xv=runif(10000)*42
yv=runif(10000)*60
zv=numeric(10000)
for(i in 1:10000){
zv[i]=f(c(xv[i],yv[i]))
}
library(dplyr)
persp(x,y,z)
fig <- plot_ly(x=x,y=y,z=z)
library(plotly)
fig <- plot_ly(x=x,y=y,z=z)
fig <- fig %>% add_surface()
htmlwidgets::saveWidget(as_widget(fig), "index.html")
other_fromtos=read.table('C:/Users/Svend/git/DeathCauses/Database/Causes/Cancer/MouthCancer/rr_Drinking-SmokeIntensity/Drinking-SmokeIntensity.txt')
other_fromtos
fromtos
other_fromtos=rbind(c("0",'0'))
other_fromtos=read.table('C:/Users/Svend/git/DeathCauses/Database/Causes/Cancer/MouthCancer/rr_Drinking-SmokeIntensity/Drinking-SmokeIntensity.txt')
other_fromtos
other_fromtos[,1]
rd
other_fromtos
tester=function(from_tos){
simx=function(){
x=c()
for(i in 1:nrow(from_tos)){
x=c(x, runif(1)*(from_tos[i,2]-from_tos[i,1])+from_tos[i,1])
}
return(x)
}
xs=replicate(1000,sim(x))
zs=apply(xs,2,f)
return(mean(zs))
}
r=rbind(c(0,6), c(0,10))
tester(r)
from_tos=r
simx=function(){
x=c()
for(i in 1:nrow(from_tos)){
x=c(x, runif(1)*(from_tos[i,2]-from_tos[i,1])+from_tos[i,1])
}
return(x)
}
xs=replicate(1000,simx(x))
xs=replicate(1000,simx())
xs
dim(xs)
zs=apply(xs,2,f)
zs
mean(zs)
other_fromtos
tester(r)
tester=function(from_tos){
simx=function(){
x=c()
for(i in 1:nrow(from_tos)){
x=c(x, runif(1)*(from_tos[i,2]-from_tos[i,1])+from_tos[i,1])
}
return(x)
}
xs=replicate(1000,simx())
zs=apply(xs,2,f)
return(mean(zs))
}
tester(r)
other_fromtos
r=rbind(c(6,16), c(20,40))
tester(r)
f(0,0)
f(c(0,0))
r=rbind(c(0,0), c(0,6))
tester(r)
r=rbind(c(16,29), c(20,40))
tester(r)
tester(r)
tester(r)
tester(r)
tester(r)
r=rbind(c(6,16), c(20,40))
tester(r)
tester(r)
tester(r)
tester(r)
r=rbind(c(6,16), c(40,60))
tester(r)
r=rbind(c(6,16), c(40,60))
tester(r)
r=rbind(c(6,16), c(40,60))
tester(r)
r=rbind(c(6,16), c(40,60))
tester(r)
r=rbind(c(6,16), c(40,60))
tester(r)
r=rbind(c(6,16), c(40,60))
tester(r)
r=rbind(c(6,16), c(40,60))
tester(r)
r=rbind(c(6,16), c(40,60))
tester(r)
rd
r=rbind(c(29,42), c(40,60))
tester(r)
r=rbind(c(29,42), c(40,60))
tester(r)
r=rbind(c(29,42), c(40,60))
tester(r)
r=rbind(c(29,42), c(40,60))
tester(r)
r=rbind(c(29,42), c(40,60))
tester(r)
r=rbind(c(29,42), c(40,60))
tester(r)
tester(r)
tester(r)
tester(r)
tester(r)
tester(r)
boxplot(replicate(100, tester(r)))
119/6
74/7
16*4*30
setwd("C:/Users/Svend/git/DeathCauses/compile")
