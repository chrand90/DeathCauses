{"version":3,"sources":["models/Factors.ts","components/Header.tsx","components/Question.tsx","components/QuestionNumber.tsx","components/QuestionString.tsx","components/QuestionMenu.tsx","components/ComptutationEngine.tsx","components/BarChart.tsx","components/BarChartWrapper.tsx","components/PlottingData.tsx","components/VizWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FactorTypes","Header","className","React","PureComponent","IS_NUMBER_REGEX","IS_NUMBER_WITH_COMMAS_REGEX","ExplanationStart","Factors","data","factorList","forEach","element","undefined","factorName","factorType","NUMERIC","NumericFactorPermanent","initialValue","phrasing","placeholder","requiredDomain","recommendedDomain","STRING","StringFactorPermanent","options","split","console","log","this","stateObject","getInitialValue","name","value","checkInput","extractLimsAndExplanation","domain","explanationStart","lowerLim","upperLim","explanation","limitsAsStrings","parseFloat","GeneralFactor","val","status","message","lowerRecommended","upperRecommended","lowerRequired","upperRequired","explanationRecommendation","explanationRequirement","elm","REQUIREMENT_PHRASING","elm2","RECOMMENDATION_PHRASING","input","trimmedInput","trim","test","numberToCheck","checkNumberInput","BACKGROUNDCOLOR_DISABLED","ERROR_COLOR","WARNING_COLOR","QuestionContext","props","Popover","id","Title","as","Content","helpText","Form","Check","onChange","handleIgnoreFactor","checked","ignore","label","OverlayTrigger","trigger","rootClose","placement","overlay","helpBox","Button","variant","Row","Label","column","xl","style","color","FactorNameColor","Group","InputGroup","children","Append","helpBoxButton","IgnoreCheckBox","secondLine","SimpleNumericQuestion","state","bind","event","setState","currentTarget","formControlStyle","background","TextInputBackgroundColor","showmessage","errorMessageStyle","inputvalidity","getErrorStyles","Control","type","factorAnswer","handleChange","disabled","SimpleStringQuestion","getBackgroundColor","getTextColor","hidden","map","d","QuestionMenu","factors","helpjsons","validities","factorAnswers","handleSubmit","handleInputChange","loadFactorNames","setTimeout","Promise","all","d3","json","then","getFactorsAsStateObject","initializeValidities","res","getInputValidity","submittable","validitiesToBeChanged","validity","missingWarnings","Object","values","every","preventDefault","checkAllFormsForErrorAndMissing","prevState","handleSuccessfulSubmit","ev","factorname","factor","getHelpText","isSubmittable","questionlist","entries","getQuestion","noValidate","onSubmit","keys","length","Spinner","renderQuestionList","Component","make_squares","res_dat","r","p_object","new_res","explained","inner_causes","reduce","a","b","push","cause","x0","x","total_prob","key","concat","BARHEIGHT","XBARHEIGHT","ALTERNATING_COLORS","CAUSE_COLORS","longDesignConstants","n","width","barheight","totalheight","totalheightWithXBar","startXScale","yListStart","yListInnerPadding","yListOuterPadding","yListAlign","middleOfChart","textTranslation","textAnchor","BarChart","database","svg","xAxisGroup","data2","stip","drect_order","yBars","vis","div","slice","Math","round","Number","getDivWidth","append","attr","designConstants","text","make","remove","sort_data","range","paddingInner","paddingOuter","align","dataSortedName","copyOfSortedDataset","dataSortedTotal","augmented_data","index","dataSquares","newMaxX","getMaxX","createXAxisCall","xAxisCall","xscale","call","recalibrate_ybars","yRects","diseases","selectAll","exit","g_components","enter","i","insert","gs","d3Tip","html","direction","offset","bandwidth","on","e","show","raise","hide","newMax","dataset","rename_object","new_name","duration_per_transition","transition","duration","delay","sorter","sort","BarChartWrapper","chartArea","useRef","useState","chart","setChart","window","innerWidth","windowSize","setWindowSize","resize_graphic","changeWindowSize","useEffect","addEventListener","removeEventListener","useWindowSize","createNewChart","current","clear","update","ref","TEST_DATA","partying","smoking","TEST_DATA2","VizWindow","counter","selected_visualization","App","factorAnswersSubmitted","factorDatabase","create","loadFactorDatabase","causesData","Container","fluid","Col","lg","padding","renderQuestionMenu","renderVizWindow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8f4a598.chunk.js","sourcesContent":["export interface FactorAnswers {\r\n  [id: string]: number | string | boolean;\r\n}\r\n\r\nexport interface InputValidity {\r\n  status: \"Error\" | \"Warning\" | \"Missing\" | \"Success\";\r\n  message: string;\r\n}\r\n\r\nexport interface FactorList {\r\n  [key: string]: GeneralFactor<string | number | boolean>;\r\n}\r\n\r\nconst IS_NUMBER_REGEX=/^[-]?(\\d+|[.]\\d+|\\d+[.]\\d*|)$/;\r\nconst IS_NUMBER_WITH_COMMAS_REGEX=/^[-]?([\\d,]+|[,]\\d+|[\\d,]+[,.]\\d+)$/\r\n\r\nenum FactorTypes {\r\n  NUMERIC='number',\r\n  STRING='string',\r\n};\r\n\r\nclass Factors {\r\n  factorList: FactorList = {};\r\n\r\n  constructor(data: d3.DSVRowArray<string> | null) {\r\n    data?.forEach((element) => {\r\n      if (element.factorName !== undefined) {\r\n        //We strongly the expect the input from FactorDatabase.csv to contain this column.\r\n        switch (element.factorType) {\r\n          case FactorTypes.NUMERIC: {\r\n            this.factorList[element.factorName] = new NumericFactorPermanent(\r\n              element.factorName as string,\r\n              element.initialValue as number | \"\",\r\n              element.phrasing,\r\n              element.placeholder,\r\n              element.requiredDomain,\r\n              element.recommendedDomain\r\n            );\r\n            break;\r\n          }\r\n          //   case \"boolean\": {\r\n          //     this.factorList[element.factorName] = new BooleanFactorPermanent(\r\n          //       element.factorName as string\r\n          //     );\r\n          //     break;\r\n          //   }\r\n          case FactorTypes.STRING: {\r\n            this.factorList[element.factorName] = new StringFactorPermanent(\r\n              element.factorName as string,\r\n              element.initialValue as string,\r\n              element.phrasing,\r\n              element.placeholder,\r\n              element.options?.split(\"_\")\r\n            );\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    console.log(this.factorList);\r\n  }\r\n\r\n  getFactorsAsStateObject() {\r\n    let stateObject: FactorAnswers = {};\r\n    for (let factorName in this.factorList) {\r\n      stateObject[factorName] = this.factorList[factorName].getInitialValue();\r\n    }\r\n    return stateObject;\r\n  }\r\n\r\n  getInputValidity(name: string, value: string | boolean): InputValidity {\r\n    return this.factorList[name].checkInput(value);\r\n  }\r\n}\r\n\r\ninterface ExplanationAndLimits {\r\n  lowerLim: null | number;\r\n  upperLim: null | number;\r\n  explanation: string;\r\n}\r\n\r\nenum ExplanationStart {\r\n  RECOMMENDATION_PHRASING = \"More accurate if\",\r\n  REQUIREMENT_PHRASING = \"Should be\",\r\n}\r\n\r\nfunction extractLimsAndExplanation(\r\n  domain: string | null,\r\n  explanationStart: ExplanationStart\r\n): ExplanationAndLimits {\r\n  if (domain === null) {\r\n    return { lowerLim: null, upperLim: null, explanation: \"\" };\r\n  } else {\r\n    let lowerLim: null | number = null;\r\n    let upperLim: null | number = null;\r\n    let explanation: string = \"\";\r\n    let limitsAsStrings = domain.split(\"-\");\r\n    if (limitsAsStrings[0] !== \"\") {\r\n      explanation += explanationStart;\r\n      lowerLim = parseFloat(limitsAsStrings[0]);\r\n      if (limitsAsStrings[1] !== \"\") {\r\n        upperLim = parseFloat(limitsAsStrings[1]);\r\n        explanation += \" between \" + limitsAsStrings[0] + \" and \" + limitsAsStrings[1];\r\n      } else {\r\n        explanation += \" larger than \" + limitsAsStrings[0];\r\n      }\r\n    } else {\r\n      if (limitsAsStrings[1] !== \"\") {\r\n        explanation += explanationStart + \" smaller than \" + limitsAsStrings[1];\r\n        upperLim = parseFloat(limitsAsStrings[1]);\r\n      }\r\n    }\r\n    return { lowerLim: lowerLim, upperLim: upperLim, explanation: explanation };\r\n  }\r\n}\r\n\r\nexport abstract class GeneralFactor<T> {\r\n  factorName: string;\r\n  initialValue: T | \"\";\r\n  phrasing: string; //If the factor is not going to be asked, the phrasing should be nu\r\n  placeholder: string;\r\n  factorType: string='abstract';\r\n\r\n\r\n  constructor(\r\n    factorName: string,\r\n    initialValue: T | \"\",\r\n    phrasing: string = \"\",\r\n    placeholder: string = \"\"\r\n  ) {\r\n    this.factorName = factorName;\r\n    this.initialValue = initialValue;\r\n    this.phrasing = phrasing;\r\n    this.placeholder = placeholder;\r\n  }\r\n\r\n  getInitialValue(): T | \"\" {\r\n    return this.initialValue;\r\n  }\r\n\r\n  abstract checkInput(input: string | boolean): InputValidity\r\n}\r\n\r\nexport class StringFactorPermanent extends GeneralFactor<string> {\r\n  options: string[] = [];\r\n  constructor(\r\n    factorName: string,\r\n    initialValue: string,\r\n    phrasing: string = \"\",\r\n    placeholder: string = \"\",\r\n    options: string[] = []\r\n  ) {\r\n    super(factorName, initialValue, phrasing, placeholder);\r\n    this.factorType = \"string\";\r\n    this.options = options;\r\n  }\r\n\r\n  checkInput(val: string): InputValidity {\r\n    if (val in this.options) {\r\n      return { status: \"Success\", message: \"\" };\r\n    }\r\n    return { status: \"Missing\", message: \"\" };\r\n  }\r\n}\r\n\r\nclass NumericFactorPermanent extends GeneralFactor<number> {\r\n  lowerRecommended: number | null;\r\n  upperRecommended: number | null;\r\n  lowerRequired: number | null;\r\n  upperRequired: number | null;\r\n  explanationRecommendation: string;\r\n  explanationRequirement: string;\r\n\r\n  constructor(\r\n    factorName: string,\r\n    initialValue: number | \"\",\r\n    phrasing: string = \"\",\r\n    placeholder: string = \"\",\r\n    requiredDomain: string | null = null,\r\n    recommendedDomain: string | null = null\r\n  ) {\r\n    super(factorName, initialValue, phrasing, placeholder);\r\n    const elm = extractLimsAndExplanation(\r\n      requiredDomain,\r\n      ExplanationStart.REQUIREMENT_PHRASING\r\n    );\r\n    this.lowerRequired = elm.lowerLim;\r\n    this.upperRequired = elm.upperLim;\r\n    this.explanationRequirement = elm.explanation;\r\n    const elm2 = extractLimsAndExplanation(\r\n      recommendedDomain,\r\n      ExplanationStart.RECOMMENDATION_PHRASING\r\n    );\r\n    this.lowerRecommended = elm2.lowerLim;\r\n    this.upperRecommended = elm2.upperLim;\r\n    this.explanationRecommendation = elm2.explanation;\r\n    this.factorType = \"number\";\r\n  }\r\n\r\n  checkInput(input: string): InputValidity {\r\n    let trimmedInput = input.trim();\r\n    if (trimmedInput === \"\") {\r\n      return { status: \"Missing\", message: \"\" };\r\n    }\r\n    let isNumeric = IS_NUMBER_REGEX.test(trimmedInput);\r\n    \r\n    if (!isNumeric) {\r\n      if (IS_NUMBER_WITH_COMMAS_REGEX.test(trimmedInput)) {\r\n        return {\r\n          status: \"Error\",\r\n          message: \"Use a dot(.) as decimal separator.\",\r\n        };\r\n      }\r\n      return { status: \"Error\", message: \"Input is not a number\" };\r\n    }\r\n    const numberToCheck = parseFloat(trimmedInput);\r\n    return this.checkNumberInput(numberToCheck);\r\n  }\r\n\r\n  checkNumberInput(numberToCheck:number):InputValidity{\r\n    if (\r\n      (this.lowerRequired !== null && numberToCheck < this.lowerRequired) ||\r\n      (this.upperRequired && numberToCheck > this.upperRequired)\r\n    ) {\r\n      return { status: \"Error\", message: this.explanationRequirement };\r\n    }\r\n    if (\r\n      (this.lowerRecommended !== null && numberToCheck < this.lowerRecommended) ||\r\n      (this.upperRecommended && numberToCheck > this.upperRecommended)\r\n    ) {\r\n      return { status: \"Warning\", message: this.explanationRecommendation };\r\n    }\r\n    return { status: \"Success\", message: \"\" };\r\n  }\r\n}\r\n\r\n// class BooleanFactorPermanent extends GeneralFactor<boolean> {\r\n//   constructor(factorName: string) {\r\n//     super(factorName, false);\r\n//   }\r\n// }\r\n\r\nexport default Factors;\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.PureComponent {\r\n\r\n    render(): React.ReactNode {\r\n        return (<div className='header'> \r\n            <h1> Death Causes</h1>\r\n        </div>);\r\n    };\r\n}\r\n\r\nexport default Header;","import React, { ChangeEvent, ReactElement } from \"react\";\r\nimport \"./QuestionMenu.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { Col, Form } from \"react-bootstrap\";\r\nimport \"./Question.css\";\r\nimport MarkDown from \"react-markdown\";\r\nimport { InputValidity } from \"../models/Factors\";\r\n\r\nexport const BACKGROUNDCOLOR_DISABLED= \"#c7c7c7\";\r\nexport const TEXTCOLOR_DISABLED=\"#999\";\r\nexport const BACKGROUNDCOLOR_CHOICE=\"#cef1f5\";\r\nexport const ERROR_COLOR=\"#fc0303\";\r\nexport const WARNING_COLOR=\"#bfa50d\";\r\n\r\nexport interface QuestionProps<T> {\r\n  handleChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  handleIgnoreFactor: (factorname: string) => void;\r\n  name: string;\r\n  phrasing: string;\r\n  factorAnswer: T;\r\n  helpText: string;\r\n  placeholder: string;\r\n  inputvalidity: InputValidity;\r\n}\r\n\r\nexport interface QuestionStates {\r\n  ignore: boolean;\r\n}\r\n\r\nexport interface FormControlStyle {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface QuestionContextProps {\r\n  name: string;\r\n  ignore: boolean;\r\n  handleIgnoreFactor: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  helpText: string;\r\n  phrasing: string;\r\n  secondLine: ReactElement | string;\r\n}\r\n\r\nexport class QuestionContext extends React.PureComponent<QuestionContextProps> {\r\n  constructor(props: QuestionContextProps) {\r\n    super(props);\r\n  }\r\n\r\n  helpBox() {\r\n    return (\r\n      <Popover id=\"popover-basic\">\r\n        <Popover.Title as=\"h3\">{this.props.name}</Popover.Title>\r\n        <Popover.Content>\r\n          <MarkDown>{this.props.helpText}</MarkDown>\r\n        </Popover.Content>\r\n      </Popover>\r\n    );\r\n  }\r\n\r\n  IgnoreCheckBox() {\r\n    return (\r\n      <div className=\"fixedWidth\">\r\n        <Form.Check\r\n          onChange={this.props.handleIgnoreFactor}\r\n          checked={this.props.ignore}\r\n          label=\"Ignore\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  helpBoxButton() {//Popover til venstre for små skærme.\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\"\r\n        rootClose={true}\r\n        placement=\"right\"\r\n        overlay={this.helpBox()}\r\n      >\r\n        <Button variant=\"light\" className=\"btn-helpbox\">\r\n          {\" \"}\r\n          <strong>?</strong>\r\n        </Button>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n\r\n  FactorNameColor() {\r\n    if (this.props.ignore) {\r\n      return \"#9c9c9c\";\r\n    } else {\r\n      return \"#000000\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form.Row>\r\n        <Form.Label column xl={4} style={{ color: this.FactorNameColor() }}>\r\n          {this.props.phrasing}\r\n        </Form.Label>\r\n        <Col xl={8}>\r\n          <Form.Group>\r\n            <InputGroup className=\"mb-2\">\r\n              {this.props.children}\r\n              <InputGroup.Append>\r\n                {this.helpBoxButton()}\r\n                {this.IgnoreCheckBox()}\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n            {this.props.secondLine}\r\n          </Form.Group>\r\n        </Col>\r\n      </Form.Row>\r\n    );\r\n  }\r\n}\r\n\r\n","import {\r\n    QuestionProps,\r\n    QuestionStates,\r\n    FormControlStyle,\r\n    BACKGROUNDCOLOR_DISABLED,\r\n    ERROR_COLOR,\r\n    WARNING_COLOR,\r\n    QuestionContext\r\n  } from \"./Question\";\r\n  import React from \"react\";\r\n  import {Form } from \"react-bootstrap\";\r\n  \r\n\r\n\r\n  interface NumericQuestionProps extends QuestionProps<number> {};\r\n  \r\n  export default class SimpleNumericQuestion extends React.PureComponent<\r\n  NumericQuestionProps,\r\n  QuestionStates\r\n> {\r\n\r\n  constructor(props: NumericQuestionProps) {\r\n    super(props);\r\n    this.state = {\r\n      ignore: false,\r\n    };\r\n    this.handleIgnoreFactor = this.handleIgnoreFactor.bind(this);\r\n  }\r\n\r\n  TextInputBackgroundColor() {\r\n    if (this.state.ignore) {\r\n      return BACKGROUNDCOLOR_DISABLED;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  handleIgnoreFactor(event: React.ChangeEvent<HTMLInputElement>) {\r\n    this.setState({ ignore: event.currentTarget.checked }, (): void => {\r\n      if (this.state.ignore) {\r\n        this.props.handleIgnoreFactor(this.props.name);\r\n      }\r\n    });\r\n  }\r\n\r\n  getErrorStyles() {\r\n    let formControlStyle: FormControlStyle = {\r\n      background: this.TextInputBackgroundColor(),\r\n    };\r\n    let showmessage: boolean = false;\r\n    let errorMessageStyle: FormControlStyle = {};\r\n    if (this.props.inputvalidity.status === \"Error\") {\r\n      showmessage = true;\r\n      //formControlStyle[\"border-width\"]=\"4px\";\r\n      formControlStyle[\"border-color\"] = ERROR_COLOR;\r\n      formControlStyle[\"color\"] =ERROR_COLOR;\r\n      errorMessageStyle[\"color\"] = ERROR_COLOR;\r\n    }\r\n    console.log(\"this.state.ignore\");\r\n    console.log(this.state.ignore);\r\n    if (\r\n      this.props.inputvalidity.status === \"Warning\" \r\n    ) {\r\n      showmessage = true;\r\n      formControlStyle[\"border-color\"] = WARNING_COLOR;\r\n      errorMessageStyle[\"color\"] = WARNING_COLOR;\r\n    }\r\n    return { formControlStyle, showmessage, errorMessageStyle };\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Renders Question\" + this.props.name);\r\n\r\n    const {\r\n      formControlStyle,\r\n      showmessage,\r\n      errorMessageStyle,\r\n    } = this.getErrorStyles();\r\n\r\n    return (\r\n      <QuestionContext\r\n        name={this.props.name}\r\n        phrasing={this.props.phrasing}\r\n        handleIgnoreFactor={this.handleIgnoreFactor}\r\n        ignore={this.state.ignore}\r\n        helpText={this.props.helpText}\r\n        secondLine={\r\n          showmessage ? (\r\n            <Form.Label className=\"ErrorLabel\" style={errorMessageStyle}>\r\n              {this.props.inputvalidity.message}\r\n            </Form.Label>\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n      >\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder={this.props.placeholder}\r\n          name={this.props.name}\r\n          value={this.props.factorAnswer}\r\n          style={formControlStyle}\r\n          onChange={this.props.handleChange}\r\n          disabled={this.state.ignore}\r\n        />\r\n      </QuestionContext>\r\n    );\r\n  }\r\n}","import {\r\n  QuestionProps,\r\n  QuestionStates,\r\n  FormControlStyle,\r\n  BACKGROUNDCOLOR_DISABLED,\r\n  BACKGROUNDCOLOR_CHOICE,\r\n  TEXTCOLOR_DISABLED,\r\n  WARNING_COLOR,\r\n  QuestionContext\r\n} from \"./Question\";\r\nimport React from \"react\";\r\nimport {Form} from \"react-bootstrap\";\r\n\r\ninterface StringQuestionProps extends QuestionProps<string> {\r\n  options: string[];\r\n}\r\n\r\nexport default class SimpleStringQuestion extends React.PureComponent<\r\n  StringQuestionProps,\r\n  QuestionStates\r\n> {\r\n  constructor(props: StringQuestionProps) {\r\n    super(props);\r\n    this.state = {\r\n      ignore: false,\r\n    };\r\n    this.handleIgnoreFactor = this.handleIgnoreFactor.bind(this);\r\n  }\r\n\r\n  handleIgnoreFactor(event: React.ChangeEvent<HTMLInputElement>) {\r\n    this.setState({ ignore: event.currentTarget.checked }, (): void => {\r\n      if (this.state.ignore) {\r\n        this.props.handleIgnoreFactor(this.props.name);\r\n      }\r\n    });\r\n  }\r\n\r\n  getBackgroundColor() {\r\n    if (this.state.ignore) {\r\n      return BACKGROUNDCOLOR_DISABLED;\r\n    } else {\r\n      return BACKGROUNDCOLOR_CHOICE;\r\n    }\r\n  }\r\n\r\n  getTextColor() {\r\n    if (this.state.ignore) {\r\n      return TEXTCOLOR_DISABLED;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  getErrorStyles() {\r\n    let formControlStyle: FormControlStyle = {\r\n      background: this.getBackgroundColor(),\r\n      color: this.getTextColor(),\r\n    };\r\n    let showmessage: boolean = false;\r\n    let errorMessageStyle: FormControlStyle = {};\r\n    if (this.props.inputvalidity.status === \"Warning\") {\r\n      showmessage = true;\r\n      formControlStyle[\"border-color\"] = WARNING_COLOR;\r\n      errorMessageStyle[\"color\"] = WARNING_COLOR;\r\n    }\r\n    return { formControlStyle, showmessage, errorMessageStyle };\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Renders Question\" + this.props.name);\r\n    const {\r\n      formControlStyle,\r\n      showmessage,\r\n      errorMessageStyle,\r\n    } = this.getErrorStyles();\r\n\r\n    return (\r\n      <QuestionContext\r\n        name={this.props.name}\r\n        phrasing={this.props.phrasing}\r\n        handleIgnoreFactor={this.handleIgnoreFactor}\r\n        ignore={this.state.ignore}\r\n        helpText={this.props.helpText}\r\n        secondLine={\r\n          showmessage ? (\r\n            <Form.Label className=\"ErrorLabel\" style={errorMessageStyle}>\r\n              {this.props.inputvalidity.message}\r\n            </Form.Label>\r\n          ) : (\r\n            \"\"\r\n          )\r\n        }\r\n      >\r\n        <Form.Control\r\n          as=\"select\"\r\n          name={this.props.name}\r\n          value={this.props.factorAnswer}\r\n          onChange={this.props.handleChange}\r\n          disabled={this.state.ignore}\r\n          style={formControlStyle}\r\n        >\r\n          <option value={this.props.placeholder} hidden>\r\n            {this.props.placeholder}\r\n          </option>\r\n          {this.props.options.map((d: string) => {\r\n            return <option value={d}>{d}</option>;\r\n          })}\r\n        </Form.Control>\r\n      </QuestionContext>\r\n    );\r\n  }\r\n}","import * as d3 from \"d3\";\r\nimport { json } from \"d3\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Label, Spinner } from \"reactstrap\";\r\nimport Factors, {\r\n  StringFactorPermanent,\r\n  FactorAnswers,\r\n  GeneralFactor,\r\n  InputValidity,\r\n} from \"../models/Factors\";\r\nimport HelpJsons from \"../models/HelpJsons\";\r\nimport \"./QuestionMenu.css\";\r\nimport SimpleNumericQuestion from \"./QuestionNumber\";\r\nimport SimpleStringQuestion from \"./QuestionString\";\r\n\r\ninterface QuestionMenuProps {\r\n  handleSuccessfulSubmit: (f: FactorAnswers) => void;\r\n}\r\n\r\ninterface QuestionMenuStates {\r\n  validities: InputValidities;\r\n  factorAnswers: FactorAnswers;\r\n}\r\n\r\ninterface InputValidities {\r\n  [key: string]: InputValidity;\r\n}\r\n\r\nclass QuestionMenu extends React.Component<\r\n  QuestionMenuProps,\r\n  QuestionMenuStates\r\n> {\r\n  factors: Factors;\r\n  helpjsons: HelpJsons;\r\n\r\n  constructor(props: QuestionMenuProps) {\r\n    super(props);\r\n    this.state = {\r\n      validities: {},\r\n      factorAnswers: {},\r\n    };\r\n    this.factors = new Factors(null);\r\n    this.helpjsons = {};\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleIgnoreFactor = this.handleIgnoreFactor.bind(this);\r\n    // this.handleCallback = this.handleCallback.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadFactorNames();\r\n  }\r\n\r\n  loadFactorNames() {\r\n    setTimeout(\r\n      () =>\r\n        Promise.all([\r\n          d3.csv(\"FactorDatabase.csv\"),\r\n          json(\"helpjsons.json\"),\r\n        ]).then((data) => {\r\n          this.factors = new Factors(data[0]);\r\n          this.helpjsons = data[1] as HelpJsons;\r\n          this.setState(\r\n            { factorAnswers: this.factors.getFactorsAsStateObject() },\r\n            () => this.initializeValidities()\r\n          );\r\n        }),\r\n      2000\r\n    );\r\n  }\r\n\r\n  initializeValidities() {\r\n    let res: InputValidities = {};\r\n    for (let factorName in this.state.factorAnswers) {\r\n      res[factorName] = this.factors.getInputValidity(\r\n        factorName,\r\n        this.state.factorAnswers[factorName] as string\r\n      );\r\n    }\r\n    this.setState({ validities: res });\r\n  }\r\n\r\n  checkAllFormsForErrorAndMissing() {\r\n    let submittable = true;\r\n    let validitiesToBeChanged: InputValidities = {};\r\n    for (let factorName in this.state.validities) {\r\n      //checking if there can be submitted a form.\r\n      let validity = this.state.validities[factorName];\r\n      if (validity.status === \"Error\") {\r\n        submittable = false;\r\n      }\r\n      if (validity.status === \"Missing\") {\r\n        validitiesToBeChanged[factorName] = {\r\n          message: \"Ignored by the model\",\r\n          status: \"Warning\",\r\n        };\r\n      }\r\n    }\r\n    return { missingWarnings: validitiesToBeChanged, submittable: submittable };\r\n  }\r\n\r\n  isSubmittable() {\r\n    return Object.values(this.state.validities).every((d: InputValidity) => {\r\n      return d.status !== \"Error\";\r\n    });\r\n  }\r\n\r\n  handleSubmit(event: React.FormEvent) {\r\n    //TODO: brug en bedre måde at tjekke validites.\r\n    event.preventDefault();\r\n    const {\r\n      missingWarnings,\r\n      submittable,\r\n    } = this.checkAllFormsForErrorAndMissing();\r\n    if (submittable) {\r\n      this.setState(\r\n        (prevState: { validities: InputValidities }) => {\r\n          return {\r\n            validities: {\r\n              ...prevState.validities,\r\n              ...missingWarnings,\r\n            },\r\n          };\r\n        },\r\n        () => {\r\n          this.props.handleSuccessfulSubmit(this.state.factorAnswers);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  handleInputChange(ev: ChangeEvent<HTMLInputElement>): void {\r\n    const { name, type } = ev.currentTarget;\r\n    const value = ev.currentTarget.value;\r\n\r\n    this.setState((prevState: QuestionMenuStates) => {\r\n      return {\r\n        validities: {\r\n          ...prevState.validities,\r\n          [name]: this.factors.getInputValidity(name, value),\r\n        },\r\n        factorAnswers: {\r\n          ...prevState.factorAnswers,\r\n          [name]: value,\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  handleIgnoreFactor(factorname: string): void {\r\n    this.setState((prevState: QuestionMenuStates) => {\r\n      return {\r\n        validities: {\r\n          ...prevState.validities,\r\n          [factorname]: this.factors.getInputValidity(factorname, \"\"),\r\n        },\r\n        factorAnswers: {\r\n          ...prevState.factorAnswers,\r\n          [factorname]: \"\",\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  getHelpText(factorName: string): string {\r\n    return factorName in this.helpjsons\r\n      ? this.helpjsons[factorName]\r\n      : \"No help available\";\r\n  }\r\n\r\n  getQuestion(\r\n    factorName: string,\r\n    factor: GeneralFactor<string | boolean | number>\r\n  ) {\r\n    switch (factor.factorType) {\r\n      case \"number\": {\r\n        return (\r\n          <SimpleNumericQuestion\r\n            key={factorName}\r\n            name={factorName}\r\n            placeholder={factor.placeholder}\r\n            factorAnswer={this.state.factorAnswers[factorName] as number}\r\n            phrasing={factor.phrasing}\r\n            handleChange={this.handleInputChange}\r\n            handleIgnoreFactor={this.handleIgnoreFactor}\r\n            inputvalidity={this.state.validities[factorName]}\r\n            helpText={this.getHelpText(factorName)}\r\n          />\r\n        );\r\n      }\r\n      case \"string\": {\r\n        return (\r\n          <SimpleStringQuestion\r\n            key={factorName}\r\n            name={factorName}\r\n            placeholder={factor.placeholder}\r\n            factorAnswer={this.state.factorAnswers[factorName] as string}\r\n            phrasing={factor.phrasing}\r\n            options={(factor as StringFactorPermanent).options}\r\n            handleChange={this.handleInputChange}\r\n            handleIgnoreFactor={this.handleIgnoreFactor}\r\n            helpText={this.getHelpText(factorName)}\r\n            inputvalidity={this.state.validities[factorName]}\r\n          />\r\n        );\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  renderQuestionList() {\r\n    //this should make a list of questions. At its disposal, it has the this.props.factor_database and this.props.factor_answers.\r\n    const submittable: boolean = this.isSubmittable();\r\n    const questionlist = Object.entries(this.factors.factorList).map(\r\n      ([factorName, factor]) => {\r\n        return this.getQuestion(factorName, factor);\r\n      }\r\n    );\r\n    return (\r\n      <div>\r\n        <p>\r\n          Input risk factors to calculate probability of dying of most diseases\r\n          and expected lifespan\r\n        </p>\r\n        <form noValidate onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <div>\r\n              <Button variant=\"primary\" type=\"submit\" disabled={!submittable}>\r\n                Compute\r\n              </Button>\r\n            </div>\r\n            <div>\r\n              {submittable ? (\r\n                \"\"\r\n              ) : (\r\n                <Label className=\"errorLabel\">*Fix inputs</Label>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {questionlist}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (Object.keys(this.state.validities).length === 0) {\r\n      return <Spinner></Spinner>;\r\n    }\r\n    return (\r\n      <div className=\"questionmenu\">\r\n        <h4> Risk factors </h4>\r\n        {this.renderQuestionList()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionMenu;\r\n","import { sum } from \"d3\";\r\nimport { DataRow, DataSet } from \"./PlottingData\";\r\n\r\nexport interface SquareSection {\r\n    name: string,\r\n    cause: string,\r\n    x0: number,\r\n    x: number\r\n}\r\n\r\n\r\nfunction make_squares(res_dat: DataSet){\r\n    const r: SquareSection[][]= res_dat.map( (p_object: DataRow): SquareSection[] => {\r\n        let new_res=[];\r\n        const total_explained= Object.values(p_object.inner_causes).reduce((a, b) => a + b,0);\r\n        // console.log(total_explained);\r\n        let explained=1-total_explained;\r\n        new_res.push({\r\n            name: p_object.name,\r\n            cause: 'Unexplained',\r\n            x0:0,\r\n            x: explained*p_object.total_prob\r\n        });\r\n        for (let [key, value] of Object.entries(p_object.inner_causes)) {\r\n            new_res.push({\r\n                name: p_object.name,\r\n                cause: key,\r\n                x0: explained*p_object.total_prob,\r\n                x: (explained+value)*p_object.total_prob\r\n            });\r\n            explained+=value;\r\n        };\r\n        return new_res;\r\n    });\r\n    const flattened_array = ([] as SquareSection[]).concat(...r);\r\n    return flattened_array;\r\n};\r\n\r\nexport default make_squares;","import * as d3 from 'd3';\r\nimport d3Tip from \"d3-tip\";\r\nimport './BarChart.css';\r\nimport { DataRow, DataSet, AugmentedDataSet, AugmentedDataRow } from './PlottingData';\r\nimport  make_squares, {SquareSection}  from './ComptutationEngine';\r\nimport { ScaleBand } from 'd3';\r\n\r\n\r\nconst MARGIN = { TOP: 2, BOTTOM: 2, LEFT: 10, RIGHT: 10 }\r\nconst WIDTH = 1200;\r\nlet DESIGN= \"LONG\";\r\nconst BARHEIGHT = 50;\r\nconst XBARHEIGHT= 50;\r\nconst PADDING = 0.3;\r\nconst TEXT_COLUMN_SIZE=100;\r\nconst ALTERNATING_COLORS=[\"#CFCFCF\",\"#E4E4E4\"];\r\n\r\ninterface ColorDic {\r\n\t[key: string]: string\r\n}\r\n\r\nconst CAUSE_COLORS: ColorDic={'Unexplained':\"#FFFFFF\",\r\n'partying':'#FF6C00'};\r\n\r\nfunction getDivWidth(div: HTMLElement | null): number {\r\n\tconsole.log(div);\r\n\tif(div === null){\r\n\t\treturn 0;\r\n\t}\r\n    var width = d3.select(div)\r\n      // get the width of div element\r\n      .style('width')\r\n      // take of 'px'\r\n      .slice(0, -2)\r\n    // return as an integer\r\n    return Math.round(Number(width))\r\n  }\r\n\r\ninterface DesignConstants {\r\n\tbarheight: number,\r\n\ttotalheight: number,\r\n\ttotalheightWithXBar: number,\r\n\tstartXScale: number,\r\n\tyListStart: number,\r\n\tyListInnerPadding: number,\r\n\tyListOuterPadding: number,\r\n\tyListAlign: number,\r\n\tmiddleOfChart: number,\r\n\twidth: number,\r\n\ttextTranslation: string,\r\n\ttextAnchor: 'start' | 'middle' | 'end'\r\n}\r\n\r\nfunction longDesignConstants(n: number, width:number): DesignConstants{\r\n\treturn {\r\n\t\tbarheight: 1.5*BARHEIGHT,\r\n\t\ttotalheight: n*1.5*BARHEIGHT,\r\n\t\ttotalheightWithXBar: n*1.5*BARHEIGHT+XBARHEIGHT,\r\n\t\tstartXScale: 10,\r\n\t\tyListStart: XBARHEIGHT,\r\n\t\tyListInnerPadding: 0.48,\r\n\t\tyListOuterPadding: 0.24,\r\n\t\tyListAlign:0.8,\r\n\t\tmiddleOfChart: width/2,\r\n\t\twidth: width,\r\n\t\ttextTranslation: \"translate(\" + 10 +\r\n\t\t \",\" + -BARHEIGHT/8 + \")\",\r\n\t\ttextAnchor: 'start'\r\n\t}\r\n}\r\n\r\nfunction wideDesignConstants(n: number, width: number): DesignConstants{\r\n\treturn {\r\n\t\tbarheight: BARHEIGHT,\r\n\t\ttotalheight: n*BARHEIGHT,\r\n\t\ttotalheightWithXBar: n*BARHEIGHT+XBARHEIGHT,\r\n\t\tstartXScale: TEXT_COLUMN_SIZE,\r\n\t\tyListStart: XBARHEIGHT,\r\n\t\tyListInnerPadding: PADDING,\r\n\t\tyListOuterPadding: PADDING/2,\r\n\t\tyListAlign: 0.5,\r\n\t\tmiddleOfChart: TEXT_COLUMN_SIZE+(width-TEXT_COLUMN_SIZE)/2,\r\n\t\twidth: width,\r\n\t\ttextTranslation: \"translate(\" + -10 + \",\" + (BARHEIGHT/2) + \")\",\r\n\t\ttextAnchor: 'end'\r\n\t}\r\n}\r\n\r\nexport default class BarChart {\r\n    element: HTMLElement|null=null ;\r\n    width: number=0;\r\n    svg!: d3.Selection<SVGSVGElement,unknown,null,undefined>; // the exclamation point is necessary because the compiler does not realize that it is initialized in the constructor\r\n    xAxisGroup: any| null;\r\n\tdata: DataRow[] ;\r\n\tdata2: SquareSection[]=[];\r\n\tstip: any;\r\n\tdrect_order: string[];\r\n\tyBars: ScaleBand<string>;\r\n\r\n\tconstructor(element: HTMLElement | null, database: DataSet) {\r\n\t\tconsole.log(database);\r\n\r\n\t\t//Initializers\r\n\t\tthis.drect_order=[];\r\n\t\tthis.yBars=d3.scaleBand();\r\n\r\n\r\n\t\tthis.data=database;\r\n\t\tconst vis = this\r\n\t\tvis.element=element;\r\n\t\tvis.width=getDivWidth(element)*0.9;  //getDivWidth(element)*0.9;\r\n\t\tconsole.log(\"vis width \" + vis.width);\r\n\t\t//width=\"100%\" viewBox=\"0 0 10 1.5\" preserveAspectRatio=\"xMinYMin\">\r\n\t\tvis.svg = d3.select(element)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t\t.attr(\"width\", vis.width)\r\n                .attr(\"height\", BARHEIGHT+XBARHEIGHT)\r\n\t\t\r\n\r\n\t\tvis.xAxisGroup = vis.svg.append(\"g\")\r\n\t\t\t\t\t\t\t.attr('transform',`translate(0,${XBARHEIGHT})`)\r\n\t\tlet designConstants = (DESIGN==='WIDE') ? wideDesignConstants(1,vis.width) : longDesignConstants(1, vis.width);\r\n\r\n\t\tvis.svg.append('text')\r\n\t\t\t.attr(\"x\", designConstants.middleOfChart)\r\n\t\t\t.attr(\"y\", XBARHEIGHT/2)\r\n\t\t\t.attr(\"font-size\", 20)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(\"Probability of dying of cause\")\r\n\t\t\r\n\t\tvis.make();\r\n\t}\r\n\r\n\tclear(){\r\n\t\td3.select('svg').remove();\r\n\t}\r\n\r\n\trecalibrate_ybars(sort_data: DataSet, designConstants: DesignConstants){\r\n\t\tthis.yBars = d3.scaleBand()\r\n\t\t.domain(sort_data.map((d:any) => d.name))\r\n\t\t.range([designConstants.yListStart, designConstants.totalheightWithXBar])\r\n\t\t.paddingInner(designConstants.yListInnerPadding)\r\n\t\t.paddingOuter(designConstants.yListOuterPadding)\r\n\t\t.align(designConstants.yListAlign)\r\n\t}\r\n\r\n\tmake() {\r\n\t\tconst vis = this;\r\n\t\tconst n=vis.data.length;\r\n\t\tlet designConstants = (DESIGN==='WIDE') ? wideDesignConstants(n,vis.width) : longDesignConstants(n, vis.width);\r\n\r\n\t\tvis.svg.attr(\"height\", designConstants.totalheightWithXBar)\r\n\t\tconst dataSortedName= copyOfSortedDataset(vis.data, 'name');\r\n\t\tconst dataSortedTotal= copyOfSortedDataset(vis.data, 'total_prob');\r\n\r\n\t\tconst augmented_data: AugmentedDataSet=dataSortedTotal.map((d: DataRow, index: number): AugmentedDataRow=> {\r\n\t\t\tlet res: any= d;\r\n\t\t\tres[\"id\"]=index;\r\n\t\t\treturn res;\r\n\t\t})\r\n\r\n\t\tthis.drect_order=dataSortedTotal.map((d) => d.name);\r\n\t\tconst dataSquares=make_squares(dataSortedName);\r\n\r\n\t\t//Setting X-axis\r\n\t\tconst newMaxX=getMaxX(dataSquares);\r\n\t\tconst {xAxisCall, xscale} = this.createXAxisCall(newMaxX, designConstants)\r\n\t\tvis.xAxisGroup.call(xAxisCall)\r\n\r\n\t\t//Setting the mapping disease -> y value\r\n\t\tthis.recalibrate_ybars(dataSortedTotal, designConstants);\r\n\r\n\t\tconst yRects = d3.scaleBand()\r\n\t\t\t.domain(dataSortedTotal.map((d:any) => d.name))\r\n\t\t\t.align(designConstants.yListAlign)\r\n\t\t\t.range([designConstants.yListStart, designConstants.totalheightWithXBar])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\r\n\t\t//DATA JOIN\r\n\t\tconst diseases = vis.svg.selectAll(\"rect.shell\").data(augmented_data, function(d: any){ return d.name })\r\n\r\n\t\t// EXIT\r\n\t\tdiseases.exit().remove()\r\n\r\n\t\t// ENTER\r\n\t\tconst g_components= diseases.enter().append('g').attr('class','rect.shell')\r\n\r\n\r\n\t\t/*  One disadvantage of this structure is that it is important that the text is never inserted before the \r\n\t\t\trectangle. Therefore it is important that they are inserted in the same order. \r\n\t\t*/\r\n\t\tg_components.append('rect').attr('class','drect')\r\n\t\t\t\t.attr(\"y\", (d:any,i:number) => (yRects(d.name) as number))\r\n\t\t\t\t.attr(\"x\", xscale(0))\r\n\t\t\t\t.attr(\"width\", designConstants.width)\r\n\t\t\t\t.attr(\"height\", designConstants.barheight)\r\n\t\t\t\t.attr('fill', function(d:any,i:number) { return ALTERNATING_COLORS[d.id%2]})\r\n\t\t\t\t.style(\"opacity\", 0.5)\r\n\r\n\t\tg_components.insert('text').attr('class','dtext')\r\n\t\t\t\t.attr(\"y\", (d:any) => (this.yBars(d.name) as number))\r\n\t\t\t\t.attr(\"x\", xscale(0))\r\n\t\t\t\t.text( (d:any) => d.name)\r\n\t\t\t\t.style('text-anchor',designConstants.textAnchor)\r\n\t\t\t\t.attr(\"transform\",designConstants.textTranslation)\r\n\r\n\t\t\r\n\t\t//The causes themselves are plotted by this.\r\n        const gs= vis.svg.selectAll(\".causebar\")\r\n\t\t\t\t\t.data(dataSquares, function(d: any) {return d.name+'.'+d.cause})\r\n\r\n\r\n\t\td3.select(\".d3-tip\").remove(); //removes any old visible tooltips that was perhaps not removed by a mouseout event (for example because the mouse teleported instantanously by entering/exiting a full-screen). \r\n\r\n\r\n\t\tvis.stip = d3Tip().attr('class', 'd3-tip').html( (d: SquareSection) => {\r\n\t\t\treturn d.cause;\r\n\t\t\t} )\r\n\t\t\t\t\t\t\t.direction('s')\r\n\t\t\t\t\t\t\t.offset([10,0])\r\n\t\t\t\t\t\t\r\n\t\tvis.svg.call(vis.stip);\r\n\t\t\r\n\r\n\r\n\t\t\r\n\t\tgs.exit().remove()\r\n\r\n\t\tgs.enter().append('rect')\r\n\t\t\t.attr('class','causebar')\r\n\t\t\t.attr(\"y\", d => (this.yBars(d.name) as number))\r\n\t\t\t.attr(\"x\", d => xscale(d.x0))\r\n\t\t\t.attr('height', this.yBars.bandwidth)\r\n\t\t\t.attr(\"width\", d => xscale(d.x)-xscale(d.x0))\r\n\t\t\t.attr(\"fill\", d => CAUSE_COLORS[d.cause])\r\n\t\t\t.attr('stroke', '#2378ae' )\r\n\t\t\t.on(\"mouseenter\", function(e: Event, d: SquareSection){\r\n\t\t\t\td3.selectAll(\".d3-tip\").style(\"background-color\", CAUSE_COLORS[d.cause])\r\n\t\t\t\tvis.stip.show(d,this);\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.raise()\r\n\t\t\t\t\t.style(\"stroke-width\",3)\r\n\t\t\t\t\t.style('stroke','#000000')\r\n\t\t\t\t})\r\n\t\t\t.on(\"mouseleave\",  function(e: Event, d: SquareSection){\r\n\t\t\t\tvis.stip.hide(d,this);\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.style(\"stroke-width\",1)\r\n\t\t\t\t\t.style('stroke','#2378ae')\r\n\t\t\t\t})\r\n\t\t\t.on(\"resize\",  function(e: Event, d: SquareSection){\r\n\t\t\t\tconsole.log('fullscreenchange');\r\n\t\t\t\tvis.stip.hide(d,this);\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.style(\"stroke-width\",1)\r\n\t\t\t\t\t.style('stroke','#2378ae')\r\n\t\t\t\t})\r\n\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\t//});\r\n\t\t\t//.transition().duration(500)\r\n\t\t\t\t//.attr(\"height\", d => HEIGHT - y(d.total_prob))\r\n\t\t\t\t//.attr(\"y\", d => y(d.height)) */\t\r\n\t\t\t\r\n\t}\r\n\r\n\tcreateXAxisCall(newMax: number, designConstants: DesignConstants){\r\n\t\tconst x = d3.scaleLinear()\r\n\t\t.domain([\r\n\t\t\t0, \r\n\t\t\tnewMax*1.15\r\n\t\t])\r\n\t\t.range([designConstants.startXScale,designConstants.width])\r\n\t\t\r\n\t\treturn {xAxisCall: d3.axisTop(x), xscale:x}\r\n\t}\r\n\r\n\tupdate(dataset: DataSet){\r\n\r\n\t\tconst vis = this;\r\n\t\t\r\n\t\tconst dataSortedTotal = copyOfSortedDataset(dataset, \"total_prob\"); \r\n\t\tconst dataSortedName = copyOfSortedDataset(dataset, 'name'); \r\n\r\n\t\t//dataset that connects the original disease order (drect_order) with the new label.\r\n\t\t//In theory, it would be possible to rearrange the labels, but some of them will almost always end up\r\n\t\t//\"below\" a drect-object. Therefore it is easier to rename them.\r\n\t\tconst rename_object= this.drect_order.map((d,i) => {\r\n\t\t\treturn {new_name: dataSortedTotal[i].name, name: d}\r\n\t\t})\r\n\r\n\t\tconst dataSquares=make_squares(dataSortedName);\r\n\r\n\t\tconst n=dataSortedName.length;\r\n\t\tconst designConstants = (DESIGN==='WIDE') ? wideDesignConstants(n,vis.width) : longDesignConstants(n, vis.width);\r\n\r\n\t\t//Updating X-axis\r\n\t\tconst newMaxX=getMaxX(dataSquares);\r\n\t\tconst {xAxisCall, xscale} = this.createXAxisCall(newMaxX, designConstants)\r\n\t\tvis.xAxisGroup.call(xAxisCall)\r\n\r\n\t\t//Updating the disease-to-y mapping (this.yBars)\r\n\t\tthis.recalibrate_ybars(dataSortedTotal, designConstants); \r\n\r\n\t\tconst gs= vis.svg.selectAll(\".causebar\")\r\n\t\t\t.data(dataSquares, function(d: any) {return d.name+'.'+d.cause})\r\n\r\n\t\tconst duration_per_transition=500;\r\n\r\n\t\tgs.transition()\r\n\t\t\t .duration(duration_per_transition)\r\n\t\t\t.attr(\"x\", d => xscale(d.x0))\r\n\t\t\t.attr(\"width\", d => xscale(d.x)-xscale(d.x0))\r\n\t\tgs.transition()\r\n\t\t\t.delay(duration_per_transition)\r\n\t\t\t.duration(duration_per_transition)\r\n\t\t\t.attr(\"y\", d => (this.yBars(d.name) as number))\r\n\r\n\t\tvis.svg.selectAll('.dtext')\r\n\t\t\t.data(rename_object, function(d:any){ return d.name})\r\n\t\t\t.transition()\r\n\t\t\t.delay(duration_per_transition*2)\r\n\t\t\t.text( (d:any) => d.new_name)\r\n\r\n\r\n\t};\r\n}\r\n\r\nfunction copyOfSortedDataset(dataset: DataSet, sorter: 'total_prob' | 'name' ='total_prob'): DataSet{\r\n\treturn dataset.slice().sort(function(a: DataRow, b: DataRow) { return d3.descending(a[sorter], b[sorter]) });\r\n}\r\n\r\nfunction getMaxX(dataset: SquareSection[]):number{\r\n\tlet a= d3.max(dataset, d => d.x);\r\n\tif(a === undefined){\r\n\t\ta=1.0\r\n\t}\r\n\treturn a;\r\n}\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport BarChart from './BarChart';\r\nimport { DataSet } from './PlottingData';\r\n\r\ninterface BarChartWrapperProps {\r\n\tdatabase: DataSet\r\n}\r\n\r\nconst BarChartWrapper = (props: BarChartWrapperProps) => { //class ChartWrapper extends React.PureComponent<any,any> {\r\n\tconst database = props.database;\r\n\tconsole.log(database);\r\n\tconst chartArea = useRef(null);\r\n\tconst [chart, setChart] = useState<BarChart | null>(null);\r\n\tconst { width } = useWindowSize();\r\n\r\n\tconst createNewChart = function () {\r\n\t\tsetChart(new BarChart(chartArea.current, database));\r\n\t}\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('width changed');\r\n\t\tif (chart) {\r\n\t\t\tchart.clear();\r\n\t\t\tcreateNewChart();\r\n\t\t}\r\n\t}, [width])\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('dataset changed');\r\n\t\tif (chart) {\r\n\t\t\tchart.update(database);\r\n\t\t}\r\n\t}, [database]);\r\n\r\n\tuseEffect(() => {\r\n\t\tcreateNewChart();\r\n\t}, []);\r\n\r\n\treturn <div className=\"container\" ref={chartArea} id=\"barchartcontainer\" />\r\n\r\n}\r\n\r\nfunction useWindowSize() {\r\n\tconst [windowSize, setWindowSize] = useState({\r\n\t\twidth: window.innerWidth,\r\n\t});\r\n\r\n\tlet resize_graphic = true;\r\n\tfunction changeWindowSize() {\r\n\t\tif (resize_graphic) {\r\n\t\t\tresize_graphic = false;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetWindowSize({ width: window.innerWidth });\r\n\t\t\t\tresize_graphic = true;\r\n\t\t\t}, 400);\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener(\"resize\", changeWindowSize);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"resize\", changeWindowSize);\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn windowSize;\r\n}\r\n\r\nexport default BarChartWrapper;","export interface InnerCause  {\r\n    [key: string]: number;\r\n}\r\n\r\nexport interface DataRow  {\r\n    name: string,\r\n    total_prob: number,\r\n    inner_causes: InnerCause\r\n}\r\n\r\nexport type DataSet =DataRow[];\r\n\r\nexport const TEST_DATA: DataSet= [{name: 'Corona',total_prob:0.09, inner_causes:{partying:0.45, smoking:0.1}},\r\n{name:'BOld age', total_prob:0.8, inner_causes:{'smoking':0, partying:0}}, {name: 'Accidents', total_prob:0.11, inner_causes:{partying:0.1}}];\r\n\r\nexport const TEST_DATA2: DataSet= [{name: 'Corona',total_prob:0.15, inner_causes:{partying:0.05, smoking:0.20}},\r\n{name:'BOld age', total_prob:0.7, inner_causes:{'smoking':0.02, partying: 0}}, {name: 'Accidents', total_prob:0.10, inner_causes:{partying:0}}];\r\n\r\n\r\n//To make the text-on-rect visualization in d3, I felt it was necessary to introduce AugmentedDataRow, but now I think there are other ways around it, so this will probably deleted in the future:\r\ninterface Id {\r\n    id: number\r\n}\r\n\r\nexport interface AugmentedDataRow extends DataRow, Id {}\r\n\r\nexport type AugmentedDataSet= AugmentedDataRow[];","import React from 'react';\r\nimport './VizWindow.css';\r\nimport BarChartWrapper from './BarChartWrapper';\r\nimport { TEST_DATA, TEST_DATA2 } from './PlottingData';\r\n\r\nclass VizWindow extends React.PureComponent<any, any> {\r\n    counter: number = 0;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            selected_visualization: \"allcauses\",\r\n            database: TEST_DATA\r\n        };\r\n    }\r\n\r\n    renderVisualization() {\r\n        //uses this.state.selcted_visualization and this.props.database and this.props.factor_answers to make the relevant revisualization.\r\n    }\r\n\r\n    handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        //this.setState({ });\r\n        if (this.counter % 2 === 0) {\r\n            this.counter++;\r\n            this.setState({ database: TEST_DATA2, selected_visualization: event.currentTarget.value });\r\n        }\r\n        else {\r\n            this.counter++;\r\n            this.setState({ database: TEST_DATA, selected_visualization: event.currentTarget.value });\r\n        }\r\n    };\r\n\r\n    render(): React.ReactNode {\r\n        console.log(this.props)\r\n        return (<div className='vizwindow'>\r\n            <h4> Visualization Menu </h4>\r\n\r\n            <select id=\"visualizations\" onChange={this.handleChange} value={this.state.selected_visualization}>\r\n                <option value=\"allcauses\">TEST_DATA</option>\r\n                <option value=\"allages\">TEST_DATA2</option>\r\n            </select>\r\n            <BarChartWrapper database={this.state.database} />\r\n        </div>);\r\n    };\r\n}\r\n\r\nexport default VizWindow;","\r\nimport React, { MouseEvent } from 'react';\r\nimport { Col, Container, Row } from 'reactstrap';\r\nimport './App.css';\r\nimport FrequencyTable from './components/database/Age';\r\nimport Deathcause from './components/database/Deathcause';\r\nimport { RiskFactorGroup } from './components/database/RickFactorGroup';\r\nimport { RiskRatioTable } from './components/database/RiskRatioTable';\r\nimport Header from './components/Header';\r\nimport QuestionMenu from './components/QuestionMenu';\r\nimport VizWindow from './components/VizWindow';\r\nimport Factors, { FactorAnswers } from './models/Factors';\r\nimport causesData from './resources/Causes.json';\r\n\r\n\r\ninterface AppState {\r\n  factorAnswersSubmitted: FactorAnswers | null,\r\n  factorDatabase: any,\r\n}\r\n\r\nclass App extends React.Component<any, AppState> {\r\n\r\n\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      factorAnswersSubmitted: null,\r\n      factorDatabase: null\r\n    } \r\n    //this.handleChange = this.handleChange.bind(this)\r\n    this.handleSuccessfulSubmit = this.handleSuccessfulSubmit.bind(this)\r\n    //this.handleIgnoreFactor = this.handleIgnoreFactor.bind(this)\r\n  };\r\n\r\n  handleSuccessfulSubmit(factorAnswers: FactorAnswers): void {\r\n    this.setState({\r\n      factorAnswersSubmitted: Object.create(factorAnswers)\r\n    })\r\n  }\r\n\r\n\r\n\r\n  // loadFactorAnswers() {\r\n  //   this.setState({\r\n  //     factorAnswers: new Factors()\r\n  //   })\r\n  //   // load_factor_answers.then((loaded_factor_answers)=> this.setState({hasLoadedFactorAnswers: false, factor_answers:loaded_factor_answers})).\r\n  //   // This will load the factor answers and then it will update the rendered view using setState.\r\n  // }\r\n\r\n  // loadDatabase() {\r\n  //   // load_data.then((loaded_data)=> this.setState({hasLoadedDatabase: false, factor_answers:loaded_data})).\r\n  //   // This will load the data and then it will update the rendered view using setState.\r\n  //   // this.setState({ database: json('../compile/Causes_for_json'), hasLoadedDatabase: true });\r\n  // }\r\n\r\n  loadFactorDatabase() {\r\n    let res: Deathcause[] = [];\r\n    let database = causesData;\r\n    // console.log(database.BreastCancer.RiskFactorGroups[0])\r\n\r\n    // for (var key in database) {\r\n    //   if (database.hasOwnProperty(key)) {\r\n    //     console.log(database[key as keyof typeof database])\r\n    //     res.push(new Deathcause(database[key as keyof typeof database], key))\r\n    //   }\r\n    // }\r\n\r\n    // console.log(res)\r\n    // console.log(age)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadFactorDatabase()\r\n    this.setState({\r\n      factorDatabase: causesData\r\n    })\r\n  }\r\n\r\n\r\n  renderQuestionMenu() {\r\n    return (\r\n      <QuestionMenu \r\n                    handleSuccessfulSubmit={this.handleSuccessfulSubmit} />\r\n    );\r\n  }\r\n\r\n  renderVizWindow() {\r\n    return (\r\n      <VizWindow factorAnswersSubmitted={this.state.factorAnswersSubmitted} />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    console.log('Renders App')\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Container fluid>\r\n        <Row>\r\n          <Col  lg={4}  xl={3} style={{ padding: '0px' }}>\r\n            {this.renderQuestionMenu()}\r\n          </Col>\r\n          <Col  lg={8}  xl={9} style={{ padding: '0px' }}>\r\n            {this.state.factorAnswersSubmitted ? this.renderVizWindow() : \"yolo\"}\r\n          </Col>\r\n        </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}