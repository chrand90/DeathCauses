{"version":3,"sources":["models/FactorAbstract.ts","components/Header.tsx","models/FactorNumber.ts","models/FactorString.ts","components/Helpers.ts","models/Factors.ts","components/Question.tsx","components/QuestionMenu.tsx","components/UnitPicker.tsx","components/QuestionNumber.tsx","components/QuestionString.tsx","components/AskedQuestionFrame.tsx","components/QuestionListFrame.tsx","components/ComptutationEngine.tsx","components/BarChart.tsx","components/BarChartWrapper.tsx","models/RelationLinks.ts","models/KahnSort.ts","components/RelationLinkViz.tsx","components/RelationLinkVizWrapper.tsx","models/updateFormNodes/UpdateFormInitialize.ts","components/PlottingData.tsx","models/updateFormNodes/ComputedFactors.ts","models/updateFormNodes/UpdateFormController.ts","components/database/FrequencyTable.ts","components/database/Monomial.ts","components/database/Polynomial.ts","components/database/RiskRatioTableCell/EnumerateValue.ts","components/database/RiskRatioTableCell/NumericInterval.ts","components/database/RiskRatioTableCell/NumericValue.ts","components/database/ParsingFunctions.ts","components/database/InterpolationEntry.ts","components/database/RiskRatioTableEntry.ts","components/database/RiskRatioTable.ts","components/database/RickFactorGroup.ts","components/database/Deathcause.ts","components/BarPlotWrapper.tsx","components/Calculations/CalculationService.ts","components/Calculations/CalculationsFacade.ts","components/VizWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FactorTypes","Header","className","React","PureComponent","ExplanationStart","GeneralFactor","factorName","initialValue","phrasing","placeholder","derivableStates","helpJson","factorType","this","val","IS_NUMBER_REGEX","IS_NUMBER_WITH_COMMAS_REGEX","customRound","x","Number","parseFloat","toPrecision","extractLimsAndExplanation","domain","explanationStart","scalingFactor","lowerLim","upperLim","explanation","min","max","NumericFactorPermanent","requiredDomain","recommendedDomain","unitOptions","lowerRecommended","upperRecommended","lowerRequired","upperRequired","explanationRecommendation","explanationRequirement","unitDic","unitStrings","Object","keys","initializeUnitDic","elm","REQUIREMENT_PHRASING","elm2","RECOMMENDATION_PHRASING","entries","forEach","unitName","required","recommended","length","input","unit","undefined","trimmedInput","trim","status","message","isNumeric","test","numberToCheck","checkNumberInput","hasUnitOptions","lower","Math","upper","random","StringFactorPermanent","options","derivableStatesInitializer","includes","floor","Visualization","Factors","data","factorList","reverseDerivables","factorname","factorobject","type","NUMERIC","longExplanation","units","derivables","STRING","initializeReverseDerivables","dos","inner","middle","res","causedFactor","dom","causativeFactor","dm","causativeFactorValue","causedFactorValue","reverseDeriveMapping","factorToCheck","factorAnswers","factorMaskingChanges","factorValue","maskedFactors","effectiveValue","maskedFactor","maskingObject","maskedByFactor","maskedByValue","changedFactor","oldMaskedValues","factorsToCheck","pop","newFactorsToCheck","checkFactorAndUpdateFactorMaskings","concat","fin","maskValue","filterNullsFromFactorMaskings","factorMaskingCandidate","factorMaskings","initializedFactorAnswers","String","simulateValue","updateMasked","parentList","causativeFactors","theOneCausativeFactor","unshift","rdat","descendants","map","d","findMaxDescendants","getSuperDescendantCount","makeParentList","maxDescendants","getMaxDescendants","compare","factorname1","factorname2","topParent1","topParent2","count","localeCompare","factornames","ageIndex","indexOf","splice","sort","stateObject","getInitialValue","name","value","checkInput","getScalingFactor","ALTERNATING_COLORS","AnswerProgress","QuestionView","BACKGROUNDCOLOR_DISABLED","ERROR_COLOR","WARNING_COLOR","CHANGED_COLOR","QuestionContext","props","featured","helpText","descendantMessage","questionPhrasing","Popover","id","Title","as","Content","helpBoxContent","Form","Check","onChange","handleIgnoreFactor","checked","ignore","label","injected","Tooltip","OverlayTrigger","placement","overlay","style","boxContent","validityStatus","validityBoxStyling","tooltipID","tooltipClass","toLowerCase","show","secondLine","trigger","rootClose","windowWidth","helpBox","Button","variant","widthOfArea","l","writtenName","p","pixelsForFactorNameHeader","pixelsPerLetter","fontSize","sliceval","slice","pixelsPerLetterAlternative","fontSizeForFactorNameHeader","color","FactorNameColor","fontWeight","marginBottom","textAlign","Dropdown","Toggle","Menu","Item","href","marginTop","unitText","descendantDeathCauses","onClick","orderVisualization","RELATION_GRAPH","rightPluralOfCause","errorMessageStyle","Row","toString","xs","height","lineHeight","overflow","inLineFactorNameHeader","Group","InputGroup","children","Append","validityBox","helpBoxButton","IgnoreCheckBox","IgnoreCheckBoxSmall","Label","getErrorMessageStyle","UnitPicker","chosenValue","handleToggleUnit","bind","i","onChoice","delay","hide","renderToolTips","marginLeft","marginRight","padding","size","SimpleNumericQuestion","formControlStyle","background","TextInputBackgroundColor","showmessage","inputvalidity","console","log","a","b","newUnit","handleUnitChange","getErrorStyles","unitButtonOrText","Control","factorAnswer","handleChange","disabled","autoFocus","SimpleStringQuestion","getBackgroundColor","getTextColor","hidden","AskedQuestionFramed","buttonText","validity","buttonStyle","finished","ev","preventDefault","onSwitchView","onSubmit","isChanged","aria-contols","Card","minHeight","maxHeight","maxWidth","leftCornerCounter","Body","Footer","ButtonToolbar","ButtonGroup","previousPossible","onPrevious","DropdownButton","title","onStartOver","onFinishNow","onFinishRandomly","getMovingOnButton","Component","QuestionListFrame","hasError","float","submitButtonMessage","makeSubmitButton","getViewport","document","documentElement","clientWidth","window","innerWidth","QuestionMenu","factors","helpjsons","factorOrder","state","validities","factorAnswerScales","hasBeenAnswered","answeringProgress","ANSWERING","currentFactor","activelyIgnored","view","QUESTION_MANAGER","changedSinceLastCommit","handleSubmit","handleInputChange","previousQuestion","startOverQuestionnaire","updateWidth","finishQuestionnaire","insertRandom","switchView","setState","NOTHING","loadFactorNames","addEventListener","removeEventListener","setTimeout","Promise","all","json","then","getSortedOrder","relationLinkData","getFactorsAsStateObject","initializeValidities","getInputValidity","submittable","validitiesToBeChanged","missingWarnings","values","every","event","checkAllFormsForErrorAndMissing","prevState","newAnswerProgress","newHasBeenAnswered","newCurrentFactor","push","FINISHED","submittedAnswers","scale","insertActualValue","handleSuccessfulSubmit","new_validities","factorval","newFactorAnswers","updatedFactor","possiblyNewMasks","currentTarget","newMasks","makeNewMasksUpdateObject","e","newUnitName","getHelpJson","factor","getHelpText","getDeathCauseDescendants","redoAllValidities","previousState","simulateFactorAnswersAndMaskings","denominator","numerator","filter","find","AskedQuestionFrame","getCounter","getQuestion","isSubmittable","questionList","noValidate","Collapse","in","onExited","QUESTION_LIST","timeout","justifyContent","getQuestionToAnswer","Spinner","renderQuestionList","make_squares","res_dat","r","p_object","new_res","explained","innerCauses","reduce","cause","x0","totalProb","key","BARHEIGHT","XBARHEIGHT","BASE_COLORS","longDesignConstants","n","width","barheight","totalheight","totalheightWithXBar","startXScale","yListStart","yListInnerPadding","yListOuterPadding","yListAlign","middleOfChart","textTranslation","textAnchor","BarChart","element","database","colorDic","svg","xAxisGroup","data2","stip","drect_order","yBars","d3","assign","vis","div","round","getDivWidth","append","attr","designConstants","text","make","remove","sort_data","range","paddingInner","paddingOuter","align","dataSortedName","copyOfSortedDataset","dataSortedTotal","augmented_data","index","dataSquares","newMaxX","getMaxX","createXAxisCall","xAxisCall","xscale","call","recalibrate_ybars","yRects","diseases","selectAll","exit","g_components","enter","insert","gs","d3Tip","html","direction","offset","bandwidth","on","raise","newMax","dataset","rename_object","new_name","duration_per_transition","transition","duration","sorter","BarChartWrapper","NodeType","chartArea","useRef","useState","chart","setChart","windowSize","setWindowSize","resize_graphic","changeWindowSize","useEffect","useWindowSize","createNewChart","current","clear","update","ref","NODE_ORDER","INPUT","COMPUTED_FACTOR","CONDITION","CAUSE_CATEGORY","CAUSE","RelationLinks","jsonObject","superDescendantCount","superAncestorCount","ancestorList","descendantList","superAncestorList","superDescendantList","nodeOrderReversed","deathCauseDescendants","sortedNodes","initializeReverseNodeTypeOrder","initializeInheritanceListsAndTypeAndColor","initializeSuperInheritanceLists","initializeSortedNodes","nodeName","node","ancestors","ancestor","findDescendants","findAncestors","findDeathCauseDescendants","nodeType","nodesToBeSorted","nodename","backwardEdges","forwardEdge","removableNodes","nonRemovableNodes","candidate","shift","kahnSort","fromNode","toNode","fromType","toType","descendantsListsOfDescendants","descendantsListsOfCauseDescendants","ancestorsListsOfAncestors","currentCategory","upstreamElements","followGraph","downStreamElements","xval","untransformed","outerNodes","nodeExtremas","getLowestAndHighestCategory","getNumberOfNodesInEitherDirection","computeXValueOfInitialNode","cat","x_relative","y","usedKeys","arrows","descendantInfo","makePlottingInNodeDicDirection","s","untransformedlabels","ancestorInfo","adjXReturn","adjustXCoordinates","weights","cumWeights","dat","xvals","ut","followMaximumSumOfSummary","computeCumulativeWeights","resDat","catOrder","newX","xDivisions","transformedLabels","prevElements","nodeDic","superDestinations","bottomY","topY","xDirection","arrowDirection","makeEmptyDirectionInfo","getChildrenAndWeight","sumweights","parentNodeType","parentYval","yfrom","childNodeName","childCategory","yto","yval","computeYPositionOfLabel","previousElementsInSameCategory","computeXPositionOfLabel","directionInfo","createUniqueKey","arrowtype","getArrowType","froto","from","to","parentNode","parentCat","parentCatIndex","nrev","ntyp","aIndex","bIndex","abs","descendantAncestorList","compareChildNodesFunction","sameCategoryAsParent","remainingElements","parentType","childType","continueTest","summary","tmp","listOfNodes","minindex","maxindex","categoriesPresent","visitedNodesInOrder","nodeCategories","RelationLinkViz","canvas","elementInFocus","changeElementInFocus","pdat","makePlottingInstructions","maxX","getMax","maxY","yfromDomain","ytoDomain","insertBB","each","getBBox","adjustedArrows","yscale","nodes","x1org","y1org","x2org","y2org","aorg","percentage","atan","PI","arrowExtender","x1","x2","y1","y2","h1","bbox","w1","wOrg1","R1","xAdd1","h2","w2","wOrg2","R2","xAdd2","sign","ae","pixels","xchange","sqrt","shortenArrow","computeArrowEndPoints","tooltipdiv","ud","pageX","pageY","arrowInterpretation","stopPropagation","selection","coordinate","maxval","RelationLinkWrapper","ChangeStatus","TypeStatus","MissingStatus","DimensionStatus","StochasticStatus","getAllPossibleNodes","TEST_DATA","partying","smoking","TEST_DATA2","InputFactorToUpdateForm","lastInputFactorAnswers","lastOutputNodeValues","change","CHANGED","missing","NONMISSING","dimension","SINGLE","DETERMINISTIC","MISSING","UNCHANGED","createNewFactorVal","FormUpdater","ageFrom","ageTo","lastOutput","allPreviousUpdateForms","udic","getAgeFrom","getAgeTo","age","isUnchanged","isMissing","handleMissing","compute","SmokeSinceStop","SmokingStopped","getNode","getAges","newValue","ChangedAndMissing","YEARLY","PhysicalTotal","SmokeCumulative","SmokingPastAmount","SmokeIntensity","SmokeDuration","smokeStart","SmokeTypicalAmount","pastAverage","proportion","OralContraceptiveEver","oralStatus","OralContraceptiveSinceStop","oralStopped","oralTillStop","packConstructor","classDefinition","ComputedFactorClasses","updateDicToFactorAnswers","updateform","ComputeController","calculationFacade","formUpdaters","inputFactorTreater","formUpdaterNames","initialize","computedFactorName","getAncestors","calculateInnerProbabilities","formUpdater","calculateSurvivalCurve","FrequencyTable","AGE_INTERVALS","ageClassifications","agePrevalences","getPrevalence","indexOfAgePrevalance","findIndex","ageInterval","age_classification","age_prevalences","Error","Monomial","coefficent","exponents","coefficient","submittedFactorAnswers","pow","Polynomial","monomials","monomial","evaluate","EnumeratedValue","NumericInterval","endPointFrom","endPointTo","Infinity","NumericValue","number","parseStringToInputType","intervalRegex","RegExp","singleNumericRegex","intervalResult","exec","singleNumericResult","parseExponents","numberOfVariables","exponentRegex","regexResult","Array","InterpolationEntry","inputJson","minValue","maxValue","polynomial","getRelevantFactorAnswers","sumbittedFactorAnswers","polynomialTermRegex","variablesRegex","Set","match","groups","coef","expo","parseStringToPolynomial","interpolationPolynomial","relevantFactorAnswers","isInputWithinCell","RiskRatioTableEntry","factorValues","riskRatioValue","factorToMinimize","factorIndexToFind","RiskRatioTable","factorNames","riskRatioTable","interpolation","riskFactorNames","interpolationTable","indexOfFactor","riskRatiosToMinimize","rrt","isSingleFactorInDomain","rte","riskRatioValues","rrte","minimumIndex","minRrte","isFactorAnswersInDomain","interpolationEntry","relevantInterpolationFactorAnswers","interpolateRR","RiskFactorGroup","normalisationFactors","interactionFunction","riskRatioTables","normalisingFactors","allFactors","DeathCause","ages","riskFactorGroups","deathCauseName","Age","RiskFactorGroups","BarPlotWrapper","margin","prob","u","tickValues","join","tip","RiskRatioCalculationService","MAX_AGE","deathcauses","probabilitiesPerDeathCause","calculateProbabilitiesOfDeathCauses","deathCauseProbabilities","probabilitiesOfAllDeathCauses","probabiltiesOfDeathCause","totalProbabilityOfNotDying","_","sum","survivalCurve","currentAge","ageRange","getAgeRange","probabilityOfDeathcause","deathcause","probabilties","calculateProbForSingleCauseAndAllAges","createProbabilityOfDeathCauseObject","deathCause","probabilities","probability","calculateProbabilityForSingleCauseAndAge","selectedAge","agePrevalence","riskFactorGroup","calculateProbabilityOfRiskFactorGroup","riskFactorGroupFactors","getAllFactorsInGroup","getRiskRatio","factorAnswersSubmitted","deathCauses","innerCausesForAllAges","currentProbOfBeingAlive","totalProbOfDying","factorAnswersSubmittedUpdated","innerCausesForAges","it","first","second","innerCause","combineMultipleInnerCauses","combinedInnerCause","ratio","uStar","calculateUStar","firstOrderDecomposition","calculateFirstOrderDecomposition","propForDeathcause","minProbForDeathcause","probForDeathcause","minimumFactorIntervals","rfg","getMinimumRRFactors","minimumFactorInputs","getValueInCell","minFactorIntervals","minFactorValues","rfgRes","calculateFirstOrderDecompositionForRiskFactorGroup","minRR","getMinimumRR","minRRexceptForOne","getMinimumRRForSingleFactor","CalculationFacade","probabilityOfDeathCauseCalculation","calculateProbabilitiesForDeathcauses","calculateInnerProbabilitiesForAllCausesAndAges","VizWindow","computerController","factorDatabase","BAR_GRAPH","SURVIVAL_GRAPH","survivalData","prevProps","updateComputerController","computeInnerProbabilities","computeSurvivalData","causesData","hasOwnProperty","Deathcause","c","loadFactorDatabase","visualization","getColorDic","newFocus","NO_GRAPH","defaultValue","renderSelectOption","renderChosenGraph","App","loadRelationLinks","visualizationType","Container","fluid","Col","lg","xl","renderQuestionMenu","animation","renderVizWindow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.59bd5650.chunk.js","sourcesContent":["export interface InputValidity {\r\n  status: \"Error\" | \"Warning\" | \"Missing\" | \"Success\";\r\n  message: string;\r\n}\r\n\r\nexport interface DeriveMapping {\r\n  [factorValue: string]: string;\r\n}\r\n\r\nexport interface DerivableOptions {\r\n  [deriver: string]: DeriveMapping;\r\n}\r\n\r\nexport enum FactorTypes {\r\n  NUMERIC = \"number\",\r\n  STRING = \"string\",\r\n}\r\n\r\nexport default abstract class GeneralFactor {\r\n  factorName: string;\r\n  initialValue: string;\r\n  phrasing: string; //If the factor is not going to be asked, the phrasing should be nu\r\n  placeholder: string;\r\n  factorType: string = \"abstract\";\r\n  helpJson: string | null;\r\n  derivableStates: DerivableOptions;\r\n\r\n  constructor(\r\n    factorName: string,\r\n    initialValue: string,\r\n    phrasing: string,\r\n    placeholder: string = \"\",\r\n    derivableStates: DerivableOptions = {},\r\n    helpJson: string | null = null\r\n  ) {\r\n    this.factorName = factorName;\r\n    this.initialValue = initialValue;\r\n    this.phrasing = phrasing;\r\n    this.placeholder = placeholder;\r\n    this.helpJson = helpJson;\r\n    this.derivableStates = derivableStates;\r\n  }\r\n\r\n  // replaceFloats(derivableStates: DerivableOptions): DerivableOptions {\r\n  //   Object.entries(derivableStates).forEach(([factorname, mappings]) => {\r\n  //     Object.entries(mappings).forEach(([from,to]) => {\r\n  //       derivableStates[factorname][from]=to.toString()\r\n  //     })\r\n  //   })\r\n  //   return derivableStates\r\n  // }\r\n\r\n  getInitialValue(): string {\r\n    return this.initialValue;\r\n  }\r\n\r\n  insertActualValue(val: string): string | number{\r\n    return val;\r\n  }\r\n\r\n  abstract checkInput(input: string | boolean, unit?: string): InputValidity;\r\n\r\n  abstract getScalingFactor(unitName: string): number;\r\n\r\n  abstract simulateValue(): string ;\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.PureComponent {\r\n\r\n    render(): React.ReactNode {\r\n        return (<div className='header'> \r\n            <h1> Death Causes</h1>\r\n        </div>);\r\n    };\r\n}\r\n\r\nexport default Header;","import GeneralFactor, {DerivableOptions, InputValidity} from \"./FactorAbstract\";\r\n\r\nexport interface Domain {\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport interface UnitOptions {\r\n  [unitname: string]: number;\r\n}\r\n\r\ninterface ExplanationAndLimits {\r\n  lowerLim: null | number;\r\n  upperLim: null | number;\r\n  explanation: string;\r\n}\r\n\r\ninterface ScalingInfo {\r\n  required: ExplanationAndLimits;\r\n  recommended: ExplanationAndLimits;\r\n  scalingFactor: number;\r\n}\r\n\r\ninterface UnitTable {\r\n  [key: string]: ScalingInfo;\r\n}\r\n\r\nenum ExplanationStart {\r\n  RECOMMENDATION_PHRASING = \"More accurate if\",\r\n  REQUIREMENT_PHRASING = \"Should be\",\r\n}\r\n\r\nconst IS_NUMBER_REGEX = /^[-]?(\\d+|[.]\\d+|\\d+[.]\\d*|)$/;\r\nconst IS_NUMBER_WITH_COMMAS_REGEX = /^[-]?([\\d,]+|[,]\\d+|[\\d,]+[,.]\\d+)$/;\r\n\r\nfunction customRound(x: number): string {\r\n  return Number.parseFloat(x.toPrecision(2)).toPrecision();\r\n}\r\n\r\nfunction extractLimsAndExplanation(\r\n  domain: Domain | null,\r\n  explanationStart: ExplanationStart,\r\n  scalingFactor: number = 1\r\n): ExplanationAndLimits {\r\n  if (domain === null) {\r\n    return { lowerLim: null, upperLim: null, explanation: \"\" };\r\n  } else {\r\n    let lowerLim: null | number = null;\r\n    let upperLim: null | number = null;\r\n    let explanation: string = \"\";\r\n    if (\"min\" in domain) {\r\n      explanation += explanationStart;\r\n      lowerLim = domain.min! / scalingFactor;\r\n      if (\"max\" in domain) {\r\n        upperLim = domain.max! / scalingFactor;\r\n        explanation +=\r\n          \" between \" +\r\n          (scalingFactor === 1 ? domain.min : customRound(lowerLim)) +\r\n          \" and \" +\r\n          (scalingFactor === 1 ? domain.max : customRound(upperLim));\r\n      } else {\r\n        explanation +=\r\n          \" larger than \" +\r\n          (scalingFactor === 1 ? domain.min : customRound(lowerLim));\r\n      }\r\n    } else {\r\n      if (\"max\" in domain) {\r\n        upperLim = domain.max! / scalingFactor;\r\n        explanation +=\r\n          explanationStart +\r\n          \" smaller than \" +\r\n          (scalingFactor === 1 ? domain.max : customRound(upperLim));\r\n      }\r\n    }\r\n    return { lowerLim: lowerLim, upperLim: upperLim, explanation: explanation };\r\n  }\r\n}\r\n\r\n\r\nexport default class NumericFactorPermanent extends GeneralFactor {\r\n    lowerRecommended: number | null = null;\r\n    upperRecommended: number | null = null;\r\n    lowerRequired: number | null = null;\r\n    upperRequired: number | null = null;\r\n    explanationRecommendation: string = \"\";\r\n    explanationRequirement: string = \"\";\r\n    unitOptions: UnitOptions;\r\n    unitDic: UnitTable = {};\r\n    unitStrings: string[];\r\n    requiredDomain: Domain | null;\r\n    recommendedDomain: Domain | null;\r\n  \r\n    constructor(\r\n      factorName: string,\r\n      initialValue: string,\r\n      phrasing: string = \"\",\r\n      placeholder: string = \"\",\r\n      requiredDomain: Domain | null = null,\r\n      recommendedDomain: Domain | null = null,\r\n      unitOptions: UnitOptions,\r\n      helpJson: string | null = null,\r\n      derivableStates: DerivableOptions\r\n    ) {\r\n      super(\r\n        factorName,\r\n        initialValue,\r\n        phrasing,\r\n        placeholder,\r\n        derivableStates,\r\n        helpJson\r\n      );\r\n      this.unitOptions = unitOptions;\r\n      this.unitStrings = Object.keys(unitOptions);\r\n      this.requiredDomain = requiredDomain;\r\n      this.recommendedDomain = recommendedDomain;\r\n      this.initializeUnitDic()\r\n      const elm = extractLimsAndExplanation(\r\n        requiredDomain,\r\n        ExplanationStart.REQUIREMENT_PHRASING\r\n      );\r\n      this.lowerRequired = elm.lowerLim;\r\n      this.upperRequired = elm.upperLim;\r\n      this.explanationRequirement = elm.explanation;\r\n      const elm2 = extractLimsAndExplanation(\r\n        recommendedDomain,\r\n        ExplanationStart.RECOMMENDATION_PHRASING\r\n      );\r\n      this.lowerRecommended = elm2.lowerLim;\r\n      this.upperRecommended = elm2.upperLim;\r\n      this.explanationRecommendation = elm2.explanation;\r\n      this.factorType = \"number\";\r\n    }\r\n  \r\n    initializeUnitDic(){\r\n      Object.entries(this.unitOptions).forEach(([unitName, scalingFactor]) => {\r\n        this.unitDic[unitName] = {\r\n          required: extractLimsAndExplanation(\r\n            this.requiredDomain,\r\n            ExplanationStart.REQUIREMENT_PHRASING,\r\n            scalingFactor\r\n          ),\r\n          recommended: extractLimsAndExplanation(\r\n            this.recommendedDomain,\r\n            ExplanationStart.RECOMMENDATION_PHRASING,\r\n            scalingFactor\r\n          ),\r\n          scalingFactor: scalingFactor,\r\n        };\r\n      });\r\n    }\r\n  \r\n    hasUnitOptions() {\r\n      return Object.keys(this.unitOptions).length > 0;\r\n    }\r\n  \r\n    getScalingFactor(unitName: string) {\r\n      return this.unitDic[unitName].scalingFactor;\r\n    }\r\n\r\n    insertActualValue(val: string): number | \"\"{\r\n      if(val===\"\"){\r\n        return \"\"\r\n      }\r\n      return parseFloat(val)\r\n    }\r\n  \r\n    checkInput(\r\n      input: string,\r\n      unit: string | undefined = undefined\r\n    ): InputValidity {\r\n      let trimmedInput = input.trim();\r\n      if (trimmedInput === \"\") {\r\n        return { status: \"Missing\", message: \"\" };\r\n      }\r\n      let isNumeric = IS_NUMBER_REGEX.test(trimmedInput);\r\n  \r\n      if (!isNumeric) {\r\n        if (IS_NUMBER_WITH_COMMAS_REGEX.test(trimmedInput)) {\r\n          return {\r\n            status: \"Error\",\r\n            message: \"Use a dot(.) as decimal separator.\",\r\n          };\r\n        }\r\n        return { status: \"Error\", message: \"Input is not a number\" };\r\n      }\r\n      const numberToCheck = parseFloat(trimmedInput);\r\n      return this.checkNumberInput(numberToCheck, unit);\r\n    }\r\n  \r\n    checkNumberInput(\r\n      numberToCheck: number,\r\n      unit: string | undefined\r\n    ): InputValidity {\r\n      if (unit && this.hasUnitOptions()) {\r\n        let lowerRequired = this.unitDic[unit].required.lowerLim;\r\n        let upperRequired = this.unitDic[unit].required.upperLim;\r\n        let explanationRequirement = this.unitDic[unit].required.explanation;\r\n        let lowerRecommended = this.unitDic[unit].recommended.lowerLim;\r\n        let upperRecommended = this.unitDic[unit].recommended.upperLim;\r\n        let explanationRecommendation = this.unitDic[unit].recommended\r\n          .explanation;\r\n        if (\r\n          (lowerRequired !== null && numberToCheck < lowerRequired) ||\r\n          (upperRequired && numberToCheck > upperRequired)\r\n        ) {\r\n          return { status: \"Error\", message: explanationRequirement };\r\n        }\r\n        if (\r\n          (lowerRecommended !== null && numberToCheck < lowerRecommended) ||\r\n          (upperRecommended && numberToCheck > upperRecommended)\r\n        ) {\r\n          return { status: \"Warning\", message: explanationRecommendation };\r\n        }\r\n        return { status: \"Success\", message: \"\" };\r\n      }\r\n      if (\r\n        (this.lowerRequired !== null && numberToCheck < this.lowerRequired) ||\r\n        (this.upperRequired && numberToCheck > this.upperRequired)\r\n      ) {\r\n        return { status: \"Error\", message: this.explanationRequirement };\r\n      }\r\n      if (\r\n        (this.lowerRecommended !== null &&\r\n          numberToCheck < this.lowerRecommended) ||\r\n        (this.upperRecommended && numberToCheck > this.upperRecommended)\r\n      ) {\r\n        return { status: \"Warning\", message: this.explanationRecommendation };\r\n      }\r\n      return { status: \"Success\", message: \"\" };\r\n    }\r\n  \r\n    simulateValue(): string {\r\n      const lower: number = this.lowerRecommended\r\n        ? this.lowerRecommended\r\n        : this.upperRecommended\r\n        ? Math.min(this.upperRecommended - 0.1, 0)\r\n        : 0;\r\n      const upper = this.upperRecommended\r\n        ? this.upperRecommended\r\n        : this.lowerRecommended\r\n        ? Math.max(this.lowerRecommended + 0.1, 10)\r\n        : 10;\r\n      return customRound(lower + Math.random() * (upper - lower));\r\n    }\r\n  }\r\n  \r\n","import GeneralFactor, {DerivableOptions, InputValidity} from \"./FactorAbstract\";\r\n\r\nexport default class StringFactorPermanent extends GeneralFactor {\r\n    options: string[] = [];\r\n  \r\n    constructor(\r\n      factorName: string,\r\n      initialValue: string,\r\n      phrasing: string,\r\n      placeholder: string = \"\",\r\n      options: string[] = [],\r\n      helpJson: string | null = null,\r\n      derivableStatesInitializer: DerivableOptions\r\n    ) {\r\n      super(\r\n        factorName,\r\n        initialValue,\r\n        phrasing,\r\n        placeholder,\r\n        derivableStatesInitializer,\r\n        helpJson\r\n      );\r\n      this.factorType = \"string\";\r\n      this.options = options;\r\n    }\r\n  \r\n    checkInput(val: string, unit = undefined): InputValidity {\r\n      if (this.options.includes(val)) {\r\n        return { status: \"Success\", message: \"\" };\r\n      }\r\n      return { status: \"Missing\", message: \"\" };\r\n    }\r\n  \r\n    getScalingFactor(unitName: string): number {\r\n      return 1;\r\n    }\r\n\r\n    insertActualValue(val: string){\r\n      if(this.options.includes(val)){\r\n        return val\r\n      }\r\n      return \"\"\r\n    }\r\n  \r\n    simulateValue(): string {\r\n      return this.options[\r\n        Math.floor(Math.random() * Math.floor(this.options.length))\r\n      ];\r\n    }\r\n  }","import * as d3 from 'd3';\r\n\r\nexport const ALTERNATING_COLORS=[\"#CFCFCF\",\"#E4E4E4\"];\r\n\r\nexport enum Visualization {\r\n  RELATION_GRAPH=\"relation-graph\",\r\n  BAR_GRAPH=\"bar-graph\",\r\n  NO_GRAPH=\"no-graph\",\r\n  SURVIVAL_GRAPH=\"survival-graph\"\r\n}\r\n\r\nexport interface OrderVisualization {\r\n  orderVisualization: (elementInFocus: string, vizType: Visualization) => void;\r\n}\r\n\r\n\r\nexport function getDivWidth(div: HTMLElement | null): number {\r\n\tconsole.log(div);\r\n\tif(div === null){\r\n\t\treturn 0;\r\n\t}\r\n    var width = d3.select(div)\r\n      // get the width of div element\r\n      .style('width')\r\n      // take of 'px'\r\n      .slice(0, -2)\r\n    // return as an integer\r\n    return Math.round(Number(width))\r\n  }","import GeneralFactor, {DeriveMapping, DerivableOptions, FactorTypes, InputValidity} from \"./FactorAbstract\";\r\nimport NumericFactorPermanent from \"./FactorNumber\";\r\nimport StringFactorPermanent from \"./FactorString\";\r\nimport InputJson from \"./FactorJsonInput\";\r\nimport RelationLinks from './RelationLinks';\r\n\r\nexport interface FactorAnswers {\r\n  [id: string]: string | number;\r\n}\r\n\r\nexport interface FactorAnswerUnitScaling {\r\n  unitName: string;\r\n  scale: number;\r\n}\r\nexport interface FactorAnswerUnitScalings {\r\n  [id: string]: FactorAnswerUnitScaling;\r\n}\r\n\r\ninterface FactorMaskingsWithNulls {\r\n  [maskedFactor: string]: FactorMasking | null;\r\n}\r\n\r\nexport interface FactorList {\r\n  [key: string]: GeneralFactor;\r\n}\r\n\r\ninterface FactorMasking {\r\n  effectiveValue: string;\r\n  maskedByFactor: string;\r\n  maskedByValue: string;\r\n}\r\nexport interface FactorMaskings {\r\n  [maskedFactor: string]: FactorMasking;\r\n}\r\n\r\ninterface DerivableParentsChain {\r\n  [factorname: string]: string[];\r\n}\r\n\r\ninterface DescendantCountsInDeriveGroups {\r\n  [factorname: string]: number;\r\n}\r\n\r\ninterface DerivableOptionsSet {\r\n  [causedFactor: string]: DerivableOptions;\r\n}\r\n\r\nfunction reverseDeriveMapping(dos: DerivableOptionsSet) {\r\n  let res: DerivableOptionsSet = {};\r\n  let inner: DeriveMapping;\r\n  let middle: DerivableOptions;\r\n  Object.entries(dos).forEach(([causedFactor, dom]) => {\r\n    Object.entries(dom).forEach(([causativeFactor, dm]) => {\r\n      Object.entries(dm).forEach(\r\n        ([causativeFactorValue, causedFactorValue]) => {\r\n          if (!(causativeFactor in res)) {\r\n            inner = {};\r\n            inner[causativeFactorValue] = causedFactorValue;\r\n            middle = {};\r\n            middle[causedFactor] = inner;\r\n            res[causativeFactor] = middle;\r\n          } else if (!(causedFactor in res[causativeFactor])) {\r\n            inner = {};\r\n            inner[causativeFactorValue] = causedFactorValue;\r\n            res[causativeFactor][causedFactor] = inner;\r\n          } else {\r\n            res[causativeFactor][causedFactor][\r\n              causativeFactorValue\r\n            ] = causedFactorValue;\r\n          }\r\n        }\r\n      );\r\n    });\r\n  });\r\n  return res;\r\n}\r\n\r\nfunction filterNullsFromFactorMaskings(fin: FactorMaskingsWithNulls): FactorMaskings {\r\n  let res: FactorMaskings = {};\r\n  Object.entries(fin).forEach(([factorname, maskValue]) => {\r\n    if (maskValue) {\r\n      res[factorname] = maskValue;\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nclass Factors {\r\n  factorList: FactorList = {};\r\n  reverseDerivables: DerivableOptionsSet = {};\r\n\r\n  constructor(data: InputJson | null) {\r\n    this.factorList = {};\r\n    if (data) {\r\n      Object.entries(data).forEach(([factorname, factorobject]) => {\r\n        switch (factorobject.type) {\r\n          case FactorTypes.NUMERIC: {\r\n            this.factorList[factorname] = new NumericFactorPermanent(\r\n              factorname,\r\n              factorobject.initialValue\r\n                ? factorobject.initialValue\r\n                : \"\",\r\n              factorobject.longExplanation,\r\n              factorobject.placeholder,\r\n              factorobject.requiredDomain ? factorobject.requiredDomain : null,\r\n              factorobject.recommendedDomain\r\n                ? factorobject.recommendedDomain\r\n                : null,\r\n              factorobject.units ? factorobject.units : {},\r\n              factorobject.helpJson ? factorobject.helpJson : null,\r\n              factorobject.derivables ? factorobject.derivables : {}\r\n            );\r\n            break;\r\n          }\r\n          case FactorTypes.STRING: {\r\n            this.factorList[factorname] = new StringFactorPermanent(\r\n              factorname,\r\n              factorobject.initialValue ? factorobject.initialValue : \"\",\r\n              factorobject.longExplanation,\r\n              factorobject.placeholder,\r\n              factorobject.options ? factorobject.options : [],\r\n              factorobject.helpJson ? factorobject.helpJson : null,\r\n              factorobject.derivables ? factorobject.derivables : {}\r\n            );\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n    }\r\n    this.initializeReverseDerivables();\r\n  }\r\n\r\n  initializeReverseDerivables() {\r\n    let derivables: DerivableOptionsSet = {};\r\n    Object.entries(this.factorList).forEach(([factorname, factorobject]) => {\r\n      derivables[factorname] = factorobject.derivableStates;\r\n    });\r\n    this.reverseDerivables = reverseDeriveMapping(derivables);\r\n  }\r\n\r\n  checkFactorAndUpdateFactorMaskings(\r\n    factorToCheck: string,\r\n    factorAnswers: FactorAnswers,\r\n    factorMaskingChanges: FactorMaskingsWithNulls\r\n  ): string[] {\r\n    if (factorToCheck in this.reverseDerivables) {\r\n      //this means that the factor can force changes to other factoranswers.\r\n      let factorValue = factorAnswers[factorToCheck] as string; //by design of factordatabase.json, this is a string\r\n      const maskedFactors = this.reverseDerivables[factorToCheck];\r\n      if (\r\n        factorToCheck in factorMaskingChanges &&\r\n        factorMaskingChanges[factorToCheck]\r\n      ) {\r\n        //checking if the factor itself has been forced by another factor.\r\n        factorValue = factorMaskingChanges[factorToCheck]?.effectiveValue!; //putting on exclamation point because we have just tested for null-value\r\n      }\r\n      Object.entries(maskedFactors).forEach(([maskedFactor, maskingObject]) => {\r\n        if (factorValue in maskingObject) {\r\n          factorMaskingChanges[maskedFactor] = {\r\n            effectiveValue: maskingObject[factorValue],\r\n            maskedByFactor: factorToCheck,\r\n            maskedByValue: factorValue,\r\n          };\r\n        } else {\r\n          factorMaskingChanges[maskedFactor] = null;\r\n        }\r\n      });\r\n      return Object.keys(maskedFactors);\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  updateMasked(\r\n    factorAnswers: FactorAnswers,\r\n    changedFactor: string,\r\n    oldMaskedValues: FactorMaskings\r\n  ): FactorMaskings | \"nothing changed\" {\r\n    if (!(changedFactor in this.reverseDerivables)) {\r\n      return \"nothing changed\";\r\n    }\r\n    let factorsToCheck: string[] = [changedFactor];\r\n    let factorToCheck: string;\r\n    let factorMaskingChanges: FactorMaskingsWithNulls = {};\r\n    while (factorsToCheck.length > 0) {\r\n      factorToCheck = factorsToCheck.pop()!;\r\n      let newFactorsToCheck = this.checkFactorAndUpdateFactorMaskings(\r\n        factorToCheck,\r\n        factorAnswers,\r\n        factorMaskingChanges\r\n      );\r\n      factorsToCheck = factorsToCheck.concat(newFactorsToCheck);\r\n    }\r\n    const newFactorMaskingsWithNulls: FactorMaskingsWithNulls = {\r\n      ...oldMaskedValues,\r\n      ...factorMaskingChanges,\r\n    };\r\n    return filterNullsFromFactorMaskings(newFactorMaskingsWithNulls);\r\n  }\r\n\r\n  initializedFactorAnswers(): FactorAnswers {\r\n    let factorAnswers: FactorAnswers = {};\r\n    Object.keys(this.factorList).forEach((factorname) => {\r\n      factorAnswers[factorname] = \"\";\r\n    });\r\n    return factorAnswers;\r\n  }\r\n\r\n  simulateFactorAnswersAndMaskings() {\r\n    let factorMaskings: FactorMaskings = {};\r\n    let factorAnswers = this.initializedFactorAnswers();\r\n    let factorMaskingCandidate: FactorMaskings | \"nothing changed\";\r\n    Object.entries(this.factorList).forEach(([factorName, factorobject]) => {\r\n      if (factorName in factorMaskings) {\r\n        factorAnswers[factorName] = String(\r\n          factorMaskings[factorName].effectiveValue\r\n        );\r\n      } else {\r\n        factorAnswers[factorName] = factorobject.simulateValue();\r\n      }\r\n      if (factorobject.factorType === \"string\") {\r\n        factorMaskingCandidate = this.updateMasked(\r\n          factorAnswers,\r\n          factorName,\r\n          factorMaskings\r\n        );\r\n        if (factorMaskingCandidate !== \"nothing changed\") {\r\n          factorMaskings = factorMaskingCandidate;\r\n        }\r\n      }\r\n    });\r\n    return { factorAnswers, factorMaskings };\r\n  }\r\n\r\n  getRandomFactorOrder() {\r\n    return Object.keys(this.factorList);\r\n  }\r\n\r\n  makeParentList(){\r\n    let parentList: DerivableParentsChain={};\r\n    Object.entries(this.factorList).forEach(([factorname, factorobject]) => {\r\n      let causativeFactors= Object.keys(factorobject.derivableStates)\r\n      parentList[factorname]=[factorname]\r\n      while(causativeFactors.length>0){\r\n        let theOneCausativeFactor=causativeFactors[0]\r\n        parentList[factorname].unshift(theOneCausativeFactor);\r\n        causativeFactors=Object.keys(this.factorList[theOneCausativeFactor].derivableStates)\r\n      }\r\n    });\r\n    return parentList\r\n  }\r\n\r\n  findMaxDescendants(causativeFactor: string, rdat:RelationLinks):number{\r\n    if(!(causativeFactor in this.reverseDerivables)){\r\n      return rdat.getSuperDescendantCount(causativeFactor);\r\n    }\r\n    else{\r\n      let descendants= Object.keys(this.reverseDerivables[causativeFactor])\r\n      return Math.max(...descendants.map((d: string) => { return this.findMaxDescendants(d, rdat)}));\r\n    }\r\n  }\r\n\r\n  getMaxDescendants(rdat: RelationLinks){\r\n    let res: DescendantCountsInDeriveGroups= {}\r\n    Object.keys(this.factorList).forEach((causativeFactor) => {\r\n      res[causativeFactor]=this.findMaxDescendants(causativeFactor, rdat)\r\n    });\r\n    return res\r\n  }\r\n\r\n  getSortedOrder(rdat: RelationLinks): string[] {\r\n    const parentList= this.makeParentList()\r\n    const maxDescendants= this.getMaxDescendants(rdat);\r\n    const compare = (factorname1: string, factorname2: string) => {\r\n      let topParent1=parentList[factorname1][0]\r\n      let topParent2=parentList[factorname2][0]\r\n      let count=0\r\n      while(topParent1===topParent2){\r\n        count=count+1\r\n        topParent1=parentList[factorname1][count]\r\n        topParent2=parentList[factorname2][count]\r\n      }\r\n      if(maxDescendants[topParent1]===maxDescendants[topParent2]){\r\n        return topParent1.localeCompare(topParent2);\r\n      }\r\n      else{\r\n        return maxDescendants[topParent2]-maxDescendants[topParent1]\r\n      }\r\n    }\r\n    let factornames=Object.keys(this.factorList)\r\n    const ageIndex= factornames.indexOf(\"Age\")\r\n    if(ageIndex>-1){\r\n      factornames.splice(ageIndex, 1)\r\n      factornames.sort(compare).unshift(\"Age\");\r\n      return factornames\r\n    }\r\n    return factornames.sort(compare) //not sure if ever needed\r\n  }\r\n\r\n  getHelpJson(factorname: string): string {\r\n    return this.factorList[factorname].helpJson\r\n      ? (this.factorList[factorname].helpJson as string)\r\n      : \"No help available\";\r\n  }\r\n\r\n  getFactorsAsStateObject() {\r\n    let stateObject: FactorAnswers = {};\r\n    for (let factorName in this.factorList) {\r\n      stateObject[factorName] = this.factorList[factorName].getInitialValue();\r\n    }\r\n    return stateObject;\r\n  }\r\n\r\n  getInputValidity(\r\n    name: string,\r\n    value: string | boolean,\r\n    unit?: string\r\n  ): InputValidity {\r\n    return this.factorList[name].checkInput(value, unit);\r\n  }\r\n\r\n  getScalingFactor(name: string, unitName: string): number {\r\n    return this.factorList[name].getScalingFactor(unitName);\r\n  }\r\n}\r\n\r\nexport default Factors;\r\n","import React, { ChangeEvent, ReactElement } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport { Col, Form, Tooltip } from \"react-bootstrap\";\r\nimport \"./Question.css\";\r\nimport MarkDown from \"react-markdown\";\r\nimport { InputValidity } from \"../models/FactorAbstract\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Label from \"react-bootstrap/FormLabel\";\r\nimport { OrderVisualization, Visualization } from \"./Helpers\";\r\n\r\nexport const BACKGROUNDCOLOR_DISABLED = \"#c7c7c7\";\r\nexport const TEXTCOLOR_DISABLED = \"#999\";\r\nexport const BACKGROUNDCOLOR_CHOICE = \"#cef1f5\";\r\nexport const ERROR_COLOR = \"#fc0303\";\r\nexport const WARNING_COLOR = \"#bfa50d\";\r\nexport const WARNING_COLOR_STRONGER = \"#806e09\";\r\nexport const SUCCESS_COLOR = \"#3E713F\";\r\nexport const CHANGED_COLOR= \"#630396\";\r\n\r\nexport interface QuestionProps<T> extends OrderVisualization {\r\n  handleChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  handleIgnoreFactor: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  name: string;\r\n  phrasing: string;\r\n  factorAnswer: T;\r\n  helpText: string;\r\n  placeholder: string;\r\n  inputvalidity: InputValidity;\r\n  featured: boolean;\r\n  ignore: boolean;\r\n  windowWidth: number;\r\n  descendantDeathCauses: string[];\r\n}\r\n\r\nexport interface QuestionStates {}\r\n\r\nexport interface FormControlStyle {\r\n  [key: string]: string;\r\n}\r\n\r\ninterface QuestionContextProps extends OrderVisualization {\r\n  name: string;\r\n  ignore: boolean;\r\n  handleIgnoreFactor: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  helpText: string;\r\n  phrasing: string;\r\n  secondLine: ReactElement | string;\r\n  featured: boolean;\r\n  unitText: string | React.ReactNode;\r\n  validityStatus: string;\r\n  windowWidth: number;\r\n  descendantDeathCauses: string[];\r\n}\r\n\r\nexport class QuestionContext extends React.PureComponent<QuestionContextProps> {\r\n  constructor(props: QuestionContextProps) {\r\n    super(props);\r\n  }\r\n\r\n  helpBoxContent() {\r\n    if (this.props.featured) {\r\n      return (\r\n        <div>\r\n          <MarkDown>{this.props.helpText}</MarkDown>\r\n          {this.props.name !== \"Age\" ? <hr></hr> :null}\r\n          {this.props.name !== \"Age\" ? this.descendantMessage() : null}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          {this.questionPhrasing()}\r\n          <hr></hr>\r\n          <MarkDown>{this.props.helpText}</MarkDown>\r\n          {this.props.name !== \"Age\" ? <hr></hr> :null}\r\n          {this.props.name !== \"Age\" ? this.descendantMessage() : null}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  helpBox() {\r\n    return (\r\n      <Popover id=\"popover-basic\">\r\n        <Popover.Title as=\"h3\">{this.props.name}</Popover.Title>\r\n        <Popover.Content>{this.helpBoxContent()}</Popover.Content>\r\n      </Popover>\r\n    );\r\n  }\r\n\r\n  IgnoreCheckBox() {\r\n    return (\r\n      <div className=\"fixedWidth\">\r\n        <Form.Check\r\n          name={this.props.name}\r\n          onChange={this.props.handleIgnoreFactor}\r\n          checked={this.props.ignore}\r\n          label=\"Ignore\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderToolTipCheckBox(injected: any): React.ReactNode {\r\n    return (\r\n      <Tooltip id=\"button-tooltip\" {...injected}>\r\n        Ignore factor\r\n      </Tooltip>\r\n    );\r\n  }\r\n\r\n  IgnoreCheckBoxSmall() {\r\n    return (\r\n      <div className=\"fixedWidthSmall\">\r\n        <OverlayTrigger\r\n          placement=\"left\"\r\n          overlay={<Tooltip id=\"tmp\">Ignore</Tooltip>}\r\n        >\r\n          <Form.Check\r\n            className=\"form-check-small\"\r\n            name={this.props.name}\r\n            onChange={this.props.handleIgnoreFactor}\r\n            checked={this.props.ignore}\r\n          />\r\n        </OverlayTrigger>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  validityBoxStyling() {\r\n    let style: FormControlStyle = {};\r\n    let boxContent: string = \"\";\r\n    style[\"backgroundColor\"] = this.props.ignore\r\n      ? BACKGROUNDCOLOR_DISABLED\r\n      : \"white\";\r\n    switch (this.props.validityStatus) {\r\n      case \"Success\": {\r\n        style[\"color\"] = SUCCESS_COLOR;\r\n        boxContent = \"\\u2713\";\r\n        break;\r\n      }\r\n      case \"Warning\": {\r\n        style[\"color\"] = WARNING_COLOR;\r\n        style[\"borderColor\"] = WARNING_COLOR;\r\n        boxContent = \"\\u25B2\";\r\n        break;\r\n      }\r\n      case \"Missing\": {\r\n        style[\"color\"] = \"white\";\r\n        break;\r\n      }\r\n      case \"Error\": {\r\n        style[\"color\"] = ERROR_COLOR;\r\n        style[\"borderColor\"] = ERROR_COLOR;\r\n        boxContent = \"\\u2716\";\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n    return { style, boxContent };\r\n  }\r\n\r\n  validityBox() {\r\n    const { style, boxContent } = this.validityBoxStyling();\r\n    const tooltipID = \"validity-tooltip-\" + this.props.name;\r\n    const tooltipClass =\r\n      \"validity-tooltip-\" + this.props.validityStatus.toLowerCase();\r\n    return (\r\n      <OverlayTrigger\r\n        placement=\"bottom-end\"\r\n        show={\r\n          this.props.validityStatus === \"Error\" ||\r\n          this.props.validityStatus === \"Warning\"\r\n            ? undefined\r\n            : false\r\n        }\r\n        overlay={\r\n          <Tooltip id={tooltipID} className={tooltipClass}>\r\n            {this.props.secondLine}\r\n          </Tooltip>\r\n        }\r\n      >\r\n        <Label className=\"validity-box\" style={style}>\r\n          {\" \"}\r\n          <strong>{boxContent}</strong>\r\n        </Label>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n\r\n  helpBoxButton() {\r\n    return (\r\n      <OverlayTrigger\r\n        trigger=\"click\"\r\n        rootClose={true}\r\n        placement={this.props.windowWidth <= 992 ? \"left\" : \"right\"}\r\n        overlay={this.helpBox()}\r\n      >\r\n        <Button variant=\"light\" className=\"btn-helpbox\">\r\n          {\" \"}\r\n          <strong>?</strong>\r\n        </Button>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n\r\n  FactorNameColor() {\r\n    if (this.props.ignore) {\r\n      return \"#9c9c9c\";\r\n    } else {\r\n      return \"#000000\";\r\n    }\r\n  }\r\n\r\n  pixelsForFactorNameHeader() {\r\n    let widthOfArea = this.props.windowWidth;\r\n    if (widthOfArea >= 1200) {\r\n      widthOfArea = (widthOfArea * 1) / 3;\r\n    } else if (widthOfArea >= 992) {\r\n      widthOfArea = (widthOfArea * 5) / 12;\r\n    }\r\n    widthOfArea = Math.min(600,(widthOfArea * 1) / 3);\r\n    return widthOfArea-20; //20 is to account for the extra padding\r\n  }\r\n\r\n  fontSizeForFactorNameHeader() {\r\n    const pixelHeight = 1.6;\r\n    const minimumSize = 13;\r\n    let l = this.props.name.length;\r\n    let writtenName = this.props.name;\r\n    const p = this.pixelsForFactorNameHeader();\r\n    const pixelsPerLetter = p / l;\r\n    let fontSize = Math.min(pixelsPerLetter * pixelHeight, 17);\r\n    if (fontSize < minimumSize) {\r\n      const sliceval = Math.floor(((p * pixelHeight) / minimumSize - 3) / 2);\r\n      writtenName =\r\n        writtenName.slice(0, sliceval) + \"...\" + writtenName.slice(-sliceval);\r\n    }\r\n    l = writtenName.length;\r\n    const pixelsPerLetterAlternative = p / l;\r\n    fontSize = Math.min(pixelsPerLetterAlternative * 1.6, 17);\r\n    return { fontSize, writtenName };\r\n  }\r\n\r\n  inLineFactorNameHeader() {\r\n    const { fontSize, writtenName } = this.fontSizeForFactorNameHeader();\r\n    return (\r\n      <div>\r\n        <p\r\n          style={{\r\n            color: this.FactorNameColor(),\r\n            fontWeight: \"bold\",\r\n            marginBottom: \"0px\",\r\n            textAlign: \"left\",\r\n            fontSize: fontSize.toPrecision() + \"px\",\r\n          }}\r\n        >\r\n          {writtenName}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  unitButtonOrText() {\r\n    return (\r\n      <Dropdown>\r\n        <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n          Dropdown Button\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\r\n          <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\r\n          <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    );\r\n  }\r\n\r\n  questionPhrasing() {\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{\r\n            color: this.FactorNameColor(),\r\n            marginTop: \"0px\",\r\n            textAlign: \"left\",\r\n          }}\r\n        >\r\n          {this.props.phrasing}\r\n          {this.props.unitText ? \" \" : \"\"}\r\n          {this.props.unitText}?\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  rightPluralOfCause(){\r\n    if(this.props.descendantDeathCauses.length===1){\r\n      return \"\"\r\n    }\r\n    return \"s\"\r\n  }\r\n\r\n\r\n  descendantMessage() {\r\n    return (\r\n      <div>\r\n        <span className=\"text-with-button\"> This risk factor is used for </span>\r\n        <Button\r\n          variant=\"link\"\r\n          className=\"inline-text-button\"\r\n          onClick={() => {\r\n            this.props.orderVisualization(\r\n              this.props.name,\r\n              Visualization.RELATION_GRAPH\r\n            );\r\n          }}\r\n        >\r\n          {this.props.descendantDeathCauses.length} death cause{this.rightPluralOfCause()}\r\n        </Button>\r\n        .\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getErrorMessageStyle() {\r\n    let errorMessageStyle: FormControlStyle = {};\r\n    if (this.props.validityStatus === \"Error\") {\r\n      errorMessageStyle[\"color\"] = ERROR_COLOR;\r\n    }\r\n    if (this.props.validityStatus === \"Warning\") {\r\n      errorMessageStyle[\"color\"] = WARNING_COLOR;\r\n    }\r\n    return errorMessageStyle;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form.Row className={\"formrow-narrow-\"+(!this.props.featured).toString()}>\r\n        <Col xs={this.props.featured ? 12 : 4}>\r\n          {this.props.featured ? (\r\n            this.questionPhrasing()\r\n          ) : (\r\n            <div style={{ height: \"34px\", lineHeight: \"34px\", overflow:\"hidden\" }}>\r\n              {this.inLineFactorNameHeader()}\r\n            </div>\r\n          )}\r\n        </Col>\r\n        <Col xs={this.props.featured ? 12 : 8}>\r\n          <Form.Group>\r\n            <InputGroup>\r\n              {this.props.children}\r\n              <InputGroup.Append>\r\n                {this.props.featured ? null : this.validityBox()}\r\n                {this.helpBoxButton()}\r\n                {this.props.featured\r\n                  ? this.IgnoreCheckBox()\r\n                  : this.IgnoreCheckBoxSmall()}\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n            {this.props.featured ? (\r\n              <Form.Label\r\n                className=\"ErrorLabel\"\r\n                style={this.getErrorMessageStyle()}\r\n              >\r\n                {this.props.secondLine}\r\n              </Form.Label>\r\n            ) : null}\r\n          </Form.Group>\r\n        </Col>\r\n      </Form.Row>\r\n    );\r\n  }\r\n}\r\n","import { json } from \"d3\";\r\nimport React, { ChangeEvent } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Label, Spinner } from \"reactstrap\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport StringFactorPermanent from \"../models/FactorString\";\r\nimport NumericFactorPermanent from \"../models/FactorNumber\";\r\nimport GeneralFactor, { InputValidity } from \"../models/FactorAbstract\";\r\nimport InputJson from \"../models/FactorJsonInput\";\r\nimport Factors, {\r\n  FactorAnswers,\r\n  FactorAnswerUnitScalings,\r\n  FactorMaskings,\r\n} from \"../models/Factors\";\r\nimport HelpJsons from \"../models/HelpJsons\";\r\nimport \"./QuestionMenu.css\";\r\nimport SimpleNumericQuestion from \"./QuestionNumber\";\r\nimport SimpleStringQuestion from \"./QuestionString\";\r\nimport AskedQuestionFramed from \"./AskedQuestionFrame\";\r\nimport RelationLinks from \"../models/RelationLinks\";\r\nimport { OrderVisualization } from \"./Helpers\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport QuestionListFrame from \"./QuestionListFrame\";\r\n\r\ninterface QuestionMenuProps extends OrderVisualization {\r\n  handleSuccessfulSubmit: (f: FactorAnswers) => void;\r\n  relationLinkData: RelationLinks;\r\n}\r\n\r\nenum AnswerProgress {\r\n  ANSWERING = \"answering\",\r\n  FINISHED = \"finished\",\r\n}\r\n\r\nenum QuestionView {\r\n  QUESTION_MANAGER = \"question-manager\",\r\n  NOTHING=\"no-questions\",\r\n  QUESTION_LIST = \"question-list\",\r\n}\r\n\r\ninterface QuestionMenuStates {\r\n  validities: InputValidities;\r\n  factorAnswers: FactorAnswers;\r\n  factorAnswerScales: FactorAnswerUnitScalings;\r\n  activelyIgnored: ignoreList;\r\n  hasBeenAnswered: string[];\r\n  answeringProgress: AnswerProgress;\r\n  currentFactor: string;\r\n  windowWidth: number;\r\n  factorMaskings: FactorMaskings;\r\n  view: QuestionView;\r\n  changedSinceLastCommit: boolean;\r\n}\r\n\r\ninterface InputValidities {\r\n  [key: string]: InputValidity;\r\n}\r\n\r\ninterface ignoreList {\r\n  [key: string]: boolean;\r\n}\r\n\r\nfunction getViewport() {\r\n  const width = Math.max(\r\n    document.documentElement.clientWidth,\r\n    window.innerWidth || 0\r\n  );\r\n  return width;\r\n}\r\n\r\nclass QuestionMenu extends React.Component<\r\n  QuestionMenuProps,\r\n  QuestionMenuStates\r\n> {\r\n  factors: Factors;\r\n  helpjsons: HelpJsons;\r\n  factorOrder: string[];\r\n\r\n  constructor(props: QuestionMenuProps) {\r\n    super(props);\r\n    this.factorOrder = [];\r\n    this.state = {\r\n      validities: {},\r\n      factorAnswers: {},\r\n      factorAnswerScales: {},\r\n      hasBeenAnswered: [],\r\n      answeringProgress: AnswerProgress.ANSWERING,\r\n      currentFactor: \"\",\r\n      activelyIgnored: {},\r\n      windowWidth: getViewport(),\r\n      factorMaskings: {},\r\n      view: QuestionView.QUESTION_MANAGER,\r\n      changedSinceLastCommit: false\r\n    };\r\n    this.factors = new Factors(null);\r\n    this.helpjsons = {};\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleIgnoreFactor = this.handleIgnoreFactor.bind(this);\r\n    this.previousQuestion = this.previousQuestion.bind(this);\r\n    this.startOverQuestionnaire = this.startOverQuestionnaire.bind(this);\r\n    this.handleUnitChange = this.handleUnitChange.bind(this);\r\n    this.updateWidth = this.updateWidth.bind(this);\r\n    this.finishQuestionnaire = this.finishQuestionnaire.bind(this);\r\n    this.insertRandom = this.insertRandom.bind(this);\r\n    this.switchView = this.switchView.bind(this);\r\n  }\r\n\r\n  updateWidth() {\r\n    this.setState({ windowWidth: getViewport() });\r\n  }\r\n\r\n  switchView() {\r\n    this.setState({ view: QuestionView.NOTHING });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadFactorNames();\r\n    window.addEventListener(\"resize\", this.updateWidth);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateWidth);\r\n  }\r\n\r\n  loadFactorNames() {\r\n    setTimeout(\r\n      () =>\r\n        Promise.all([json(\"FactorDatabase.json\")]).then((data) => {\r\n          this.factors = new Factors(data[0] as InputJson);\r\n          this.factorOrder = this.factors.getSortedOrder(\r\n            this.props.relationLinkData\r\n          );\r\n          this.setState(\r\n            {\r\n              factorAnswers: this.factors.getFactorsAsStateObject(),\r\n              currentFactor: this.factorOrder[0],\r\n            },\r\n            () => this.initializeValidities()\r\n          );\r\n        }),\r\n      500\r\n    );\r\n  }\r\n\r\n  initializeValidities() {\r\n    let res: InputValidities = {};\r\n    for (let factorName in this.state.factorAnswers) {\r\n      res[factorName] = this.factors.getInputValidity(\r\n        factorName,\r\n        this.state.factorAnswers[factorName] as string\r\n      );\r\n    }\r\n    this.setState({ validities: res });\r\n  }\r\n\r\n  checkAllFormsForErrorAndMissing() {\r\n    let submittable = true;\r\n    let validitiesToBeChanged: InputValidities = {};\r\n    for (let factorName in this.state.validities) {\r\n      //checking if there can be submitted a form.\r\n      let validity = this.state.validities[factorName];\r\n      if (validity.status === \"Error\") {\r\n        submittable = false;\r\n      }\r\n      if (\r\n        validity.status === \"Missing\" &&\r\n        !(\r\n          factorName in this.state.activelyIgnored &&\r\n          this.state.activelyIgnored[factorName]\r\n        ) &&\r\n        (this.state.hasBeenAnswered.includes(factorName) ||\r\n          this.state.currentFactor === factorName)\r\n      ) {\r\n        validitiesToBeChanged[factorName] = {\r\n          message: \"Ignored by the model\",\r\n          status: \"Warning\",\r\n        };\r\n      }\r\n    }\r\n    return { missingWarnings: validitiesToBeChanged, submittable: submittable };\r\n  }\r\n\r\n  isSubmittable() {\r\n    return Object.values(this.state.validities).every((d: InputValidity) => {\r\n      return d.status !== \"Error\";\r\n    });\r\n  }\r\n\r\n  handleSubmit(event: React.FormEvent) {\r\n    event.preventDefault();\r\n    const {\r\n      missingWarnings,\r\n      submittable,\r\n    } = this.checkAllFormsForErrorAndMissing();\r\n    if (submittable) {\r\n      this.setState(\r\n        (prevState: QuestionMenuStates) => {\r\n          let newAnswerProgress = prevState.answeringProgress;\r\n          let newHasBeenAnswered = [...prevState.hasBeenAnswered];\r\n          let newCurrentFactor = prevState.currentFactor;\r\n          while (\r\n            newAnswerProgress === AnswerProgress.ANSWERING &&\r\n            (newCurrentFactor in prevState.factorMaskings ||\r\n              newCurrentFactor === prevState.currentFactor)\r\n          ) {\r\n            if (!newHasBeenAnswered.includes(newCurrentFactor)) {\r\n              newHasBeenAnswered.push(newCurrentFactor);\r\n            }\r\n            if (\r\n              this.factorOrder.indexOf(newCurrentFactor) + 1 ===\r\n              this.factorOrder.length\r\n            ) {\r\n              newAnswerProgress = AnswerProgress.FINISHED;\r\n              newCurrentFactor = \"\";\r\n            } else {\r\n              newCurrentFactor = this.factorOrder[\r\n                this.factorOrder.indexOf(newCurrentFactor) + 1\r\n              ];\r\n            }\r\n          }\r\n          return {\r\n            validities: {\r\n              ...prevState.validities,\r\n              ...missingWarnings,\r\n            },\r\n            hasBeenAnswered: newHasBeenAnswered,\r\n            answeringProgress: newAnswerProgress,\r\n            currentFactor: newCurrentFactor,\r\n            changedSinceLastCommit: false,\r\n          };\r\n        },\r\n        () => {\r\n          let submittedAnswers = { ...this.state.factorAnswers };\r\n          Object.keys(submittedAnswers).forEach((d: string) => {\r\n            if (d in this.state.factorMaskings) {\r\n              submittedAnswers[d] = this.state.factorMaskings[d].effectiveValue;\r\n            } else if (d in this.state.factorAnswerScales) {\r\n              submittedAnswers[d] = (\r\n                parseFloat(submittedAnswers[d] as string) *\r\n                this.state.factorAnswerScales[d].scale\r\n              ).toString();\r\n            }\r\n            submittedAnswers[d] = this.factors.factorList[d].insertActualValue(\r\n              submittedAnswers[d] as string\r\n            );\r\n          });\r\n          this.props.handleSuccessfulSubmit(submittedAnswers);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  redoAllValidities(): void {\r\n    this.setState((prevState: QuestionMenuStates) => {\r\n      let new_validities: InputValidities = {};\r\n      Object.entries(prevState.factorAnswers).forEach(\r\n        ([factorname, factorval]) => {\r\n          new_validities[factorname] = this.factors.getInputValidity(\r\n            factorname,\r\n            factorval as string,\r\n            factorname in prevState.factorAnswerScales\r\n              ? prevState.factorAnswerScales[factorname].unitName\r\n              : undefined\r\n          );\r\n        }\r\n      );\r\n      return {\r\n        validities: new_validities,\r\n      };\r\n    });\r\n  }\r\n\r\n  makeNewMasksUpdateObject(\r\n    newFactorAnswers: FactorAnswers,\r\n    updatedFactor: string,\r\n    factorMaskings: FactorMaskings\r\n  ) {\r\n    const possiblyNewMasks:\r\n      | FactorMaskings\r\n      | \"nothing changed\" = this.factors.updateMasked(\r\n      newFactorAnswers,\r\n      updatedFactor,\r\n      factorMaskings\r\n    );\r\n    let newMasks: any;\r\n    if (possiblyNewMasks === \"nothing changed\") {\r\n      newMasks = {};\r\n    } else {\r\n      newMasks = { factorMaskings: possiblyNewMasks };\r\n    }\r\n    return newMasks;\r\n  }\r\n\r\n  handleInputChange(ev: ChangeEvent<HTMLInputElement>): void {\r\n    const { name } = ev.currentTarget;\r\n    const value = ev.currentTarget.value;\r\n\r\n    this.setState((prevState: QuestionMenuStates) => {\r\n      const newFactorAnswers = { ...prevState.factorAnswers, [name]: value };\r\n      const newMasks = this.makeNewMasksUpdateObject(\r\n        newFactorAnswers,\r\n        name,\r\n        prevState.factorMaskings\r\n      );\r\n      return {\r\n        validities: {\r\n          ...prevState.validities,\r\n          [name]: this.factors.getInputValidity(\r\n            name,\r\n            value,\r\n            name in prevState.factorAnswerScales\r\n              ? prevState.factorAnswerScales[name].unitName\r\n              : undefined\r\n          ),\r\n        },\r\n        changedSinceLastCommit: true,\r\n        factorAnswers: newFactorAnswers,\r\n        ...newMasks\r\n      };\r\n    });\r\n  }\r\n\r\n  handleIgnoreFactor(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const { name } = e.currentTarget;\r\n    const factorname = name;\r\n    const value = e.currentTarget.checked;\r\n    this.setState((prevState: QuestionMenuStates) => {\r\n      const newFactorAnswers = { ...prevState.factorAnswers, [name]: \"\" };\r\n      const newMasks = this.makeNewMasksUpdateObject(\r\n        newFactorAnswers,\r\n        name,\r\n        prevState.factorMaskings\r\n      );\r\n      return {\r\n        validities: {\r\n          ...prevState.validities,\r\n          [factorname]: this.factors.getInputValidity(factorname, \"\"),\r\n        },\r\n        factorAnswers: {\r\n          ...prevState.factorAnswers,\r\n          [factorname]: \"\",\r\n        },\r\n        activelyIgnored: {\r\n          ...prevState.activelyIgnored,\r\n          [factorname]: value,\r\n        },\r\n        changedSinceLastCommit: true,\r\n        ...newMasks,\r\n      };\r\n    });\r\n  }\r\n\r\n  handleUnitChange(name: string, newUnitName: string): void {\r\n    this.setState((prevState: QuestionMenuStates) => {\r\n      return {\r\n        factorAnswerScales: {\r\n          ...prevState.factorAnswerScales,\r\n          [name]: {\r\n            unitName: newUnitName,\r\n            scale: this.factors.getScalingFactor(name, newUnitName),\r\n          },\r\n        },\r\n        validities: {\r\n          ...prevState.validities,\r\n          [name]: this.factors.getInputValidity(\r\n            name,\r\n            this.state.factorAnswers[name] as string,\r\n            newUnitName\r\n          ),\r\n        },\r\n        changedSinceLastCommit: true\r\n      };\r\n    });\r\n  }\r\n\r\n  getHelpText(factorName: string): string {\r\n    return this.factors.getHelpJson(factorName);\r\n  }\r\n\r\n  getQuestion(\r\n    factorName: string,\r\n    factor: GeneralFactor,\r\n    featured: boolean = false\r\n  ) {\r\n    switch (factor.factorType) {\r\n      case \"number\": {\r\n        return (\r\n          <SimpleNumericQuestion\r\n            key={factorName + featured}\r\n            name={factorName}\r\n            factorAnswer={this.state.factorAnswers[factorName] as string}\r\n            phrasing={factor.phrasing}\r\n            unitOptions={(factor as NumericFactorPermanent).unitStrings}\r\n            handleChange={this.handleInputChange}\r\n            handleIgnoreFactor={this.handleIgnoreFactor}\r\n            inputvalidity={this.state.validities[factorName]}\r\n            helpText={this.getHelpText(factorName)}\r\n            featured={featured}\r\n            handleUnitChange={this.handleUnitChange}\r\n            ignore={\r\n              factorName in this.state.activelyIgnored\r\n                ? this.state.activelyIgnored[factorName]\r\n                : false\r\n            }\r\n            windowWidth={this.state.windowWidth}\r\n            placeholder={\r\n              factorName in this.state.factorAnswerScales\r\n                ? this.state.factorAnswerScales[factorName].unitName\r\n                : factor.placeholder\r\n            }\r\n            descendantDeathCauses={this.props.relationLinkData.getDeathCauseDescendants(\r\n              factorName\r\n            )}\r\n            orderVisualization={this.props.orderVisualization}\r\n          />\r\n        );\r\n      }\r\n      case \"string\": {\r\n        return (\r\n          <SimpleStringQuestion\r\n            key={factorName + featured}\r\n            name={factorName}\r\n            placeholder={factor.placeholder}\r\n            factorAnswer={this.state.factorAnswers[factorName] as string}\r\n            phrasing={factor.phrasing}\r\n            options={(factor as StringFactorPermanent).options}\r\n            handleChange={this.handleInputChange}\r\n            handleIgnoreFactor={this.handleIgnoreFactor}\r\n            helpText={this.getHelpText(factorName)}\r\n            inputvalidity={this.state.validities[factorName]}\r\n            featured={featured}\r\n            ignore={\r\n              factorName in this.state.activelyIgnored\r\n                ? this.state.activelyIgnored[factorName]\r\n                : false\r\n            }\r\n            windowWidth={this.state.windowWidth}\r\n            descendantDeathCauses={this.props.relationLinkData.getDeathCauseDescendants(\r\n              factorName\r\n            )}\r\n            orderVisualization={this.props.orderVisualization}\r\n          />\r\n        );\r\n      }\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  startOverQuestionnaire() {\r\n    this.setState(\r\n      {\r\n        hasBeenAnswered: [],\r\n        currentFactor: this.factorOrder[0],\r\n        answeringProgress: AnswerProgress.ANSWERING,\r\n      },\r\n      () => this.redoAllValidities()\r\n    );\r\n  }\r\n\r\n  previousQuestion() {\r\n    this.setState((previousState: QuestionMenuStates) => {\r\n      let i = 0;\r\n      if (previousState.hasBeenAnswered.includes(previousState.currentFactor)) {\r\n        i =\r\n          previousState.hasBeenAnswered.indexOf(previousState.currentFactor) -\r\n          1;\r\n      } else {\r\n        i = previousState.hasBeenAnswered.length - 1;\r\n      }\r\n      while (\r\n        previousState.hasBeenAnswered[i] in this.state.factorMaskings &&\r\n        i > 0\r\n      ) {\r\n        i = i - 1;\r\n      }\r\n      const newCurrentFactor = previousState.hasBeenAnswered[i];\r\n      return {\r\n        currentFactor: newCurrentFactor,\r\n        answeringProgress: AnswerProgress.ANSWERING,\r\n        validities: {\r\n          ...previousState.validities,\r\n          [newCurrentFactor]: this.factors.getInputValidity(\r\n            newCurrentFactor,\r\n            previousState.factorAnswers[newCurrentFactor] as string,\r\n            newCurrentFactor in previousState.factorAnswerScales\r\n              ? previousState.factorAnswerScales[newCurrentFactor].unitName\r\n              : undefined\r\n          ),\r\n        },\r\n      };\r\n    });\r\n  }\r\n\r\n  finishQuestionnaire() {\r\n    this.setState({\r\n      answeringProgress: AnswerProgress.FINISHED,\r\n      hasBeenAnswered: this.factorOrder,\r\n      currentFactor: \"\",\r\n    });\r\n  }\r\n\r\n  insertRandom() {\r\n    const {\r\n      factorAnswers,\r\n      factorMaskings,\r\n    } = this.factors.simulateFactorAnswersAndMaskings();\r\n    this.setState(\r\n      {\r\n        answeringProgress: AnswerProgress.FINISHED,\r\n        hasBeenAnswered: this.factorOrder,\r\n        currentFactor: \"\",\r\n        factorAnswers: factorAnswers,\r\n        factorMaskings: factorMaskings,\r\n      },\r\n      () => this.redoAllValidities()\r\n    );\r\n  }\r\n\r\n  getCounter() {\r\n    let denominator =\r\n      this.factorOrder.length - Object.keys(this.state.factorMaskings).length;\r\n    let numerator =\r\n      this.factorOrder\r\n        .filter((factorAnswer) => {\r\n          return !(factorAnswer in this.state.factorMaskings);\r\n        })\r\n        .indexOf(this.state.currentFactor) + 1;\r\n    if (numerator === 0) {\r\n      //at the time of implementation it could happen if a property is changed in questionlist\r\n      return \"-/\" + denominator;\r\n    }\r\n    if (numerator > denominator) {\r\n      return denominator + \"/\" + denominator;\r\n    }\r\n    return numerator + \"/\" + denominator;\r\n  }\r\n\r\n  getCurrentFactor() {\r\n    return Object.keys(this.state.factorAnswers).find((factorName: string) => {\r\n      return !(factorName in this.state.hasBeenAnswered);\r\n    });\r\n  }\r\n\r\n  getQuestionToAnswer() {\r\n    if (this.state.answeringProgress === AnswerProgress.FINISHED) {\r\n      return (\r\n        <AskedQuestionFramed\r\n          factorName={undefined}\r\n          validity={undefined}\r\n          onSubmit={this.handleSubmit}\r\n          previousPossible={this.factorOrder.indexOf(this.state.currentFactor) > 0}\r\n          onPrevious={this.previousQuestion}\r\n          onStartOver={this.startOverQuestionnaire}\r\n          onFinishNow={this.finishQuestionnaire}\r\n          onFinishRandomly={this.insertRandom}\r\n          leftCornerCounter={this.getCounter()}\r\n          onSwitchView={this.switchView}\r\n          finished={true}\r\n          isChanged={this.state.changedSinceLastCommit}\r\n        />\r\n      );\r\n    }\r\n    if (this.state.currentFactor) {\r\n      return (\r\n        <AskedQuestionFramed\r\n          factorName={this.state.currentFactor}\r\n          validity={this.state.validities[this.state.currentFactor]}\r\n          onSubmit={this.handleSubmit}\r\n          previousPossible={this.factorOrder.indexOf(this.state.currentFactor) > 0}\r\n          onPrevious={this.previousQuestion}\r\n          onStartOver={this.startOverQuestionnaire}\r\n          onFinishNow={this.finishQuestionnaire}\r\n          onFinishRandomly={this.insertRandom}\r\n          leftCornerCounter={this.getCounter()}\r\n          onSwitchView={this.switchView}\r\n          finished={false}\r\n          isChanged={this.state.changedSinceLastCommit}\r\n        >\r\n          {this.getQuestion(\r\n            this.state.currentFactor,\r\n            this.factors.factorList[this.state.currentFactor],\r\n            true\r\n          )}\r\n        </AskedQuestionFramed>\r\n      );\r\n    }\r\n    return \"Something went wrong\";\r\n  }\r\n\r\n  renderQuestionList() {\r\n    const submittable: boolean = this.isSubmittable();\r\n    const questionList = this.factorOrder.map((factorName) => {\r\n      if (\r\n        this.state.hasBeenAnswered.includes(factorName) &&\r\n        !(factorName in this.state.factorMaskings)\r\n      ) {\r\n        return this.getQuestion(\r\n          factorName,\r\n          this.factors.factorList[factorName]\r\n        );\r\n      }\r\n      return null;\r\n    });\r\n    return (\r\n      <div>\r\n        <p>\r\n          Input risk factors to calculate probability of dying of most diseases\r\n          and expected lifespan\r\n        </p>\r\n        <form noValidate onSubmit={this.handleSubmit}>\r\n          <Collapse in={this.state.view === QuestionView.QUESTION_MANAGER} \r\n          onExited={()=>{setTimeout(() => this.setState({view: QuestionView.QUESTION_LIST}),250)}} \r\n          timeout={500} >\r\n            <div id=\"collapse-asked-question-frame\" style={{justifyContent:\"center\"}}>{this.getQuestionToAnswer()}</div>\r\n          </Collapse>\r\n          <Collapse in={this.state.view === QuestionView.QUESTION_LIST} onExited={()=>{this.setState({view: QuestionView.QUESTION_MANAGER})}} timeout={500}>\r\n            <div id=\"collapse-question-list\">\r\n              <QuestionListFrame\r\n                onSubmit={this.handleSubmit}\r\n                onSwitchView={this.switchView}\r\n                onFinishRandomly={this.insertRandom}\r\n                hasError={!submittable}\r\n                isChanged={this.state.changedSinceLastCommit}\r\n                >\r\n                {questionList}\r\n              </QuestionListFrame>\r\n            </div>\r\n          </Collapse>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (Object.keys(this.state.validities).length === 0) {\r\n      return <Spinner></Spinner>;\r\n    }\r\n    return (\r\n      <div className=\"questionmenu\">\r\n        <h4> Risk factors </h4>\r\n        {this.renderQuestionList()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionMenu;\r\n","import React from \"react\";\r\nimport { OverlayTrigger } from \"react-bootstrap\";\r\nimport { Tooltip } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport interface UnitPickerProps {\r\n  options: string[];\r\n  onChoice: (newUnitName:string) => void; //satser på at det går.\r\n  size: string;\r\n}\r\n\r\nclass UnitPicker extends React.PureComponent<UnitPickerProps> {\r\n  chosenValue: string;\r\n  constructor(props: UnitPickerProps) {\r\n    super(props);\r\n    this.chosenValue=this.props.options[0];\r\n    this.handleToggleUnit=this.handleToggleUnit.bind(this);\r\n  }\r\n\r\n  handleToggleUnit(){\r\n    const i = this.props.options.indexOf(this.chosenValue)\r\n    if(i===this.props.options.length-1){\r\n      this.chosenValue=this.props.options[0]\r\n    }\r\n    else{\r\n      this.chosenValue=this.props.options[i+1]\r\n    }\r\n    this.props.onChoice(this.chosenValue);\r\n  }\r\n\r\n  renderToolTips(injected:any):React.ReactNode{\r\n    return( <Tooltip id=\"button-tooltip\" {...injected}>\r\n    Change unit\r\n  </Tooltip>)\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    \r\n\r\n    return (\r\n      <OverlayTrigger\r\n        placement=\"bottom\"\r\n        delay={{ show: 450, hide: 100 }}\r\n        overlay={this.renderToolTips}\r\n      >\r\n      <Button\r\n        variant=\"link\"\r\n        style={{\r\n          marginTop: \"0px\",\r\n          marginLeft: \"0px\",\r\n          marginRight: \"0px\",\r\n          marginBottom: \"4px\",\r\n          padding: \"0px\",\r\n          fontSize: this.props.size,\r\n        }}\r\n        onClick={this.handleToggleUnit}\r\n      >\r\n        {\" (\"}{this.props.children})\r\n      </Button>\r\n      </OverlayTrigger>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UnitPicker;","import {\r\n  QuestionProps,\r\n  QuestionStates,\r\n  FormControlStyle,\r\n  BACKGROUNDCOLOR_DISABLED,\r\n  ERROR_COLOR,\r\n  WARNING_COLOR,\r\n  QuestionContext,\r\n} from \"./Question\";\r\nimport { InputValidity } from \"../models/FactorAbstract\";\r\nimport React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport UnitPicker from \"./UnitPicker\";\r\nimport { OrderVisualization } from \"./Helpers\";\r\n\r\ninterface NumericQuestionProps extends QuestionProps<string> {\r\n  placeholder: string;\r\n  inputvalidity: InputValidity;\r\n  unitOptions: string[];\r\n  handleUnitChange: (fname: string, newUnitName: string) => void;\r\n}\r\n\r\nexport default class SimpleNumericQuestion extends React.PureComponent<\r\n  NumericQuestionProps,\r\n  QuestionStates\r\n> {\r\n\r\n  TextInputBackgroundColor() {\r\n    if (this.props.ignore) {\r\n      return BACKGROUNDCOLOR_DISABLED;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  getErrorStyles() {\r\n    let formControlStyle: FormControlStyle = {\r\n      background: this.TextInputBackgroundColor(),\r\n    };\r\n    let showmessage: boolean = false;\r\n    if (this.props.inputvalidity.status === \"Error\") {\r\n      showmessage = true;\r\n      formControlStyle[\"borderColor\"] = ERROR_COLOR;\r\n      formControlStyle[\"color\"] = ERROR_COLOR;\r\n    }\r\n    console.log(\"this.state.ignore\");\r\n    console.log(this.props.ignore);\r\n    if (this.props.inputvalidity.status === \"Warning\") {\r\n      showmessage = true;\r\n      formControlStyle[\"borderColor\"] = WARNING_COLOR;\r\n    }\r\n    return { formControlStyle, showmessage };\r\n  }\r\n\r\n  compare(a:any,b:any){\r\n    return String(a)+'==='+String(b)+': '+String(a===b)\r\n  }\r\n\r\n  unitButtonOrText() {\r\n    if (this.props.unitOptions.length > 0) {\r\n      return (\r\n        <UnitPicker\r\n          onChoice={(newUnit: string) =>\r\n            this.props.handleUnitChange(this.props.name, newUnit)\r\n          }\r\n          options={this.props.unitOptions}\r\n          size={\"\"}\r\n        >\r\n          {this.props.placeholder}\r\n        </UnitPicker>\r\n      );\r\n    } else {\r\n      return ` (${this.props.placeholder})`;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Renders Question\" + this.props.name);\r\n\r\n    const {\r\n      formControlStyle,\r\n      showmessage,\r\n    } = this.getErrorStyles();\r\n\r\n    return (\r\n      <QuestionContext\r\n        name={this.props.name}\r\n        phrasing={this.props.phrasing}\r\n        handleIgnoreFactor={this.props.handleIgnoreFactor}\r\n        ignore={this.props.ignore}\r\n        helpText={this.props.helpText}\r\n        unitText={this.unitButtonOrText()}\r\n        featured={this.props.featured}\r\n        validityStatus={this.props.inputvalidity.status}\r\n        secondLine={showmessage ? this.props.inputvalidity.message : \"\"}\r\n        windowWidth={this.props.windowWidth}\r\n        descendantDeathCauses={this.props.descendantDeathCauses}\r\n        orderVisualization={this.props.orderVisualization}\r\n      >\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder={this.props.placeholder}\r\n          name={this.props.name}\r\n          value={this.props.factorAnswer}\r\n          style={formControlStyle}\r\n          onChange={this.props.handleChange}\r\n          disabled={this.props.ignore}\r\n          autoFocus={this.props.featured}\r\n        />\r\n      </QuestionContext>\r\n    );\r\n  }\r\n}\r\n","import {\r\n  QuestionProps,\r\n  QuestionStates,\r\n  FormControlStyle,\r\n  BACKGROUNDCOLOR_DISABLED,\r\n  BACKGROUNDCOLOR_CHOICE,\r\n  TEXTCOLOR_DISABLED,\r\n  WARNING_COLOR,\r\n  QuestionContext\r\n} from \"./Question\";\r\nimport { InputValidity } from '../models/FactorAbstract';\r\nimport React from \"react\";\r\nimport {Form} from \"react-bootstrap\";\r\nimport { OrderVisualization } from \"./Helpers\";\r\n\r\ninterface StringQuestionProps extends QuestionProps<string> {\r\n  placeholder: string;\r\n  inputvalidity: InputValidity;\r\n  options: string[];\r\n}\r\nexport default class SimpleStringQuestion extends React.PureComponent<\r\n  StringQuestionProps,\r\n  QuestionStates\r\n> {\r\n\r\n  getBackgroundColor() {\r\n    if (this.props.ignore) {\r\n      return BACKGROUNDCOLOR_DISABLED;\r\n    } else {\r\n      return BACKGROUNDCOLOR_CHOICE;\r\n    }\r\n  }\r\n\r\n  getTextColor() {\r\n    if (this.props.ignore) {\r\n      return TEXTCOLOR_DISABLED;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  getErrorStyles() {\r\n    let formControlStyle: FormControlStyle = {\r\n      background: this.getBackgroundColor(),\r\n      color: this.getTextColor(),\r\n    };\r\n    let showmessage: boolean = false;\r\n    if (this.props.inputvalidity.status === \"Warning\") {\r\n      showmessage = true;\r\n      formControlStyle[\"borderColor\"] = WARNING_COLOR;\r\n    }\r\n    return { formControlStyle, showmessage };\r\n  }\r\n\r\n  render() {\r\n    console.log(\"Renders Question\" + this.props.name);\r\n    const {\r\n      formControlStyle,\r\n      showmessage,\r\n    } = this.getErrorStyles();\r\n\r\n    return (\r\n      <QuestionContext\r\n        name={this.props.name}\r\n        phrasing={this.props.phrasing}\r\n        handleIgnoreFactor={this.props.handleIgnoreFactor}\r\n        featured={this.props.featured}\r\n        unitText={null}\r\n        ignore={this.props.ignore}\r\n        helpText={this.props.helpText}\r\n        validityStatus={this.props.inputvalidity.status}\r\n        secondLine={showmessage ? this.props.inputvalidity.message : \"\"}\r\n        windowWidth={this.props.windowWidth}\r\n        descendantDeathCauses={this.props.descendantDeathCauses}\r\n        orderVisualization={this.props.orderVisualization}\r\n      >\r\n        <Form.Control\r\n          as=\"select\"\r\n          name={this.props.name}\r\n          value={this.props.factorAnswer}\r\n          onChange={this.props.handleChange}\r\n          disabled={this.props.ignore}\r\n          style={formControlStyle}\r\n          autoFocus={this.props.featured}\r\n        >\r\n          <option value={this.props.placeholder} hidden>\r\n            {this.props.placeholder}\r\n          </option>\r\n          {this.props.options.map((d: string) => {\r\n            return <option value={d}>{d}</option>;\r\n          })}\r\n        </Form.Control>\r\n      </QuestionContext>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { ButtonToolbar } from \"reactstrap\";\r\nimport { InputValidity } from \"../models/FactorAbstract\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport { FormControlStyle, CHANGED_COLOR } from \"./Question\";\r\n\r\ninterface AskedQuestionProps {\r\n  factorName: string | undefined;\r\n  validity: InputValidity | undefined;\r\n  onSubmit: (event: React.FormEvent) => void;\r\n  previousPossible: boolean;\r\n  onPrevious: () => void;\r\n  onStartOver: () => void;\r\n  onFinishNow: () => void;\r\n  onFinishRandomly: () => void;\r\n  leftCornerCounter: string;\r\n  onSwitchView: () => void;\r\n  finished: boolean;\r\n  isChanged: boolean;\r\n}\r\n\r\nclass AskedQuestionFramed extends React.Component<AskedQuestionProps, any> {\r\n\r\n  getMovingOnButton(){\r\n    const disabled=(this.props.validity !== undefined  && this.props.validity.status === \"Error\")\r\n    let buttonStyle: FormControlStyle={};\r\n    let onClick: (ev: React.FormEvent) => void;\r\n    let buttonText: string;\r\n    if(this.props.finished){\r\n      onClick= (ev: React.FormEvent) => {\r\n        ev.preventDefault()\r\n        this.props.onSwitchView()\r\n       }\r\n       buttonText=\"Overview\"\r\n    }\r\n    else{\r\n      onClick=this.props.onSubmit\r\n      buttonText=\"Next\"\r\n    }\r\n    if(this.props.isChanged && !this.props.finished){\r\n      buttonStyle[\"backgroundColor\"]=CHANGED_COLOR\r\n    }\r\n    return (\r\n      <Button disabled={disabled} \r\n      onClick={onClick} \r\n      aria-contols=\"collapse-asked-question-frame\"\r\n      style={buttonStyle}>\r\n        {buttonText}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card style={{ marginBottom: \"20px\", minHeight: \"300px\", maxHeight:\"300px\",maxWidth:\"500px\",marginRight:\"auto\", marginLeft:\"auto\" }}>\r\n        <Card.Header>\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            {this.props.leftCornerCounter}\r\n          </div>\r\n          <Card.Title>\r\n            {this.props.factorName ? this.props.factorName : \"No more questions\"}\r\n          </Card.Title>\r\n        <div>\r\n          {\"\"}\r\n        </div>\r\n        </div>\r\n        </Card.Header>\r\n        <Card.Body>{this.props.children}</Card.Body>\r\n        <Card.Footer>\r\n          <ButtonToolbar className=\"justify-content-between\">\r\n            <ButtonGroup>\r\n              <Button\r\n                disabled={!this.props.previousPossible}\r\n                onClick={this.props.onPrevious}\r\n              >\r\n                Previous\r\n              </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n              <DropdownButton\r\n                id=\"dropdown-basic-button\"\r\n                title=\"Options\"\r\n                size=\"sm\"\r\n              >\r\n                <Dropdown.Item onClick={this.props.onStartOver}>Start over</Dropdown.Item>\r\n                <Dropdown.Item onClick={this.props.onFinishNow}>Go to end</Dropdown.Item>\r\n                <Dropdown.Item onClick={this.props.onFinishRandomly}>Random</Dropdown.Item>\r\n              </DropdownButton>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n              {this.getMovingOnButton()}\r\n            </ButtonGroup>\r\n          </ButtonToolbar>\r\n        </Card.Footer>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AskedQuestionFramed;\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\nimport { ButtonToolbar } from \"reactstrap\";\r\nimport \"./QuestionMenu.css\";\r\nimport { ERROR_COLOR, FormControlStyle, CHANGED_COLOR } from \"./Question\";\r\n\r\ninterface QuestionListFrameProps {\r\n  onSubmit: (event: React.FormEvent) => void;\r\n  onSwitchView: () => void;\r\n  onFinishRandomly: () => void;\r\n  isChanged: boolean;\r\n  hasError: boolean;\r\n}\r\n\r\n//the following is the minimum header width for the card. The variables are\r\n//1200 is the screen size for which the questionmenu is most narrow.\r\n// 5/7 is the proportion of the screen covered by question menu\r\n// 18*2 are the padding of the questionmenu-div\r\n// 1*2 are the borders of Card.\r\n// 20*2 are the padding of the Card.Title\r\nconst MIN_HEADER_WIDTH= 1200*5/7-18*2-1*2-20*2;\r\nconst MAX_BUTTON_WIDTH=(MIN_HEADER_WIDTH/2-20).toPrecision()+'px';\r\n\r\n\r\nclass QuestionListFrame extends React.Component<QuestionListFrameProps, any> {\r\n\r\n  submitButtonMessage(){\r\n    if(this.props.hasError){\r\n      return <span style={{color: ERROR_COLOR, fontSize:\"small\"}}> *Errors in the inputs </span>\r\n    }\r\n    if(this.props.isChanged){\r\n      return <span style={{color: CHANGED_COLOR, fontSize:\"small\"}}> *Submit changes </span>\r\n    }\r\n    return <span style={{fontSize:\"small\"}}>No changes</span>\r\n  }\r\n\r\n  makeSubmitButton(){\r\n    let buttonStyle: FormControlStyle={}\r\n    let buttonText=\"Compute\"\r\n    if(this.props.isChanged || this.props.hasError){\r\n      buttonStyle[\"backgroundColor\"]=CHANGED_COLOR;\r\n      buttonText=\"*\"+buttonText\r\n    }\r\n    return (\r\n      <div>\r\n        <div>\r\n        <Button onClick={this.props.onSubmit} style={buttonStyle} disabled={this.props.hasError}>\r\n          {buttonText}\r\n        </Button>\r\n        </div>\r\n       <div style={{float:\"right\"}}>\r\n       {this.submitButtonMessage()}\r\n       </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card style={{ marginBottom: \"20px\", maxWidth:\"600px\" }}>\r\n        <Card.Header>\r\n          <div className=\"d-flex justify-content-between\">\r\n            <div>\r\n              <Button onClick={this.props.onSwitchView}>Back to the questions</Button>\r\n            </div>\r\n            {this.makeSubmitButton()}\r\n          </div>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          {this.props.children}\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <ButtonToolbar className=\"justify-content-between\">\r\n            <ButtonGroup>\r\n              <Button>Something</Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup>\r\n            {this.makeSubmitButton()}\r\n            </ButtonGroup>\r\n          </ButtonToolbar>\r\n        </Card.Footer>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuestionListFrame;\r\n","import { sum } from \"d3\";\r\nimport { DataRow, DataSet } from \"./PlottingData\";\r\n\r\nexport interface SquareSection {\r\n    name: string,\r\n    cause: string,\r\n    x0: number,\r\n    x: number\r\n}\r\n\r\n\r\nfunction make_squares(res_dat: DataSet){\r\n    const r: SquareSection[][]= res_dat.map( (p_object: DataRow): SquareSection[] => {\r\n        let new_res=[];\r\n        const total_explained= Object.values(p_object.innerCauses).reduce((a, b) => a + b,0);\r\n        // console.log(total_explained);\r\n        let explained=1-total_explained;\r\n        new_res.push({\r\n            name: p_object.name,\r\n            cause: 'Unexplained',\r\n            x0:0,\r\n            x: explained*p_object.totalProb\r\n        });\r\n        for (let [key, value] of Object.entries(p_object.innerCauses)) {\r\n            new_res.push({\r\n                name: p_object.name,\r\n                cause: key,\r\n                x0: explained*p_object.totalProb,\r\n                x: (explained+value)*p_object.totalProb\r\n            });\r\n            explained+=value;\r\n        };\r\n        return new_res;\r\n    });\r\n    const flattened_array = ([] as SquareSection[]).concat(...r);\r\n    return flattened_array;\r\n};\r\n\r\nexport default make_squares;","import * as d3 from 'd3';\r\nimport d3Tip from \"d3-tip\";\r\nimport './BarChart.css';\r\nimport { DataRow, DataSet, AugmentedDataSet, AugmentedDataRow } from './PlottingData';\r\nimport  make_squares, {SquareSection}  from './ComptutationEngine';\r\nimport { ScaleBand } from 'd3';\r\nimport {ALTERNATING_COLORS} from './Helpers';\r\nimport { NodeToColor } from '../models/RelationLinks';\r\n\r\n\r\nconst MARGIN = { TOP: 2, BOTTOM: 2, LEFT: 10, RIGHT: 10 }\r\nconst WIDTH = 1200;\r\nlet DESIGN= \"LONG\";\r\nconst BARHEIGHT = 50;\r\nconst XBARHEIGHT= 50;\r\nconst PADDING = 0.3;\r\nconst TEXT_COLUMN_SIZE=100;\r\n\r\nconst BASE_COLORS: NodeToColor={'Unexplained':\"#FFFFFF\",\r\n'partying':'#FF6C00'};\r\n\r\nfunction getDivWidth(div: HTMLElement | null): number {\r\n\tconsole.log(div);\r\n\tif(div === null){\r\n\t\treturn 0;\r\n\t}\r\n    var width = d3.select(div)\r\n      // get the width of div element\r\n      .style('width')\r\n      // take of 'px'\r\n      .slice(0, -2)\r\n    // return as an integer\r\n    return Math.round(Number(width))\r\n  }\r\n\r\ninterface DesignConstants {\r\n\tbarheight: number,\r\n\ttotalheight: number,\r\n\ttotalheightWithXBar: number,\r\n\tstartXScale: number,\r\n\tyListStart: number,\r\n\tyListInnerPadding: number,\r\n\tyListOuterPadding: number,\r\n\tyListAlign: number,\r\n\tmiddleOfChart: number,\r\n\twidth: number,\r\n\ttextTranslation: string,\r\n\ttextAnchor: 'start' | 'middle' | 'end'\r\n}\r\n\r\nfunction longDesignConstants(n: number, width:number): DesignConstants{\r\n\treturn {\r\n\t\tbarheight: 1.5*BARHEIGHT,\r\n\t\ttotalheight: n*1.5*BARHEIGHT,\r\n\t\ttotalheightWithXBar: n*1.5*BARHEIGHT+XBARHEIGHT,\r\n\t\tstartXScale: 10,\r\n\t\tyListStart: XBARHEIGHT,\r\n\t\tyListInnerPadding: 0.48,\r\n\t\tyListOuterPadding: 0.24,\r\n\t\tyListAlign:0.8,\r\n\t\tmiddleOfChart: width/2,\r\n\t\twidth: width,\r\n\t\ttextTranslation: \"translate(\" + 10 +\r\n\t\t \",\" + -BARHEIGHT/8 + \")\",\r\n\t\ttextAnchor: 'start'\r\n\t}\r\n}\r\n\r\nfunction wideDesignConstants(n: number, width: number): DesignConstants{\r\n\treturn {\r\n\t\tbarheight: BARHEIGHT,\r\n\t\ttotalheight: n*BARHEIGHT,\r\n\t\ttotalheightWithXBar: n*BARHEIGHT+XBARHEIGHT,\r\n\t\tstartXScale: TEXT_COLUMN_SIZE,\r\n\t\tyListStart: XBARHEIGHT,\r\n\t\tyListInnerPadding: PADDING,\r\n\t\tyListOuterPadding: PADDING/2,\r\n\t\tyListAlign: 0.5,\r\n\t\tmiddleOfChart: TEXT_COLUMN_SIZE+(width-TEXT_COLUMN_SIZE)/2,\r\n\t\twidth: width,\r\n\t\ttextTranslation: \"translate(\" + -10 + \",\" + (BARHEIGHT/2) + \")\",\r\n\t\ttextAnchor: 'end'\r\n\t}\r\n}\r\n\r\nexport default class BarChart {\r\n    element: HTMLElement|null=null ;\r\n    width: number=0;\r\n    svg!: d3.Selection<SVGSVGElement,unknown,null,undefined>; // the exclamation point is necessary because the compiler does not realize that it is initialized in the constructor\r\n    xAxisGroup: any| null;\r\n\tdata: DataRow[] ;\r\n\tdata2: SquareSection[]=[];\r\n\tstip: any;\r\n\tdrect_order: string[];\r\n\tyBars: ScaleBand<string>;\r\n\tcolorDic: NodeToColor;\r\n\r\n\tconstructor(element: HTMLElement | null, database: DataSet, colorDic: NodeToColor) {\r\n\t\tconsole.log(database);\r\n\r\n\t\t//Initializers\r\n\t\tthis.drect_order=[];\r\n\t\tthis.yBars=d3.scaleBand();\r\n\t\tthis.colorDic=Object.assign({}, colorDic, BASE_COLORS);\r\n\r\n\r\n\t\tthis.data=database;\r\n\t\tconst vis = this\r\n\t\tvis.element=element;\r\n\t\tvis.width=getDivWidth(element)*0.9;  //getDivWidth(element)*0.9;\r\n\t\tconsole.log(\"vis width \" + vis.width);\r\n\t\t//width=\"100%\" viewBox=\"0 0 10 1.5\" preserveAspectRatio=\"xMinYMin\">\r\n\t\tvis.svg = d3.select(element)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t\t.attr(\"width\", vis.width)\r\n                .attr(\"height\", BARHEIGHT+XBARHEIGHT)\r\n\t\t\r\n\r\n\t\tvis.xAxisGroup = vis.svg.append(\"g\")\r\n\t\t\t\t\t\t\t.attr('transform',`translate(0,${XBARHEIGHT})`)\r\n\t\tlet designConstants = (DESIGN==='WIDE') ? wideDesignConstants(1,vis.width) : longDesignConstants(1, vis.width);\r\n\r\n\t\tvis.svg.append('text')\r\n\t\t\t.attr(\"x\", designConstants.middleOfChart)\r\n\t\t\t.attr(\"y\", XBARHEIGHT/2)\r\n\t\t\t.attr(\"font-size\", 20)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(\"Probability of dying of cause\")\r\n\t\t\r\n\t\tvis.make();\r\n\t}\r\n\r\n\tclear(){\r\n\t\td3.select('svg').remove();\r\n\t}\r\n\r\n\trecalibrate_ybars(sort_data: DataSet, designConstants: DesignConstants){\r\n\t\tthis.yBars = d3.scaleBand()\r\n\t\t.domain(sort_data.map((d:any) => d.name))\r\n\t\t.range([designConstants.yListStart, designConstants.totalheightWithXBar])\r\n\t\t.paddingInner(designConstants.yListInnerPadding)\r\n\t\t.paddingOuter(designConstants.yListOuterPadding)\r\n\t\t.align(designConstants.yListAlign)\r\n\t}\r\n\r\n\tmake() {\r\n\t\tconst vis = this;\r\n\t\tconst n=vis.data.length;\r\n\t\tlet designConstants = (DESIGN==='WIDE') ? wideDesignConstants(n,vis.width) : longDesignConstants(n, vis.width);\r\n\r\n\t\tvis.svg.attr(\"height\", designConstants.totalheightWithXBar)\r\n\t\tconst dataSortedName= copyOfSortedDataset(vis.data, 'name');\r\n\t\tconst dataSortedTotal= copyOfSortedDataset(vis.data, 'totalProb');\r\n\r\n\t\tconst augmented_data: AugmentedDataSet=dataSortedTotal.map((d: DataRow, index: number): AugmentedDataRow=> {\r\n\t\t\tlet res: any= d;\r\n\t\t\tres[\"id\"]=index;\r\n\t\t\treturn res;\r\n\t\t})\r\n\r\n\t\tthis.drect_order=dataSortedTotal.map((d) => d.name);\r\n\t\tconst dataSquares=make_squares(dataSortedName);\r\n\r\n\t\t//Setting X-axis\r\n\t\tconst newMaxX=getMaxX(dataSquares);\r\n\t\tconst {xAxisCall, xscale} = this.createXAxisCall(newMaxX, designConstants)\r\n\t\tvis.xAxisGroup.call(xAxisCall)\r\n\r\n\t\t//Setting the mapping disease -> y value\r\n\t\tthis.recalibrate_ybars(dataSortedTotal, designConstants);\r\n\r\n\t\tconst yRects = d3.scaleBand()\r\n\t\t\t.domain(dataSortedTotal.map((d:any) => d.name))\r\n\t\t\t.align(designConstants.yListAlign)\r\n\t\t\t.range([designConstants.yListStart, designConstants.totalheightWithXBar])\r\n\t\t\r\n\t\t//DATA JOIN\r\n\t\tconst diseases = vis.svg.selectAll(\"rect.shell\").data(augmented_data, function(d: any){ return d.name })\r\n\r\n\t\t// EXIT\r\n\t\tdiseases.exit().remove()\r\n\r\n\t\t// ENTER\r\n\t\tconst g_components= diseases.enter().append('g').attr('class','rect.shell')\r\n\r\n\t\t/*  One disadvantage of this structure is that it is important that the text is never inserted before the \r\n\t\t\trectangle. Therefore it is important that they are inserted in the same order. \r\n\t\t*/\r\n\t\tg_components.append('rect').attr('class','drect')\r\n\t\t\t\t.attr(\"y\", (d:any,i:number) => (yRects(d.name) as number))\r\n\t\t\t\t.attr(\"x\", xscale(0))\r\n\t\t\t\t.attr(\"width\", designConstants.width)\r\n\t\t\t\t.attr(\"height\", designConstants.barheight)\r\n\t\t\t\t.attr('fill', function(d:any,i:number) { return ALTERNATING_COLORS[d.id%2]})\r\n\t\t\t\t.style(\"opacity\", 0.5)\r\n\r\n\t\tg_components.insert('text').attr('class','dtext')\r\n\t\t\t\t.attr(\"y\", (d:any) => (this.yBars(d.name) as number))\r\n\t\t\t\t.attr(\"x\", xscale(0))\r\n\t\t\t\t.text( (d:any) => d.name)\r\n\t\t\t\t.style('text-anchor',designConstants.textAnchor)\r\n\t\t\t\t.attr(\"transform\",designConstants.textTranslation)\r\n\r\n\t\t\r\n\t\t//The causes themselves are plotted by this.\r\n        const gs= vis.svg.selectAll(\".causebar\")\r\n\t\t\t\t\t.data(dataSquares, function(d: any) {return d.name+'.'+d.cause})\r\n\r\n\r\n\t\td3.select(\".d3-tip\").remove(); //removes any old visible tooltips that was perhaps not removed by a mouseout event (for example because the mouse teleported instantanously by entering/exiting a full-screen). \r\n\r\n\r\n\t\tvis.stip = d3Tip().attr('class', 'd3-tip').html( (d: SquareSection) => {\r\n\t\t\treturn d.cause;\r\n\t\t\t} )\r\n\t\t\t\t\t\t\t.direction('s')\r\n\t\t\t\t\t\t\t.offset([10,0])\r\n\t\t\t\t\t\t\r\n\t\tvis.svg.call(vis.stip);\r\n\t\t\r\n\t\tgs.exit().remove()\r\n\r\n\t\tgs.enter().append('rect')\r\n\t\t\t.attr('class','causebar')\r\n\t\t\t.attr(\"y\", d => (this.yBars(d.name) as number))\r\n\t\t\t.attr(\"x\", d => xscale(d.x0))\r\n\t\t\t.attr('height', this.yBars.bandwidth)\r\n\t\t\t.attr(\"width\", d => xscale(d.x)-xscale(d.x0))\r\n\t\t\t.attr(\"fill\", d => this.colorDic[d.cause])\r\n\t\t\t.attr('stroke', '#2378ae' )\r\n\t\t\t.on(\"mouseenter\", function(e: Event, d: SquareSection){\r\n\t\t\t\td3.selectAll(\".d3-tip\").style(\"background-color\", vis.colorDic[d.cause])\r\n\t\t\t\tvis.stip.show(d,this);\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.raise()\r\n\t\t\t\t\t.style(\"stroke-width\",3)\r\n\t\t\t\t\t.style('stroke','#000000')\r\n\t\t\t\t})\r\n\t\t\t.on(\"mouseleave\",  function(e: Event, d: SquareSection){\r\n\t\t\t\tvis.stip.hide(d,this);\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.style(\"stroke-width\",1)\r\n\t\t\t\t\t.style('stroke','#2378ae')\r\n\t\t\t\t})\r\n\t\t\t.on(\"resize\",  function(e: Event, d: SquareSection){\r\n\t\t\t\tconsole.log('fullscreenchange');\r\n\t\t\t\tvis.stip.hide(d,this);\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.style(\"stroke-width\",1)\r\n\t\t\t\t\t.style('stroke','#2378ae')\r\n\t\t\t\t})\r\n\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\t//});\r\n\t\t\t//.transition().duration(500)\r\n\t\t\t\t//.attr(\"height\", d => HEIGHT - y(d.total_prob))\r\n\t\t\t\t//.attr(\"y\", d => y(d.height)) */\t\r\n\t\t\t\r\n\t}\r\n\r\n\tcreateXAxisCall(newMax: number, designConstants: DesignConstants){\r\n\t\tconst x = d3.scaleLinear()\r\n\t\t.domain([\r\n\t\t\t0, \r\n\t\t\tnewMax*1.15\r\n\t\t])\r\n\t\t.range([designConstants.startXScale,designConstants.width])\r\n\t\t\r\n\t\treturn {xAxisCall: d3.axisTop(x), xscale:x}\r\n\t}\r\n\r\n\tupdate(dataset: DataSet){\r\n\r\n\t\tconst vis = this;\r\n\t\t\r\n\t\tconst dataSortedTotal = copyOfSortedDataset(dataset, \"totalProb\"); \r\n\t\tconst dataSortedName = copyOfSortedDataset(dataset, 'name'); \r\n\r\n\t\t//dataset that connects the original disease order (drect_order) with the new label.\r\n\t\t//In theory, it would be possible to rearrange the labels, but some of them will almost always end up\r\n\t\t//\"below\" a drect-object. Therefore it is easier to rename them.\r\n\t\tconst rename_object= this.drect_order.map((d,i) => {\r\n\t\t\treturn {new_name: dataSortedTotal[i].name, name: d}\r\n\t\t})\r\n\r\n\t\tconst dataSquares=make_squares(dataSortedName);\r\n\r\n\t\tconst n=dataSortedName.length;\r\n\t\tconst designConstants = (DESIGN==='WIDE') ? wideDesignConstants(n,vis.width) : longDesignConstants(n, vis.width);\r\n\r\n\t\t//Updating X-axis\r\n\t\tconst newMaxX=getMaxX(dataSquares);\r\n\t\tconst {xAxisCall, xscale} = this.createXAxisCall(newMaxX, designConstants)\r\n\t\tvis.xAxisGroup.call(xAxisCall)\r\n\r\n\t\t//Updating the disease-to-y mapping (this.yBars)\r\n\t\tthis.recalibrate_ybars(dataSortedTotal, designConstants); \r\n\r\n\t\tconst gs= vis.svg.selectAll(\".causebar\")\r\n\t\t\t.data(dataSquares, function(d: any) {return d.name+'.'+d.cause})\r\n\r\n\t\tconst duration_per_transition=500;\r\n\r\n\t\tgs.transition()\r\n\t\t\t .duration(duration_per_transition)\r\n\t\t\t.attr(\"x\", d => xscale(d.x0))\r\n\t\t\t.attr(\"width\", d => xscale(d.x)-xscale(d.x0))\r\n\t\tgs.transition()\r\n\t\t\t.delay(duration_per_transition)\r\n\t\t\t.duration(duration_per_transition)\r\n\t\t\t.attr(\"y\", d => (this.yBars(d.name) as number))\r\n\r\n\t\tvis.svg.selectAll('.dtext')\r\n\t\t\t.data(rename_object, function(d:any){ return d.name})\r\n\t\t\t.transition()\r\n\t\t\t.delay(duration_per_transition*2)\r\n\t\t\t.text( (d:any) => d.new_name)\r\n\r\n\r\n\t};\r\n}\r\n\r\nfunction copyOfSortedDataset(dataset: DataSet, sorter: 'totalProb' | 'name' ='totalProb'): DataSet{\r\n\treturn dataset.slice().sort(function(a: DataRow, b: DataRow) { return d3.descending(a[sorter], b[sorter]) });\r\n}\r\n\r\nfunction getMaxX(dataset: SquareSection[]):number{\r\n\tlet a= d3.max(dataset, d => d.x);\r\n\tif(a === undefined){\r\n\t\ta=1.0\r\n\t}\r\n\treturn a;\r\n}\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport { NodeToColor } from '../models/RelationLinks';\r\nimport BarChart from './BarChart';\r\nimport { DataSet } from './PlottingData';\r\n\r\ninterface BarChartWrapperProps {\r\n\tdatabase: DataSet;\r\n\tcolorDic: NodeToColor;\r\n}\r\n\r\nconst BarChartWrapper = (props: BarChartWrapperProps) => { //class ChartWrapper extends React.PureComponent<any,any> {\r\n\tconst database = props.database;\r\n\tconsole.log(database);\r\n\tconst chartArea = useRef(null);\r\n\tconst [chart, setChart] = useState<BarChart | null>(null);\r\n\tconst { width } = useWindowSize();\r\n\r\n\tconst createNewChart = function () {\r\n\t\tsetChart(new BarChart(chartArea.current, database, props.colorDic));\r\n\t}\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('width changed');\r\n\t\tif (chart) {\r\n\t\t\tchart.clear();\r\n\t\t\tcreateNewChart();\r\n\t\t}\r\n\t}, [width])\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('dataset changed');\r\n\t\tif (chart) {\r\n\t\t\tchart.update(database);\r\n\t\t}\r\n\t}, [database]);\r\n\r\n\tuseEffect(() => {\r\n\t\tcreateNewChart();\r\n\t\treturn () => {\r\n\t\t\tchart?.clear();\r\n\t\t}\r\n\t}, []);\r\n\r\n\treturn <div className=\"container\" ref={chartArea} id=\"barchartcontainer\" />\r\n\r\n}\r\n\r\nfunction useWindowSize() {\r\n\tconst [windowSize, setWindowSize] = useState({\r\n\t\twidth: window.innerWidth,\r\n\t});\r\n\r\n\tlet resize_graphic = true;\r\n\tfunction changeWindowSize() {\r\n\t\tif (resize_graphic) {\r\n\t\t\tresize_graphic = false;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetWindowSize({ width: window.innerWidth });\r\n\t\t\t\tresize_graphic = true;\r\n\t\t\t}, 400);\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener(\"resize\", changeWindowSize);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"resize\", changeWindowSize);\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn windowSize;\r\n}\r\n\r\nexport default BarChartWrapper;","import kahnSort from \"./KahnSort\";\r\n\r\n// export const INPUT = \"Input factor\";\r\n// export const COMPUTED_FACTOR = \"Computed factor\";\r\n// export const CONDITION = \"Condition\";\r\n// export const CAUSE_CATEGORY = \"Death cause category\";\r\n// export const CAUSE = \"Death cause\";\r\n\r\nexport enum NodeType {\r\n  INPUT=\"Input factor\",\r\n  COMPUTED_FACTOR=\"Computed factor\",\r\n  CONDITION=\"Condition\",\r\n  CAUSE_CATEGORY= \"Death cause category\",\r\n  CAUSE= \"Death cause\"\r\n}\r\n\r\nexport const NODE_ORDER = [\r\n  NodeType.INPUT,\r\n  NodeType.COMPUTED_FACTOR,\r\n  NodeType.CONDITION,\r\n  NodeType.CAUSE_CATEGORY,\r\n  NodeType.CAUSE,\r\n];\r\n\r\ninterface ReverseNodeOrder {\r\n  [key: string]: number;\r\n}\r\n\r\ninterface NodeValue {\r\n  type: NodeType;\r\n  color: string;\r\n  ancestors: string[];\r\n}\r\n\r\nexport interface RelationLinkJson {\r\n  [nodeName: string]: NodeValue;\r\n}\r\n\r\ninterface NumberOfDestinations {\r\n  [nodeName: string]: number;\r\n}\r\n\r\ninterface NodeDic {\r\n  [nodeName: string]: string[];\r\n}\r\n\r\ninterface NodeToType {\r\n  [nodeName: string]: NodeType;\r\n}\r\n\r\nexport interface NodeToColor{\r\n  [nodeName: string]: string;\r\n}\r\n\r\ninterface UntransformedLabel {\r\n  cat: NodeType;\r\n  x_relative: number;\r\n  y: number;\r\n  nodeName: string;\r\n  key: string;\r\n}\r\n\r\nexport interface Arrow {\r\n  from: string;\r\n  to: string;\r\n  type: string;\r\n}\r\n\r\nexport interface TransformedLabel {\r\n  cat: NodeType;\r\n  x: number;\r\n  y: number;\r\n  nodeName: string;\r\n  key: string;\r\n}\r\n\r\ninterface DirectionInfo {\r\n  arrows: Arrow[];\r\n  untransformedlabels: UntransformedLabel[];\r\n  usedKeys: string[];\r\n}\r\n\r\ninterface XDivision {\r\n  x0: number;\r\n  width: number;\r\n  cat: NodeType;\r\n}\r\n\r\ninterface AdjustXReturn {\r\n  transformedLabels: TransformedLabel[];\r\n  xDivisions: XDivision[];\r\n}\r\n\r\nexport interface NodeExtremas {\r\n  min: NodeType;\r\n  max: NodeType;\r\n  nodeCategories: NodeType[];\r\n}\r\n\r\ninterface StratifiedTopologicalSorting {\r\n  [key: string]: string[];\r\n}\r\nexport interface PlottingInfo extends AdjustXReturn {\r\n  arrows: Arrow[];\r\n  nodeExtremas: NodeExtremas;\r\n}\r\n\r\nconst INPUT_FACTORS_LENGTH = 1;\r\nconst COMPUTED_FACTORS_LENGTH = 1;\r\nconst CONDITIONS_LENGTH = 1;\r\nconst DEATHCAUSE_CATEGORY_LENGTH = 1;\r\nconst DEATHCAUSE_LENGTH = 1;\r\nconst MARGIN = 0.3;\r\nconst TOTAL_WIDTH =\r\n  INPUT_FACTORS_LENGTH +\r\n  COMPUTED_FACTORS_LENGTH +\r\n  CONDITIONS_LENGTH +\r\n  DEATHCAUSE_CATEGORY_LENGTH +\r\n  DEATHCAUSE_LENGTH +\r\n  4 * MARGIN;\r\n\r\n{\r\n  /* \r\nThis class handles the relation link database - that is which factors implies which death causes. \r\nThe language used is that of ancestors and descendants. Ancestors came before the descendentants,\r\nso when we talk about the ancestors we mean the risk factors, and descendants are the diseases. \r\nFor computed factors, their ancestors are the input factors and so on. The hierarchy is\r\nsuper-ancestor=Input factor -> Computed factor -> Condition -> Death cause category -> Death cause = super-descendant.\r\nWe assume a tree-like structure in both directions which is enforced in each direction.\r\n*/\r\n}\r\nexport default class RelationLinks {\r\n  superDescendantCount: NumberOfDestinations = {};\r\n  superAncestorCount: NumberOfDestinations = {};\r\n  ancestorList: NodeDic = {};\r\n  descendantList: NodeDic = {};\r\n  NodeType: NodeToType = {};\r\n  superAncestorList: NodeDic = {};\r\n  superDescendantList: NodeDic = {};\r\n  nodeOrderReversed: ReverseNodeOrder = {};\r\n  deathCauseDescendants: NodeDic = {};\r\n  sortedNodes: StratifiedTopologicalSorting = {};\r\n  colorDic: NodeToColor = {};\r\n\r\n  constructor(jsonObject: RelationLinkJson) {\r\n    this.initializeReverseNodeTypeOrder();\r\n    this.initializeInheritanceListsAndTypeAndColor(jsonObject);\r\n    this.initializeSuperInheritanceLists();\r\n    this.initializeSortedNodes();\r\n  }\r\n\r\n  initializeReverseNodeTypeOrder() {\r\n    NODE_ORDER.forEach((d: NodeType, i: number) => {\r\n      this.nodeOrderReversed[d] = i;\r\n    });\r\n  }\r\n\r\n  initializeInheritanceListsAndTypeAndColor(jsonObject: RelationLinkJson) {\r\n    //initializing  NodeType, ancestorList\r\n    Object.keys(jsonObject).forEach((nodeName: string) => {\r\n      this.descendantList[nodeName] = [];\r\n    });\r\n    Object.entries(jsonObject).forEach(([nodeName, node]) => {\r\n      this.colorDic[nodeName] = node.color;\r\n      this.NodeType[nodeName] = node.type;\r\n      this.ancestorList[nodeName] = node.ancestors;\r\n\r\n      this.ancestorList[nodeName].forEach((ancestor: string) => {\r\n        try {\r\n          return this.descendantList[ancestor].push(nodeName);\r\n        } catch (e) {\r\n          throw `Error when trying to put ${nodeName} into the descendants of ${ancestor}`;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  initializeSuperInheritanceLists() {\r\n    Object.keys(this.NodeType).forEach((nodeName: string) => {\r\n      this.superDescendantList[nodeName] = this.findDescendants(nodeName);\r\n      this.superDescendantCount[nodeName] = this.superDescendantList[\r\n        nodeName\r\n      ].length;\r\n      this.superAncestorList[nodeName] = this.findAncestors(nodeName);\r\n      this.superAncestorCount[nodeName] = this.superAncestorList[\r\n        nodeName\r\n      ].length;\r\n      this.deathCauseDescendants[nodeName] = this.findDeathCauseDescendants(\r\n        nodeName\r\n      );\r\n    });\r\n  }\r\n\r\n  initializeSortedNodes(): void {\r\n    //Kahns algorithm(1962) puts nodes from an acyclicdirected graph in a order that puts ancestors before descendants.\r\n    NODE_ORDER.forEach((nodeType) => {\r\n      let nodesToBeSorted = Object.keys(this.NodeType).filter((nodename) => {\r\n        return this.NodeType[nodename] === nodeType;\r\n      });\r\n      this.sortedNodes[nodeType] = kahnSort(\r\n        nodesToBeSorted,\r\n        this.ancestorList,\r\n        this.descendantList\r\n      );\r\n    });\r\n  }\r\n\r\n  arrowInterpretation(\r\n    //TODO: when there are duplicate keys it doesn't give the right output\r\n    fromNode: string,\r\n    toNode: string\r\n  ): string {\r\n    let res: string = \"\";\r\n    let fromType = this.NodeType[fromNode];\r\n    let toType = this.NodeType[toNode];\r\n    if (fromType === NodeType.INPUT || fromType === NodeType.COMPUTED_FACTOR) {\r\n      res += fromNode + \" is used \";\r\n    } else if (fromType === NodeType.CONDITION) {\r\n      res += \"The status of \" + fromNode + \" is used \";\r\n    } else if (fromType === NodeType.CAUSE_CATEGORY) {\r\n      res +=\r\n        \"The risk factors common to all types of \" + fromNode + \" are used \";\r\n    }\r\n    if (toType === NodeType.COMPUTED_FACTOR) {\r\n      res += \"to compute \" + toNode;\r\n    } else if (toType === NodeType.CONDITION) {\r\n      res += \"to estimate the status of \" + toNode;\r\n    } else if (toType === NodeType.CAUSE_CATEGORY && fromType === NodeType.CAUSE_CATEGORY) {\r\n      res += \"as risk factors for all types of \" + toNode;\r\n    } else if (toType === NodeType.CAUSE_CATEGORY) {\r\n      res += \"as a risk factor for all types of \" + toNode;\r\n    } else if (toType === NodeType.CAUSE) {\r\n      res += \"to compute the risk of dying from \" + toNode;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  findDescendants(nodeName: string): string[] {\r\n    if (this.descendantList[nodeName].length === 0) {\r\n      return [nodeName];\r\n    } else {\r\n      let descendantsListsOfDescendants = this.descendantList[nodeName].map(\r\n        (d: string) => {\r\n          return this.findDescendants(d);\r\n        }\r\n      );\r\n      return ([] as string[]).concat(...descendantsListsOfDescendants);\r\n    }\r\n  }\r\n\r\n  findDeathCauseDescendants(nodeName: string): string[] {\r\n    if (\r\n      this.descendantList[nodeName].length === 0 ||\r\n      this.NodeType[nodeName] === NodeType.CAUSE_CATEGORY ||\r\n      this.NodeType[nodeName] === NodeType.CAUSE\r\n    ) {\r\n      return [nodeName];\r\n    } else {\r\n      let descendantsListsOfCauseDescendants = this.descendantList[\r\n        nodeName\r\n      ].map((d: string) => {\r\n        return this.findDeathCauseDescendants(d);\r\n      });\r\n      return ([] as string[]).concat(...descendantsListsOfCauseDescendants);\r\n    }\r\n  }\r\n\r\n  findAncestors(nodeName: string): string[] {\r\n    if (this.ancestorList[nodeName].length === 0) {\r\n      return [nodeName];\r\n    } else {\r\n      let ancestorsListsOfAncestors = this.ancestorList[nodeName].map(\r\n        (d: string) => {\r\n          return this.findAncestors(d);\r\n        }\r\n      );\r\n      return ([] as string[]).concat(...ancestorsListsOfAncestors);\r\n    }\r\n  }\r\n\r\n  getNumberOfNodesInEitherDirection(nodeName: string) {\r\n    let currentCategory = this.NodeType[nodeName];\r\n    let upstreamElements = this.followGraph(\r\n      nodeName,\r\n      this.ancestorList,\r\n      (d: string) => this.NodeType[d] === currentCategory\r\n    );\r\n    let downStreamElements = this.followGraph(\r\n      nodeName,\r\n      this.descendantList,\r\n      (d: string) => this.NodeType[d] === currentCategory\r\n    );\r\n    return {\r\n      upstreamElements: upstreamElements,\r\n      downStreamElements: downStreamElements,\r\n    };\r\n  }\r\n\r\n  computeXValueOfInitialNode(\r\n    upstreamElements: number,\r\n    downStreamElements: number,\r\n    nodeType: string\r\n  ) {\r\n    let xval: number = 1;\r\n    if (downStreamElements > -0.5 || upstreamElements > -0.5) {\r\n      //all graphs with nodes in more than one node is included here.\r\n      xval =\r\n        (1 + upstreamElements) / (2 + downStreamElements + upstreamElements);\r\n    } else if (nodeType === NODE_ORDER[0]) {\r\n      //Only the one-node graph from an input factor should be shifted to the left.\r\n      xval = 0;\r\n    }\r\n    return xval;\r\n  }\r\n\r\n  makePlottingInstructions(nodeName: string): PlottingInfo {\r\n    let untransformed: UntransformedLabel[] = [];\r\n    let outerNodes: string[] = this.superAncestorList[nodeName].concat(\r\n      this.superDescendantList[nodeName]\r\n    );\r\n    let nodeExtremas = this.getLowestAndHighestCategory(outerNodes);\r\n    let currentCategory = this.NodeType[nodeName];\r\n\r\n    //Taking care of the node we are currently in.\r\n    const {\r\n      upstreamElements,\r\n      downStreamElements,\r\n    } = this.getNumberOfNodesInEitherDirection(nodeName);\r\n    const xval = this.computeXValueOfInitialNode(\r\n      upstreamElements,\r\n      downStreamElements,\r\n      currentCategory\r\n    );\r\n    const yval = 0.25;\r\n    untransformed.push({\r\n      cat: currentCategory,\r\n      x_relative: xval,\r\n      y: yval,\r\n      nodeName: nodeName,\r\n      key: nodeName,\r\n    });\r\n\r\n    //Dealing with the rest of the nodes in the tree.\r\n    let usedKeys: string[] = [nodeName];\r\n    let arrows: Arrow[] = [];\r\n    let descendantInfo = this.makePlottingInNodeDicDirection(\r\n      nodeName,\r\n      upstreamElements,\r\n      this.descendantList,\r\n      this.superDescendantCount,\r\n      0,\r\n      this.superDescendantCount[nodeName],\r\n      (x: number) => x,\r\n      (s: string[]) => [s[0], s[1]],\r\n      usedKeys,\r\n      nodeExtremas\r\n    );\r\n    usedKeys = descendantInfo.usedKeys;\r\n    arrows = descendantInfo.arrows;\r\n    untransformed = untransformed.concat(descendantInfo.untransformedlabels);\r\n    let ancestorInfo = this.makePlottingInNodeDicDirection(\r\n      nodeName,\r\n      downStreamElements,\r\n      this.ancestorList,\r\n      this.superAncestorCount,\r\n      0,\r\n      this.superAncestorCount[nodeName],\r\n      (x: number) => 1 - x,\r\n      (s: string[]) => [s[1], s[0]],\r\n      usedKeys,\r\n      nodeExtremas\r\n    );\r\n    usedKeys = ancestorInfo.usedKeys;\r\n    arrows = arrows.concat(ancestorInfo.arrows);\r\n    untransformed = untransformed.concat(ancestorInfo.untransformedlabels);\r\n    const adjXReturn: AdjustXReturn = this.adjustXCoordinates(untransformed);\r\n    return { ...adjXReturn, arrows: arrows, nodeExtremas: nodeExtremas };\r\n  }\r\n\r\n  computeCumulativeWeights(weights: number[]){\r\n    const cumWeights: number[] = [];\r\n    weights.reduce(function (a, b, i) {\r\n      cumWeights.push(a + b);\r\n      return a + b;\r\n    }, 0);\r\n    cumWeights.unshift(0); //inserting a 0, because the visualization should start at 0.\r\n    return cumWeights\r\n  }\r\n\r\n  adjustXCoordinates(dat: UntransformedLabel[]): AdjustXReturn {\r\n    //calculates the relative space used by each of categories.\r\n    const weights = NODE_ORDER.map((cat: string, index: number) => {\r\n      const xvals = dat\r\n        .filter((ut: UntransformedLabel) => ut.cat === cat)\r\n        .map((ut: UntransformedLabel) => {\r\n          //this computes an estimated length of the labels connected to ut in the same category as ut. \r\n          //It adds 10 for each label to account for space between labels.\r\n          return this.followMaximumSumOfSummary(\r\n            ut.nodeName,\r\n            this.descendantList,\r\n            (d: string) => this.NodeType[d] === cat,\r\n            (d: string) => d.length + 10\r\n          );\r\n        });\r\n      if (xvals.length === 0) {\r\n        return 0;\r\n      }\r\n      return Math.max(...xvals);\r\n    });\r\n    const cumWeights= this.computeCumulativeWeights(weights)\r\n\r\n    const resDat = dat.map((d: UntransformedLabel) => {\r\n      const catOrder = NODE_ORDER.indexOf(d.cat);\r\n      const newX =\r\n        cumWeights[catOrder] +\r\n        (cumWeights[catOrder + 1] - cumWeights[catOrder]) * d.x_relative;\r\n      return { ...d, x: newX };\r\n    });\r\n    let xDivisions: XDivision[] = [];\r\n    for (let index = 0; index < cumWeights.length - 1; index++) {\r\n      if (weights[index] > 0) {\r\n        xDivisions.push({\r\n          x0: cumWeights[index],\r\n          width: weights[index],\r\n          cat: NODE_ORDER[index],\r\n        });\r\n      }\r\n    }\r\n\r\n    return { transformedLabels: resDat, xDivisions: xDivisions };\r\n  }\r\n\r\n  getAllPossibleNodes(): string[] {\r\n    return Object.keys(this.NodeType).sort();\r\n  }\r\n\r\n  getSuperDescendantCount(node: string) {\r\n    return this.superDescendantCount[node];\r\n  }\r\n\r\n  getDeathCauseDescendants(node: string): string[] {\r\n    return this.deathCauseDescendants[node];\r\n  }\r\n\r\n  makePlottingInNodeDicDirection(\r\n    nodeName: string,\r\n    prevElements: number,\r\n    nodeDic: NodeDic,\r\n    superDestinations: NumberOfDestinations,\r\n    bottomY: number,\r\n    topY: number,\r\n    xDirection: (s: number) => number,\r\n    arrowDirection: (twocats: string[]) => string[],\r\n    usedKeys: string[],\r\n    nodeExtremas: NodeExtremas\r\n  ): DirectionInfo {\r\n    if (nodeDic[nodeName].length === 0) {\r\n      return this.makeEmptyDirectionInfo(usedKeys);\r\n    } else {\r\n      const { children, weights, sumweights } = this.getChildrenAndWeight(\r\n        nodeName,\r\n        superDestinations,\r\n        nodeDic\r\n      );\r\n      const parentNodeType = this.NodeType[nodeName];\r\n      const parentYval = (topY + bottomY) / 2;\r\n\r\n      let res: UntransformedLabel[] = [];\r\n      let arrows: Arrow[] = [];\r\n      let yfrom = bottomY;\r\n      children.forEach((childNodeName: string, index: number) => {\r\n        const childCategory = this.NodeType[childNodeName];\r\n        const yto = yfrom + (weights[index] / sumweights) * (topY - bottomY);\r\n        const yval = this.computeYPositionOfLabel(\r\n          yfrom,\r\n          yto,\r\n          parentYval,\r\n          childNodeName,\r\n          childCategory === parentNodeType,\r\n          nodeDic\r\n        );\r\n\r\n        const previousElementsInSameCategory =\r\n          childCategory === parentNodeType ? prevElements + 1 : 0;\r\n\r\n        const xval = this.computeXPositionOfLabel(\r\n          childNodeName,\r\n          childCategory,\r\n          nodeDic,\r\n          previousElementsInSameCategory,\r\n          xDirection,\r\n          nodeExtremas\r\n        );\r\n\r\n        let directionInfo: DirectionInfo = this.makePlottingInNodeDicDirection(\r\n          childNodeName,\r\n          previousElementsInSameCategory,\r\n          nodeDic,\r\n          superDestinations,\r\n          yfrom,\r\n          yto,\r\n          xDirection,\r\n          arrowDirection,\r\n          usedKeys,\r\n          nodeExtremas\r\n        );\r\n        usedKeys = directionInfo.usedKeys;\r\n        arrows = arrows.concat(directionInfo.arrows);\r\n        res = res.concat(directionInfo.untransformedlabels);\r\n\r\n        const key = this.createUniqueKey(childNodeName, usedKeys);\r\n        usedKeys.push(key);\r\n\r\n        const arrowtype = this.getArrowType(\r\n          parentNodeType,\r\n          childCategory,\r\n          xDirection\r\n        );\r\n\r\n        const froto: string[] = arrowDirection([nodeName, key]); //depending on the direction a different number is\r\n        arrows.push({ from: froto[0], to: froto[1], type: arrowtype });\r\n        res.push({\r\n          cat: childCategory,\r\n          x_relative: xval,\r\n          y: yval,\r\n          nodeName: childNodeName,\r\n          key: key,\r\n        });\r\n        yfrom = yto;\r\n      });\r\n      return { untransformedlabels: res, arrows: arrows, usedKeys: usedKeys };\r\n    }\r\n  }\r\n\r\n  compareChildNodesFunction(\r\n    parentNode: string,\r\n    superDestinations: NumberOfDestinations\r\n  ) {\r\n    const parentCat = this.NodeType[parentNode];\r\n    const parentCatIndex = this.nodeOrderReversed[parentCat];\r\n    const nrev = this.nodeOrderReversed;\r\n    const ntyp = this.NodeType;\r\n    function returner(a: string, b: string) {\r\n      const aIndex = nrev[ntyp[a]];\r\n      const bIndex = nrev[ntyp[b]];\r\n      if (aIndex === bIndex) {\r\n        if (a.length === b.length) {\r\n          return superDestinations[a] - superDestinations[b];\r\n        } else {\r\n          return a.length - b.length;\r\n        }\r\n      } else {\r\n        return (\r\n          -Math.abs(aIndex - parentCatIndex) + Math.abs(bIndex - parentCatIndex)\r\n        );\r\n      }\r\n    }\r\n    return returner;\r\n  }\r\n\r\n  makeEmptyDirectionInfo(usedKeys: string[]): DirectionInfo {\r\n    let ut: UntransformedLabel[] = [];\r\n    let newArrows: Arrow[] = [];\r\n    let res: DirectionInfo = {\r\n      untransformedlabels: ut,\r\n      usedKeys: usedKeys,\r\n      arrows: newArrows,\r\n    };\r\n    return res;\r\n  }\r\n\r\n  getChildrenAndWeight(\r\n    nodeName: string,\r\n    superDestinations: NumberOfDestinations,\r\n    descendantAncestorList: NodeDic\r\n  ) {\r\n    let children: string[] = descendantAncestorList[nodeName];\r\n    children.sort(this.compareChildNodesFunction(nodeName, superDestinations));\r\n    const weights = children.map((d: string) => superDestinations[d]);\r\n    const sumweights = weights.reduce((a, b) => a + b, 0);\r\n    return { children: children, weights: weights, sumweights: sumweights };\r\n  }\r\n\r\n  computeYPositionOfLabel(\r\n    yfrom: number,\r\n    yto: number,\r\n    parentYval: number,\r\n    nodeName: string,\r\n    sameCategoryAsParent: boolean,\r\n    descendantAncestorList: NodeDic\r\n  ) {\r\n    let yval = (yto + yfrom) / 2;\r\n    if (sameCategoryAsParent && Math.abs(yval - parentYval) < 0.05) {\r\n      let distanceToEnd = this.followGraph(\r\n        nodeName,\r\n        descendantAncestorList,\r\n        (n: string) => true\r\n      );\r\n      yval += 0.4 * (((distanceToEnd + 2) % 2) * 2 - 1); //adding 2 because distance to end could be -1\r\n    }\r\n    return yval;\r\n  }\r\n\r\n  computeXPositionOfLabel(\r\n    childNodeName: string,\r\n    childCategory: string,\r\n    descendantAncestorList: NodeDic,\r\n    previousElementsInSameCategory: number,\r\n    xDirection: (x: number) => number,\r\n    nodeExtremas: NodeExtremas\r\n  ): number {\r\n    let remainingElements = this.followGraph(\r\n      childNodeName,\r\n      descendantAncestorList,\r\n      (d: string) => this.NodeType[d] === childCategory\r\n    );\r\n    if (\r\n      //remainingElements===-1 means that the graph ends there but it should not be shifted to the left (or the right depending on xdirection) unless it is in left-most or right-most category\r\n      remainingElements === -1 &&\r\n      childCategory !== nodeExtremas.min &&\r\n      childCategory !== nodeExtremas.max\r\n    ) {\r\n      remainingElements = 0;\r\n    }\r\n    const xval = xDirection(\r\n      (1 + previousElementsInSameCategory) /\r\n        (2 + previousElementsInSameCategory + remainingElements)\r\n    );\r\n    return xval;\r\n  }\r\n\r\n  createUniqueKey(nodeName: string, usedKeys: string[]) {\r\n    let key = nodeName;\r\n    while (usedKeys.includes(key)) {\r\n      key += \"*\";\r\n    }\r\n    return key;\r\n  }\r\n\r\n  getArrowType(\r\n    parentType: string,\r\n    childType: string,\r\n    xDirection: (x: number) => number\r\n  ) {\r\n    if (xDirection(0.2) === 0.2) {\r\n      return parentType === NodeType.CAUSE_CATEGORY ? \"no-arrow\" : \"arrow\";\r\n    }\r\n    return childType === NodeType.CAUSE_CATEGORY ? \"no-arrow\" : \"arrow\";\r\n  }\r\n\r\n  followMaximumSumOfSummary(\r\n    nodeName: string,\r\n    nodeDic: NodeDic,\r\n    continueTest: (name: string) => boolean,\r\n    summary: (name: string) => number\r\n  ): number {\r\n    if (!continueTest(nodeName)) {\r\n      return 0;\r\n    }\r\n    if (nodeDic[nodeName].length === 0) {\r\n      return summary(nodeName);\r\n    }\r\n    let tmp = nodeDic[nodeName].map((d: string) => {\r\n      return this.followMaximumSumOfSummary(d, nodeDic, continueTest, summary);\r\n    });\r\n    return Math.max(...tmp) + summary(nodeName);\r\n  }\r\n\r\n  followGraph(\r\n    nodeName: string,\r\n    nodeDic: NodeDic,\r\n    continueTest: (name: string) => boolean\r\n  ): number {\r\n    if (nodeDic[nodeName].length === 0 || !continueTest(nodeName)) {\r\n      return -1;\r\n    } else {\r\n      let tmp = nodeDic[nodeName].map((d: string) => {\r\n        return this.followGraph(d, nodeDic, continueTest);\r\n      });\r\n      return Math.max(...tmp) + 1;\r\n    }\r\n  }\r\n\r\n  getAncestors(nodeName: string): string[] {\r\n    return this.ancestorList[nodeName];\r\n  }\r\n\r\n  getDescendants(nodeName: string): string[] {\r\n    return this.descendantList[nodeName];\r\n  }\r\n\r\n  getLowestAndHighestCategory(listOfNodes: string[]): NodeExtremas {\r\n    let minindex = NODE_ORDER.length;\r\n    let maxindex = 0;\r\n    let categoriesPresent: NodeType[] = [];\r\n    listOfNodes.forEach((d: string) => {\r\n      categoriesPresent.push(this.NodeType[d]);\r\n      let i = NODE_ORDER.indexOf(this.NodeType[d]);\r\n      if (i > maxindex) {\r\n        maxindex = i;\r\n      }\r\n      if (i < minindex) {\r\n        minindex = i;\r\n      }\r\n    });\r\n    let visitedNodesInOrder = NODE_ORDER.filter((d: NodeType) => {\r\n      return categoriesPresent.includes(d);\r\n    });\r\n    let res = {\r\n      min: NODE_ORDER[minindex],\r\n      max: NODE_ORDER[maxindex],\r\n      nodeCategories: visitedNodesInOrder,\r\n    };\r\n    return res;\r\n  }\r\n\r\n  getColorDic(){\r\n    return this.colorDic;\r\n  }\r\n}\r\n","interface NodeDic {\r\n    [nodeName: string]: string[];\r\n  }\r\n\r\nexport default function kahnSort(nodesToBeSorted: string[], backwardEdges: NodeDic, forwardEdge: NodeDic){\r\n    let removableNodes: string[]=[];\r\n    let nonRemovableNodes: string[]=[];\r\n    let res: string[]=[];\r\n    nodesToBeSorted.forEach((factorname) => {\r\n        if(backwardEdges[factorname].every( (ancestor) => {  return !nodesToBeSorted.includes(ancestor)})){\r\n            removableNodes.push(factorname);\r\n        }\r\n        else{\r\n            nonRemovableNodes.push(factorname);\r\n        }\r\n    })\r\n    let count=0\r\n    while(nonRemovableNodes.length>0 && count<1000){\r\n        let candidate=nonRemovableNodes.shift()\r\n        let candidateAncestors=backwardEdges[candidate!]\r\n        let accept= candidateAncestors.every((d:string) => {\r\n            return removableNodes.includes(d)\r\n        });\r\n        if(accept){\r\n            removableNodes.push(candidate!)\r\n        }\r\n        else{\r\n            nonRemovableNodes.push(candidate!)\r\n        }\r\n        count++;\r\n    }\r\n    if(count===1000){\r\n        throw \"Could not fit the nodes \"+nonRemovableNodes.toString() + \" into the graph\"\r\n    }\r\n    res=res.concat(removableNodes)\r\n    return res\r\n\r\n}","import * as d3 from \"d3\";\r\nimport d3Tip from \"d3-tip\";\r\nimport RelationLinks, {\r\n  Arrow,\r\n  NodeType,\r\n  NODE_ORDER,\r\n  PlottingInfo,\r\n  TransformedLabel,\r\n  NodeExtremas\r\n} from \"../models/RelationLinks\";\r\nimport { ALTERNATING_COLORS, getDivWidth } from \"./Helpers\";\r\nimport \"./RelationLinkViz.css\";\r\n\r\ninterface PlottingNodeDicValue {\r\n  bbox: SVGRect;\r\n  x: number;\r\n  y: number;\r\n  x_relative: number;\r\n  cat: string;\r\n  nodeName: string;\r\n}\r\n\r\n\r\ninterface PlottingNodeDic {\r\n  [key: string]: PlottingNodeDicValue;\r\n}\r\n\r\ninterface ArrowExtender {\r\n  x1: number;\r\n  x2: number;\r\n  y1: number;\r\n  y2: number;\r\n}\r\n\r\ninterface ArrowPlottingObject extends Arrow, ArrowExtender {}\r\n\r\n\r\n\r\nexport default class RelationLinkViz {\r\n  constructor(\r\n    canvas: HTMLElement | null,\r\n    rdat: RelationLinks,\r\n    elementInFocus: string,\r\n    changeElementInFocus: (d: string) => void\r\n  ) {\r\n    const width = getDivWidth(canvas);\r\n    console.log(\"wdth\");\r\n    console.log(width);\r\n    const pdat: PlottingInfo = rdat.makePlottingInstructions(elementInFocus);\r\n    const transformedLabels = pdat.transformedLabels;\r\n    const arrows = pdat.arrows;\r\n    let nodeExtremas= pdat.nodeExtremas\r\n    if(nodeExtremas.min===nodeExtremas.max){\r\n      nodeExtremas.min=NODE_ORDER[0]\r\n      nodeExtremas.max=NODE_ORDER[NODE_ORDER.length-1]\r\n    }\r\n\r\n    console.log(\"transformedlabels\");\r\n    console.log(transformedLabels);\r\n    console.log(pdat.xDivisions);\r\n\r\n    const xDivisions = pdat.xDivisions;\r\n    const svg = d3\r\n      .select(canvas)\r\n      .append(\"svg\")\r\n      .attr(\"width\", Math.max(width - 10, 800))\r\n      .attr(\"height\", 1000);\r\n\r\n    const maxX = Math.max(getMax(transformedLabels, \"x\"),0.01); //making sure that x is positive to handle the case where there are only one variable.\r\n    const maxY = getMax(transformedLabels, \"y\");\r\n\r\n    const x = d3\r\n      .scaleLinear()\r\n      .domain([-maxX * 0.05, maxX * 1.05])\r\n      .range([0.1, Math.max(width - 10, 800) * 0.9]);\r\n\r\n    const yfromDomain = -0.5;\r\n    const ytoDomain = Math.max(10, maxY);\r\n    const y = d3.scaleLinear().domain([yfromDomain, ytoDomain]).range([0, 800]);\r\n\r\n    const backgroundBoxes = svg\r\n      .selectAll(\"rect\")\r\n      .data(xDivisions)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d: any) => x(d.x0))\r\n      .attr(\"width\", (d: any) => x(d.x0 + d.width) - x(d.x0))\r\n      .attr(\"y\", y(yfromDomain))\r\n      .attr(\"height\", y(ytoDomain) - y(yfromDomain))\r\n      .attr(\"fill\", function (d: any, i: number) {\r\n        return ALTERNATING_COLORS[i % 2];\r\n      })\r\n      .attr(\"opacity\", 0.5);\r\n\r\n\r\n\r\n    const stext = svg\r\n      .selectAll(\"text\")\r\n      .data(transformedLabels, function (d: any) {\r\n        return d.nodeName;\r\n      })\r\n      .enter()\r\n      .append(\"text\")\r\n      .attr(\"y\", (d: any) => y(d.y) as number)\r\n      .attr(\"x\", (d: any) => x(d.x) as number)\r\n      .text((d: any) => d.nodeName)\r\n      .attr(\"text-anchor\", (d: any) => {\r\n        if (d.cat === nodeExtremas.min) {\r\n          return \"start\";\r\n        }\r\n        if (d.cat === nodeExtremas.max) {\r\n          return \"end\";\r\n        } else {\r\n          return \"middle\";\r\n        }\r\n      })\r\n      .style(\"fill\", function (d: any) {\r\n        return d.cat === NodeType.CAUSE_CATEGORY\r\n          ? null\r\n          : d.nodeName === elementInFocus\r\n          ? \"#551A8B\"\r\n          : \"#0000EE\";\r\n      })\r\n      .style(\"text-decoration\", function (d: any) {\r\n        return d.cat === NodeType.CAUSE_CATEGORY ? null : \"underline\";\r\n      })\r\n      .style(\"font-weight\", function (d: any) {\r\n        return d.nodeName === elementInFocus ? 700 : null;\r\n      })\r\n      .style(\"cursor\", function (d: any) {\r\n        return d.cat === NodeType.CAUSE_CATEGORY ? null : \"pointer\";\r\n      })\r\n      .attr(\"alignment-baseline\", \"central\")\r\n      .on(\"click\", function (e: Event, d: TransformedLabel) {\r\n        changeElementInFocus(d.nodeName);\r\n      })\r\n      .call(insertBB);\r\n    stext.each(function (d: any, i: number) {\r\n      console.log(this.getBBox());\r\n    });\r\n\r\n    console.log(transformedLabels);\r\n\r\n    let nodeDic: PlottingNodeDic = {};\r\n\r\n    transformedLabels.forEach((ut: any) => {\r\n      nodeDic[ut.key] = ut;\r\n    });\r\n\r\n    let adjustedArrows = arrows.map((a: Arrow) => {\r\n      return {\r\n        ...a,\r\n        ...computeArrowEndPoints(nodeDic[a.from], nodeDic[a.to], x, y, nodeExtremas),\r\n      };\r\n    });\r\n    console.log(adjustedArrows);\r\n    console.log(nodeDic);\r\n\r\n    //taken from https://stackoverflow.com/questions/36579339/how-to-draw-line-with-arrow-using-d3-js\r\n    svg\r\n      .append(\"svg:defs\")\r\n      .append(\"svg:marker\")\r\n      .attr(\"id\", \"triangle\")\r\n      .attr(\"refX\", 3)\r\n      .attr(\"refY\", 3)\r\n      .attr(\"markerWidth\", 30)\r\n      .attr(\"markerHeight\", 30)\r\n      .attr(\"orient\", \"auto\")\r\n      .append(\"path\")\r\n      .attr(\"d\", \"M 0 0 6 3 0 6 1.5 3\")\r\n      .style(\"fill\", \"black\");\r\n\r\n    d3.select(\".arrowexplanation\").remove(); //removes any old visible tooltips that was perhaps not removed by a mouseout event (for example because the mouse teleported instantanously by entering/exiting a full-screen).\r\n\r\n    var tooltipdiv = d3.select('body')\r\n      .append(\"div\")\r\n      .attr(\"class\", \"arrowexplanation\")\r\n      .style(\"opacity\", 0);\r\n\r\n    const underlines = svg\r\n      .selectAll(\".underlines\")\r\n      .data(adjustedArrows, function (d: any) {\r\n        return d.from + \" - \" + d.to;\r\n      })\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"underlines\")\r\n      .attr(\"x1\", (d: any) => d.x1)\r\n      .attr(\"y1\", (d: any) => d.y1)\r\n      .attr(\"x2\", (d: any) => d.x2)\r\n      .attr(\"y2\", (d: any) => d.y2)\r\n      .attr(\"stroke-width\", \"1\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"marker-end\", (d: any) => {\r\n        return d.type === \"arrow\" ? \"url(#triangle)\" : null;\r\n      });\r\n\r\n    const overlines = svg\r\n      .selectAll(\".overlines\")\r\n      .data(adjustedArrows, function (d: any) {\r\n        return d.from + \" - \" + d.to;\r\n      })\r\n      .enter()\r\n      .append(\"line\")\r\n      .attr(\"class\", \"overlines\")\r\n      .attr(\"x1\", (d: any) => d.x1)\r\n      .attr(\"y1\", (d: any) => d.y1)\r\n      .attr(\"x2\", (d: any) => d.x2)\r\n      .attr(\"y2\", (d: any) => d.y2)\r\n      .attr(\"stroke-width\", \"15\")\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"opacity\", 0)\r\n      .attr(\"cursor\", \"pointer\")\r\n      .on(\"mouseover\", function (e: Event, d: ArrowPlottingObject) {\r\n        svg\r\n          .selectAll(\".underlines\")\r\n          .filter(function (ud: any) {\r\n            {\r\n              return d.from + \" - \" + d.to === ud.from + \" - \" + ud.to;\r\n            }\r\n          })\r\n          .attr(\"stroke-width\", 3);\r\n      })\r\n      .on(\"mouseout\", function (e: Event, d: ArrowPlottingObject) {\r\n        svg\r\n          .selectAll(\".underlines\")\r\n          .filter(function (ud: any) {\r\n            {\r\n              return d.from + \" - \" + d.to === ud.from + \" - \" + ud.to;\r\n            }\r\n          })\r\n          .attr(\"stroke-width\", 1);\r\n      })\r\n      .on(\"click\", function (e: MouseEvent, d: ArrowPlottingObject) {\r\n        var x = e.pageX; //x position within the element.\r\n        var y = e.pageY;  //y position within the element.\r\n        tooltipdiv\r\n          .style(\"opacity\", 1)\r\n          .html(`${rdat.arrowInterpretation(d.from, d.to)}`)\r\n          .style(\"left\", x + \"px\")\r\n          .style(\"top\", y + \"px\");\r\n        e.stopPropagation();\r\n      });\r\n    svg.on(\"click\", () => {\r\n      tooltipdiv.style(\"opacity\", 0);\r\n    });\r\n    svg.on(\"mouseleave\", () => {\r\n      tooltipdiv.style(\"opacity\", 0);\r\n    });\r\n  }\r\n\r\n  clear() {\r\n    console.log(\"inside clear\");\r\n    d3.select(\".arrowexplanation\").remove();\r\n    d3.select('body')\r\n      .append(\"div\")\r\n      .attr(\"class\", \"arrowexplanation\")\r\n      .style(\"opacity\", 0);\r\n    d3.select(\"svg\").remove();\r\n  }\r\n}\r\n\r\nfunction insertBB(selection: d3.Selection<any, any, any, any>) {\r\n  selection.each(function (d: any) {\r\n    d.bbox = this.getBBox();\r\n  });\r\n}\r\n\r\nfunction getMax(dataset: TransformedLabel[], coordinate: string): number {\r\n  let maxval: number | undefined;\r\n  if (coordinate === \"x\") {\r\n    maxval = d3.max(dataset, (d: TransformedLabel) => d.x);\r\n  } else if (coordinate === \"y\") {\r\n    maxval = d3.max(dataset, (d: TransformedLabel) => d.y);\r\n  } else {\r\n    maxval = 1.0;\r\n  }\r\n\r\n  if (maxval === undefined) {\r\n    maxval = 1.0;\r\n  }\r\n  return maxval;\r\n}\r\n\r\nfunction shiftTarget(\r\n  node: PlottingNodeDicValue,\r\n  scale: d3.ScaleLinear<number, number, never>\r\n): PlottingNodeDicValue {\r\n  if (node.cat === NodeType.INPUT) {\r\n    return {\r\n      ...node,\r\n      x: node.x + scale.invert(node.bbox.width) - scale.invert(0),\r\n    };\r\n  } else if (node.cat === NodeType.CAUSE) {\r\n    return {\r\n      ...node,\r\n      x: node.x - scale.invert(node.bbox.width) + scale.invert(0),\r\n    };\r\n  }\r\n  return node;\r\n}\r\n\r\nfunction computeArrowEndPoints(\r\n  fromNode: PlottingNodeDicValue,\r\n  toNode: PlottingNodeDicValue,\r\n  xscale: d3.ScaleLinear<number, number, never>,\r\n  yscale: d3.ScaleLinear<number, number, never>,\r\n  nodes: NodeExtremas\r\n) {\r\n  const x1org = xscale(fromNode.x);\r\n  const y1org = yscale(fromNode.y);\r\n  const x2org = xscale(toNode.x);\r\n  const y2org = yscale(toNode.y);\r\n  const aorg = (y2org - y1org) / (x2org - x1org);\r\n  let percentage = (Math.atan(aorg) * 2) / Math.PI;\r\n  let arrowExtender: ArrowExtender = { x1: 0, x2: 0, y1: 0, y2: 0 };\r\n\r\n  //Leftbox\r\n  let h1 = fromNode.bbox.height / 2;\r\n  let w1 = fromNode.bbox.width / 2;\r\n  let wOrg1 = fromNode.bbox.width / 2;\r\n  let R1 = h1 / (h1 + w1);\r\n  let xAdd1 = 0;\r\n  if (fromNode.cat === nodes.min) {\r\n    w1 = h1;\r\n    xAdd1 = wOrg1;\r\n  }\r\n  //Rightbox\r\n  let h2 = toNode.bbox.height / 2;\r\n  let w2 = toNode.bbox.width / 2;\r\n  let wOrg2 = toNode.bbox.width / 2;\r\n  let R2 = h2 / (h2 + w2);\r\n  let xAdd2 = 0;\r\n  if (toNode.cat === nodes.max) {\r\n    w2 = h2;\r\n    xAdd2 = -wOrg2;\r\n  }\r\n\r\n  // if (x1org + wOrg1 + xAdd1 > x2org - wOrg2 + xAdd2) {\r\n  //   //The two labels overlap in the y-direction, which means that we should increase the percentage to make sure that no arrows go backwards\r\n  //   percentage = Math.sign(percentage);\r\n  //   if (fromNode.cat === INPUT) {\r\n  //     w1 = fromNode.bbox.width / 5;\r\n  //   }\r\n  //   if (toNode.cat === CAUSE) {\r\n  //     w2 = toNode.bbox.width / 5;\r\n  //   }\r\n  // }\r\n\r\n  if (Math.abs(percentage) > R1) {\r\n    arrowExtender.y1 = y1org + Math.sign(percentage) * h1;\r\n    arrowExtender.x1 =\r\n      x1org - ((Math.abs(percentage) - R1) / (1 - R1)) * w1 + wOrg1 + xAdd1;\r\n  } else {\r\n    arrowExtender.y1 = y1org + percentage * h1;\r\n    arrowExtender.x1 = x1org + wOrg1 + xAdd1;\r\n  }\r\n\r\n  if (Math.abs(percentage) > R2) {\r\n    arrowExtender.y2 = y2org - Math.sign(percentage) * h2;\r\n    arrowExtender.x2 =\r\n      x2org + ((Math.abs(percentage) - R2) / (1 - R2)) * w2 - wOrg2 + xAdd2;\r\n  } else {\r\n    arrowExtender.y2 = y2org - percentage * h2;\r\n    arrowExtender.x2 = x2org - wOrg2 + xAdd2;\r\n  }\r\n\r\n  if (arrowExtender.x1 > arrowExtender.x2) {\r\n    let tmp = arrowExtender.x2;\r\n    arrowExtender.x2 = arrowExtender.x1;\r\n    arrowExtender.x1 = tmp;\r\n  }\r\n\r\n  return shortenArrow(arrowExtender, 10);\r\n}\r\n\r\nfunction shortenArrow(ae: ArrowExtender, pixels: number): ArrowExtender {\r\n  let a = (ae.y2 - ae.y1) / (ae.x2 - ae.x1);\r\n  let xchange = Math.floor(pixels / Math.sqrt(1 + a ** 2));\r\n  if (xchange > (ae.x2 - ae.x1) * 0.33) {\r\n    return ae;\r\n  }\r\n  return {\r\n    y1: ae.y1 + a * xchange,\r\n    x1: ae.x1 + xchange,\r\n    y2: ae.y2 - a * xchange,\r\n    x2: ae.x2 - xchange,\r\n  };\r\n}\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport RelationLinks, { RelationLinkJson } from '../models/RelationLinks';\r\nimport RelationLinkViz from './RelationLinkViz';\r\nimport './RelationLinkVizWrapper.css';\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\n\r\ninterface RelationLinkWrapperProps {\r\n\trdat: RelationLinks;\r\n\telementInFocus: string;\r\n\tchangeElementInFocus: (d:string) => void,\r\n}\r\n\r\nfunction createHandleChangeFunction(changeElementInFocus: (d:string) => void): (ev: React.ChangeEvent<HTMLSelectElement>) => void {\r\n\tconst handleChangeFunction = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n\t\tconst value: string = event.currentTarget.value;\r\n\t\tchangeElementInFocus(value);\r\n\t}\r\n\treturn handleChangeFunction\r\n}\r\n\r\n\r\n\r\n\r\nconst RelationLinkWrapper = (props: RelationLinkWrapperProps) => { //class ChartWrapper extends React.PureComponent<any,any> {\r\n\tconst chartArea = useRef(null);\r\n\tconst elementInFocus= props.elementInFocus;\r\n\tconst [chart, setChart] = useState<RelationLinkViz | null>(null);\r\n\tconst { width } = useWindowSize();\r\n\r\n\tconst createNewChart = function () {\r\n\t\tsetChart(new RelationLinkViz(chartArea.current, props.rdat, props.elementInFocus, props.changeElementInFocus));\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('width changed');\r\n\t\tif (chart) {\r\n\t\t\tchart.clear();\r\n\t\t\tcreateNewChart();\r\n\t\t}\r\n\t}, [width])\r\n\r\n\tuseEffect(() => {\r\n\t\tcreateNewChart();\r\n\t\treturn () => {\r\n\t\t\tconsole.log(\"indside unmounter hook\");\r\n\t\t\tconsole.log(chart);\r\n\t\t\tchart?.clear();\r\n\t\t}\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('dataset changed');\r\n\t\tif (chart) {\r\n\t\t\tchart.clear();\r\n\t\t\tcreateNewChart()\r\n\t\t}\r\n\t}, [elementInFocus]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>Graph showing how we use <select value={elementInFocus} onChange={createHandleChangeFunction(props.changeElementInFocus)}>\r\n\t\t\t\t{props.rdat.getAllPossibleNodes().map((d:string) => {\r\n\t\t\t\t\treturn <option value={d}>{d}</option>\r\n\t\t\t\t})}\r\n\t\t\t\t</select> in the model</p>\r\n\t\t<div className=\"containerRelationLink\" ref={chartArea} id=\"relationlinkcontainer\"/>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nfunction useWindowSize() {\r\n\tconst [windowSize, setWindowSize] = useState({\r\n\t\twidth: window.innerWidth,\r\n\t});\r\n\r\n\tlet resize_graphic = true;\r\n\tfunction changeWindowSize() {\r\n\t\tif (resize_graphic) {\r\n\t\t\tresize_graphic = false;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetWindowSize({ width: window.innerWidth });\r\n\t\t\t\tresize_graphic = true;\r\n\t\t\t}, 400);\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener(\"resize\", changeWindowSize);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"resize\", changeWindowSize);\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn windowSize;\r\n}\r\n\r\nexport default RelationLinkWrapper;","import { FactorAnswers } from \"../Factors\";\r\n\r\nexport enum ChangeStatus {\r\n  CHANGED = \"Changed\",\r\n  UNCHANGED = \"Unchanged\",\r\n}\r\n\r\nexport enum TypeStatus {\r\n  NUMERIC = \"Numeric\",\r\n  STRING = \"string\",\r\n}\r\n\r\nexport enum MissingStatus {\r\n  MISSING = \"Missing\",\r\n  NONMISSING = \"Non-missing\",\r\n}\r\n\r\nexport enum DimensionStatus {\r\n  YEARLY = \"Yearly\",\r\n  SINGLE = \"Single\",\r\n}\r\n\r\nexport enum StochasticStatus {\r\n  DETERMINISTIC = \"Deterministic\",\r\n  RANDOM = \"Random\",\r\n}\r\n\r\nexport interface ProbabilityObject {\r\n  [factorlevel: string]: number;\r\n}\r\n\r\nexport interface UpdateForm {\r\n  change: ChangeStatus;\r\n  type: TypeStatus;\r\n  missing: MissingStatus;\r\n  dimension: DimensionStatus;\r\n  random: StochasticStatus;\r\n  value:\r\n    | \"\"\r\n    | string\r\n    | number\r\n    | string[]\r\n    | number[]\r\n    | ProbabilityObject\r\n    | ProbabilityObject[];\r\n}\r\n\r\nexport interface UpdateDic {\r\n  [factorname: string]: UpdateForm;\r\n}\r\n\r\nexport class InputFactorToUpdateForm {\r\n  lastInputFactorAnswers: FactorAnswers;\r\n  lastOutputNodeValues: UpdateDic;\r\n  constructor() {\r\n    this.lastInputFactorAnswers = {};\r\n    this.lastOutputNodeValues = {};\r\n  }\r\n\r\n  createNewFactorVal(\r\n    factorname: string,\r\n    factorval: string | number\r\n  ): UpdateForm {\r\n    if (typeof factorval === \"number\") {\r\n      return {\r\n        change: ChangeStatus.CHANGED,\r\n        type: TypeStatus.NUMERIC,\r\n        missing: MissingStatus.NONMISSING,\r\n        dimension: DimensionStatus.SINGLE,\r\n        random: StochasticStatus.DETERMINISTIC,\r\n        value: factorval,\r\n      };\r\n    } else if (factorval === \"\") {\r\n      if (factorname === \"Age\") {\r\n        // we cant have Age to be missing. It will default to 0.\r\n        return {\r\n          change: ChangeStatus.CHANGED,\r\n          type: TypeStatus.NUMERIC,\r\n          missing: MissingStatus.NONMISSING,\r\n          dimension: DimensionStatus.SINGLE,\r\n          random: StochasticStatus.DETERMINISTIC,\r\n          value: 0,\r\n        };\r\n      } else {\r\n        return {\r\n          change: ChangeStatus.CHANGED,\r\n          type: TypeStatus.STRING,\r\n          missing: MissingStatus.MISSING,\r\n          dimension: DimensionStatus.SINGLE,\r\n          random: StochasticStatus.DETERMINISTIC,\r\n          value: factorval,\r\n        };\r\n      }\r\n    }\r\n    return {\r\n      change: ChangeStatus.CHANGED,\r\n      type: TypeStatus.STRING,\r\n      missing: MissingStatus.NONMISSING,\r\n      dimension: DimensionStatus.SINGLE,\r\n      random: StochasticStatus.DETERMINISTIC,\r\n      value: factorval,\r\n    };\r\n  }\r\n\r\n  update(newFactorAnswers: FactorAnswers) {\r\n    Object.entries(newFactorAnswers).forEach(([factorname, factorval]) => {\r\n      if (\r\n        factorname in this.lastInputFactorAnswers &&\r\n        this.lastInputFactorAnswers[factorname] === factorval\r\n      ) {\r\n        this.lastOutputNodeValues[factorname].change = ChangeStatus.UNCHANGED;\r\n      } else {\r\n        this.lastOutputNodeValues[factorname] = this.createNewFactorVal(\r\n          factorname,\r\n          factorval\r\n        );\r\n      }\r\n    });\r\n    this.lastInputFactorAnswers = newFactorAnswers;\r\n    return this.lastOutputNodeValues;\r\n  }\r\n}\r\n\r\nexport abstract class FormUpdater {\r\n    lastOutput: UpdateForm | null;\r\n    ancestors: string[];\r\n    ageFrom: number | null;\r\n    ageTo: number;\r\n    constructor(ancestors: string[], ageFrom: number | null, ageTo: number){\r\n        this.lastOutput=null;\r\n        this.ancestors=ancestors;\r\n        this.ageFrom = ageFrom;\r\n        this.ageTo = ageTo;\r\n    }\r\n\r\n    getAgeFrom(allPreviousUpdateForms: UpdateDic):number{\r\n        if(this.ageFrom===null){\r\n            return (allPreviousUpdateForms[\"Age\"].value as number)\r\n        }\r\n        else{\r\n            return this.ageFrom\r\n        }\r\n    }\r\n\r\n    getAgeTo(){\r\n        return this.ageTo\r\n    }\r\n\r\n\r\n\r\n    isUnchanged(allPreviousUpdateForms: UpdateDic):boolean{\r\n      return this.ancestors.every( (ancestor:string) => {\r\n        if(!(ancestor in allPreviousUpdateForms)){\r\n          throw ancestor+' not found in the updatedic'           \r\n        }\r\n        return allPreviousUpdateForms[ancestor].change===ChangeStatus.UNCHANGED\r\n      })\r\n    }\r\n\r\n    isMissing(allPreviousUpdateForms: UpdateDic): boolean {\r\n      return !this.ancestors.every( (ancestor:string) => {\r\n        if(!(ancestor in allPreviousUpdateForms)){\r\n          throw ancestor+' not found in the updatedic'           \r\n        }\r\n          return allPreviousUpdateForms[ancestor].missing===MissingStatus.NONMISSING\r\n      })\r\n    }\r\n\r\n    getNode(allPreviousUpdateForms: UpdateDic, nodename: string):UpdateForm{\r\n      if(this.ancestors.includes(nodename) && nodename in allPreviousUpdateForms){\r\n        return allPreviousUpdateForms[nodename]\r\n      }\r\n      else if(!this.ancestors.includes(nodename)){\r\n        throw \"The requested factor \"+ nodename+ \" was not present in its ancestors,\"+this.ancestors.toString()\r\n      }\r\n      else{\r\n        throw \"The requested factor \"+nodename+ \" was not present in the updatedic.\"\r\n      }\r\n    }\r\n\r\n    handleMissing(){\r\n      this.lastOutput={\r\n          change: ChangeStatus.CHANGED,\r\n          missing: MissingStatus.MISSING,\r\n          type: TypeStatus.STRING,\r\n          dimension: DimensionStatus.SINGLE,\r\n          random: StochasticStatus.DETERMINISTIC,\r\n          value: \"\"\r\n      }\r\n    }\r\n\r\n    ChangedAndMissing(){\r\n        return {\r\n            change: ChangeStatus.CHANGED,\r\n            missing: MissingStatus.NONMISSING\r\n        }\r\n    }\r\n\r\n    getAges(udic: UpdateDic){\r\n      return {ageFrom: this.getAgeFrom(udic), ageTo:this.getAgeTo(), age:(udic[\"Age\"].value as number)}\r\n    }\r\n\r\n    update(allPreviousUpdateForms: UpdateDic): UpdateForm{\r\n        if(this.lastOutput!== null && this.isUnchanged(allPreviousUpdateForms)){\r\n            this.lastOutput.change=ChangeStatus.UNCHANGED\r\n            return this.lastOutput\r\n        }\r\n        if(this.isMissing(allPreviousUpdateForms)){\r\n            this.handleMissing();\r\n            return this.lastOutput!; //it has just been changed to something which is not null.\r\n        }\r\n        this.lastOutput=this.compute(allPreviousUpdateForms);\r\n        return this.lastOutput;\r\n    }\r\n\r\n    abstract compute(allPreviousUpdateForms: UpdateDic): UpdateForm;\r\n}\r\n\r\nexport interface FormUpdaterDic {\r\n    [nodeName: string]: FormUpdater;\r\n}","import { ProbabilityKeyValue } from \"../models/ProbabilityKeyValue\";\r\n\r\nexport interface DataRow {\r\n    name: string,\r\n    totalProb: number,\r\n    innerCauses: ProbabilityKeyValue\r\n}\r\n\r\nexport type DataSet = DataRow[];\r\n\r\nexport const TEST_DATA: DataSet = [{ name: 'Corona', totalProb: 0.09, innerCauses: { partying: 0.45, smoking: 0.1 } },\r\n{ name: 'BOld age', totalProb: 0.8, innerCauses: { 'smoking': 0, partying: 0 } }, { name: 'Accidents', totalProb: 0.11, innerCauses: { partying: 0.1 } }];\r\n\r\nexport const TEST_DATA2: DataSet = [{ name: 'Corona', totalProb: 0.15, innerCauses: { partying: 0.05, smoking: 0.20 } },\r\n{ name: 'BOld age', totalProb: 0.7, innerCauses: { 'smoking': 0.02, partying: 0 } }, { name: 'Accidents', totalProb: 0.10, innerCauses: { partying: 0 } }];\r\n\r\n\r\n//To make the text-on-rect visualization in d3, I felt it was necessary to introduce AugmentedDataRow, but now I think there are other ways around it, so this will probably deleted in the future:\r\ninterface Id {\r\n    id: number\r\n}\r\n\r\nexport interface AugmentedDataRow extends DataRow, Id { }\r\n\r\nexport type AugmentedDataSet = AugmentedDataRow[];","import { ChangeStatus, UpdateDic, UpdateForm, FormUpdater, FormUpdaterDic, TypeStatus, DimensionStatus, StochasticStatus } from \"./UpdateFormInitialize\"\r\n\r\nclass SmokeSinceStop extends FormUpdater{\r\n\r\n    compute(allPreviousUpdateForms: UpdateDic):UpdateForm{\r\n        const SmokingStopped= this.getNode(allPreviousUpdateForms, \"SmokingStopped\").value as number;\r\n        const {ageFrom, ageTo, age} = this.getAges(allPreviousUpdateForms);\r\n        const newValue: number[]=[];\r\n        for(let i=0; i<ageTo-ageFrom+1; i++){\r\n            newValue.push(Math.max(0,i+SmokingStopped+(ageFrom-age)));\r\n        }\r\n        return {...this.ChangedAndMissing(),\r\n            type: TypeStatus.NUMERIC,\r\n            dimension: DimensionStatus.YEARLY,\r\n            random: StochasticStatus.DETERMINISTIC,\r\n            value: newValue\r\n        }\r\n    }\r\n}\r\n\r\nclass PhysicalTotal extends FormUpdater{\r\n\r\n    compute(allPreviousUpdateForms: UpdateDic):UpdateForm{\r\n        const physicalMedium=this.getNode(allPreviousUpdateForms, \"PhysicalMedium\").value as number;\r\n        const physicalHard=this.getNode(allPreviousUpdateForms, \"PhysicalHard\").value as number;\r\n        const newValue= 4*physicalMedium+8*physicalHard;\r\n        return {...this.ChangedAndMissing(),\r\n            type: TypeStatus.NUMERIC,\r\n            dimension: DimensionStatus.SINGLE,\r\n            random: StochasticStatus.DETERMINISTIC,\r\n            value: newValue\r\n        }\r\n    }\r\n}\r\n\r\nclass SmokeCumulative extends FormUpdater {\r\n\r\n    compute(allPreviousUpdateForms: UpdateDic):UpdateForm{\r\n        const SmokingStopped=this.getNode(allPreviousUpdateForms, \"SmokingStopped\").value as number;\r\n        const SmokingPastAmount=this.getNode(allPreviousUpdateForms, \"SmokePastAmount\").value as number;\r\n        const SmokeIntensity=this.getNode(allPreviousUpdateForms, \"SmokeIntensity\").value as number;\r\n        const SmokeDuration=this.getNode(allPreviousUpdateForms, \"SmokeDuration\").value as number;\r\n        const {ageFrom, ageTo, age} = this.getAges(allPreviousUpdateForms);\r\n        let newValue: number[]=[];\r\n        for(let i=0; i<ageTo-ageFrom+1; i++){\r\n            if(ageFrom+i<age){\r\n                if(ageFrom+i<age-SmokingStopped){\r\n                    const smokeStart=age-SmokingStopped-SmokeDuration\r\n                    newValue.push(Math.max(0,SmokingPastAmount*(ageFrom+i-smokeStart)/SmokeDuration))\r\n                }\r\n                else{\r\n                    newValue.push(SmokeDuration*SmokingPastAmount)\r\n                }\r\n            }\r\n            else{\r\n                newValue.push(SmokeDuration*SmokingPastAmount+SmokeIntensity*(ageFrom+i-age));\r\n            }\r\n        }\r\n        return {...this.ChangedAndMissing(),\r\n            type: TypeStatus.NUMERIC,\r\n            dimension: DimensionStatus.YEARLY,\r\n            random: StochasticStatus.DETERMINISTIC,\r\n            value: newValue\r\n        }\r\n    }\r\n}\r\n\r\nclass SmokeTypicalAmount extends FormUpdater{\r\n    compute(allPreviousUpdateForms: UpdateDic):UpdateForm{\r\n        const SmokingStopped=this.getNode(allPreviousUpdateForms, \"SmokingStopped\").value as number;\r\n        const SmokingPastAmount=this.getNode(allPreviousUpdateForms, \"SmokePastAmount\").value as number;\r\n        const SmokeIntensity=this.getNode(allPreviousUpdateForms, \"SmokeIntensity\").value as number;\r\n        const SmokeDuration=this.getNode(allPreviousUpdateForms, \"SmokeDuration\").value as number;\r\n        const {ageFrom, ageTo, age} = this.getAges(allPreviousUpdateForms);\r\n        let newValue: number[]=[];\r\n        const pastAverage=SmokeDuration*SmokingPastAmount/(Math.max(1,SmokeDuration))\r\n        for(let i=0; i<ageTo-ageFrom+1; i++){\r\n            if(ageFrom+i<=age){\r\n                if(ageFrom+i<age-SmokingStopped-SmokeDuration){\r\n                    newValue.push(0)\r\n                }\r\n                else{\r\n                    newValue.push(pastAverage)\r\n                }\r\n            }\r\n            else{\r\n                if(SmokeIntensity>0.01){\r\n                    let proportion= SmokeDuration/(SmokeDuration+ageFrom+i-age)\r\n                    newValue.push(proportion*pastAverage+(1-proportion)*SmokeIntensity)\r\n                }\r\n                else{\r\n                    newValue.push(pastAverage);\r\n                }\r\n            }\r\n        }\r\n        return {...this.ChangedAndMissing(),\r\n            type: TypeStatus.NUMERIC,\r\n            dimension: DimensionStatus.YEARLY,\r\n            random: StochasticStatus.DETERMINISTIC,\r\n            value: newValue\r\n        }\r\n    }\r\n}\r\n\r\nclass OralContraceptiveEver extends FormUpdater{\r\n    compute(allPreviousUpdateForms: UpdateDic):UpdateForm{\r\n        const oralStatus=this.getNode(allPreviousUpdateForms, \"OralContraceptiveStatus\").value as string;\r\n        return {...this.ChangedAndMissing(),\r\n            type: TypeStatus.STRING,\r\n            dimension: DimensionStatus.SINGLE,\r\n            random: StochasticStatus.DETERMINISTIC,\r\n            value: oralStatus=== 'Never used' ? \"No\" :\"Yes\"\r\n        }\r\n    }\r\n}\r\n\r\nclass OralContraceptiveSinceStop extends FormUpdater{\r\n    compute(allPreviousUpdateForms: UpdateDic):UpdateForm{\r\n        const oralStatus=this.getNode(allPreviousUpdateForms, \"OralContraceptiveStatus\").value as string;\r\n        const oralStopped=this.getNode(allPreviousUpdateForms, \"OralContraceptiveStopped\").value as number;\r\n        const oralTillStop=this.getNode(allPreviousUpdateForms, \"OralContraceptiveTillStop\").value as number;\r\n        if(oralStatus===\"Never used\"){\r\n            return {\r\n                ...this.ChangedAndMissing(),\r\n                type: TypeStatus.NUMERIC,\r\n                dimension: DimensionStatus.SINGLE,\r\n                random: StochasticStatus.DETERMINISTIC,\r\n                value: 0\r\n            }\r\n        }\r\n        let newValue: number[]=[];\r\n        if(oralStatus===\"Current user\"){\r\n            const {ageFrom, ageTo, age} = this.getAges(allPreviousUpdateForms);\r\n            for(let i=0; i<ageTo-ageFrom+1; i++){\r\n                newValue.push(Math.max(0, ageFrom+i-age-oralTillStop))\r\n            }\r\n        }\r\n        if(oralStatus === \"Former user\"){\r\n            const {ageFrom, ageTo, age} = this.getAges(allPreviousUpdateForms);\r\n            for(let i=0; i<ageTo-ageFrom+1; i++){\r\n                newValue.push(Math.max(0, ageFrom+i-age+oralStopped))\r\n            }\r\n        }\r\n        return {\r\n            ...this.ChangedAndMissing(),\r\n            type: TypeStatus.NUMERIC,\r\n            dimension: DimensionStatus.YEARLY,\r\n            random: StochasticStatus.DETERMINISTIC,\r\n            value: newValue\r\n        }\r\n    }\r\n}\r\n\r\ninterface FormUpdaterInitializers {\r\n    [key: string]: (ancestors: string[], ageFrom: null | number, ageTo: number) => FormUpdater\r\n}\r\n\r\nfunction packConstructor(classDefinition: any): (ancestors: string[], ageFrom: null | number, ageTo: number) => FormUpdater{\r\n    return (ancestors: string[], ageFrom: null | number, ageTo: number) => new classDefinition(ancestors, ageFrom, ageTo)\r\n}\r\n\r\nexport const ComputedFactorClasses: FormUpdaterInitializers={\r\n    \"SmokeSinceStop\": packConstructor(SmokeSinceStop),\r\n    \"PhysicalTotal\": packConstructor(PhysicalTotal),\r\n    \"SmokeCumulative\": packConstructor(SmokeCumulative),\r\n    \"SmokeTypicalAmount\": packConstructor(SmokeTypicalAmount),\r\n    \"OralContraceptiveEver\": packConstructor(OralContraceptiveEver),\r\n    \"OralContraceptiveSinceStop\": packConstructor(OralContraceptiveSinceStop),\r\n}\r\n\r\n","import { CalculationFacade } from \"../../components/Calculations/CalculationsFacade\";\r\nimport { SurvivalCurveData } from \"../../components/Calculations/SurvivalCurveData\";\r\nimport { DataRow } from \"../../components/PlottingData\";\r\nimport { FactorAnswers } from \"../Factors\";\r\nimport RelationLinks, {NodeType} from \"../RelationLinks\";\r\nimport {ComputedFactorClasses} from \"./ComputedFactors\";\r\nimport { DimensionStatus, FormUpdater, InputFactorToUpdateForm, MissingStatus, UpdateDic } from \"./UpdateFormInitialize\";\r\n\r\nfunction updateDicToFactorAnswers(udic:UpdateDic){\r\n    let res: FactorAnswers={}\r\n    Object.entries(udic).forEach(  ([factorname, updateform])  => {\r\n        if(updateform.missing===MissingStatus.MISSING){\r\n            res[factorname]=\"\"\r\n        }\r\n        else if(updateform.dimension===DimensionStatus.YEARLY){\r\n            res[factorname]=(updateform.value as number[] | string[])[0].toString();\r\n        }\r\n        else{\r\n            res[factorname]=(updateform.value as number | string).toString();\r\n        }\r\n    } )\r\n    console.log(\"back to factoranswers\")\r\n    console.log(res);\r\n    return res\r\n}\r\nexport default class ComputeController {\r\n    formUpdaters: FormUpdater[];\r\n    inputFactorTreater: InputFactorToUpdateForm;\r\n    formUpdaterNames: string[];\r\n    ageFrom: null | number;\r\n    ageTo:number;\r\n    calculationFacade: CalculationFacade;\r\n\r\n    constructor(rdat: RelationLinks, ageFrom: null | number, ageTo: number=120, calculationFacade: CalculationFacade){\r\n        this.formUpdaters=[];\r\n        this.formUpdaterNames=[];\r\n        this.inputFactorTreater=new InputFactorToUpdateForm();\r\n        this.ageFrom=ageFrom\r\n        this.ageTo=ageTo\r\n        this.calculationFacade=calculationFacade\r\n        this.initialize(rdat)        \r\n    }\r\n\r\n    initialize(rdat: RelationLinks){\r\n        rdat.sortedNodes[NodeType.COMPUTED_FACTOR].forEach((computedFactorName) => {\r\n            let ancestors= rdat.getAncestors(computedFactorName)\r\n            if(!(computedFactorName in ComputedFactorClasses)){\r\n                throw computedFactorName.toString()+\" was not defined as a computed factor\";\r\n            }\r\n            this.formUpdaters.push(ComputedFactorClasses[computedFactorName](ancestors, this.ageFrom, this.ageTo))\r\n            this.formUpdaterNames.push(computedFactorName);\r\n        })\r\n    }\r\n\r\n    computeInnerProbabilities(factorAnswers: FactorAnswers):DataRow[] { // Promise<DataRow[]> {\r\n        return this.calculationFacade.calculateInnerProbabilities(updateDicToFactorAnswers(this.compute(factorAnswers)));\r\n        // return this.compute(factorAnswers).then((udic:UpdateDic) => {\r\n        //     return updateDicToFactorAnswers(udic);\r\n        // }).then((fAnswers: FactorAnswers) => {\r\n        //     return this.calculationFacade.calculateInnerProbabilities(fAnswers);\r\n        // })\r\n    }\r\n\r\n    compute(factorAnswers: FactorAnswers): UpdateDic { //Promise<UpdateDic>{\r\n        let res:UpdateDic= this.inputFactorTreater.update(factorAnswers);\r\n        this.formUpdaters.forEach((formUpdater,i) => {\r\n            res[this.formUpdaterNames[i]]=formUpdater.update(res);\r\n        })\r\n        return res\r\n        //return new Promise((resolve) => { resolve(res)});\r\n    }\r\n\r\n    computeSurvivalData(factorAnswers: FactorAnswers): SurvivalCurveData[] { //Promise<SurvivalCurveData[]>{\r\n        return this.calculationFacade.calculateSurvivalCurve(updateDicToFactorAnswers(this.compute(factorAnswers)));\r\n        // return this.compute(factorAnswers).then((udic:UpdateDic) => {\r\n        //     return updateDicToFactorAnswers(udic);\r\n        // }).then((fAnswers: FactorAnswers) => {\r\n        //     return this.calculationFacade.calculateSurvivalCurve(fAnswers);\r\n        // })\r\n    }\r\n\r\n\r\n} ","export interface FrequencyJson {\r\n    age_classification: number[] | never[];\r\n    age_prevalences: number[];\r\n}\r\n\r\nclass FrequencyTable {\r\n    private readonly AGE_INTERVALS: number[] = [1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\r\n\r\n    //todo: implement ageClassification define intervals\r\n    ageClassifications: number[]\r\n    agePrevalences: number[]\r\n\r\n    public constructor(json: FrequencyJson) {\r\n        this.ageClassifications = json.age_classification;\r\n        if(json.age_prevalences.length -1 !== this.AGE_INTERVALS.length) {\r\n            throw new Error(\"Age Prevalence list does not match predefined age intervals\");\r\n        }\r\n        this.agePrevalences = json.age_prevalences;\r\n    }\r\n\r\n    public getPrevalence = (age: number): number => {\r\n        let indexOfAgePrevalance = this.AGE_INTERVALS.findIndex((ageInterval: number) => age < ageInterval);\r\n        if (indexOfAgePrevalance === -1) {\r\n            return this.agePrevalences[this.agePrevalences.length - 1];\r\n        }\r\n        return this.agePrevalences[indexOfAgePrevalance]\r\n    }\r\n}\r\n\r\nexport default FrequencyTable;","export class Monomial {\r\n    coefficient: number;\r\n    exponents: number[];\r\n\r\n    constructor(coefficent: number, exponents: number[]) {\r\n        this.coefficient = coefficent;\r\n        this.exponents = exponents;\r\n    }\r\n\r\n    evaluate(submittedFactorAnswers: number[]): number {\r\n        // assert(submittedFactorAnswers.length === this.exponents.length);\r\n        let res = this.coefficient;\r\n        for (let i = 0; i < this.exponents.length; i++) {\r\n            res = res * Math.pow(submittedFactorAnswers[i], this.exponents[i])\r\n        }\r\n        return res;\r\n    }\r\n}","import { Monomial } from \"./Monomial\";\r\n\r\nexport class Polynomial {\r\n    monomials: Monomial[] = [];\r\n\r\n    constructor(monomials: Monomial[]) {\r\n        this.monomials = monomials;\r\n    }\r\n\r\n    evaluate(submittedFactorAnswers: number[]): number {\r\n        let res = 0;\r\n        this.monomials.forEach(monomial => \r\n            res += monomial.evaluate(submittedFactorAnswers)    \r\n        );\r\n        return res;\r\n    }\r\n}","import { RiskRatioTableCellInterface } from \"./RiskRatioTableCellInterface\";\r\n\r\nexport class EnumeratedValue implements RiskRatioTableCellInterface {\r\n    value: string;\r\n\r\n    constructor(value: string) {\r\n        this.value = value;\r\n    }\r\n\r\n    getValueInCell(): string {\r\n        return this.value\r\n    }\r\n\r\n    isInputWithinCell(input: string): boolean {\r\n        //console.log(\"input=\"+ input.toString()+ \"(\"+ (typeof input).toString() +\")\");\r\n        return (input as string)=== this.value;\r\n    }\r\n}","import { RiskRatioTableCellInterface } from \"./RiskRatioTableCellInterface\";\r\n\r\nexport class NumericInterval implements RiskRatioTableCellInterface {\r\n    endPointFrom: number;\r\n    endPointTo: number;\r\n    constructor(endPointFrom: string, endPointTo: string) {\r\n        if (!endPointFrom && !endPointTo) {\r\n            throw new Error(\"-infinity to infinity is not allowed as interval\")\r\n        }\r\n        if (endPointFrom) {\r\n            this.endPointFrom = +endPointFrom\r\n        } else {\r\n            this.endPointFrom = -Infinity\r\n        }\r\n        if (endPointTo) {\r\n            this.endPointTo = +endPointTo\r\n        } else {\r\n            this.endPointTo = Infinity\r\n        }\r\n    }\r\n\r\n    getValueInCell(): string | number {\r\n        if(this.endPointFrom === -Infinity) {\r\n            return this.endPointTo - 0.1\r\n        }\r\n        \r\n        if(this.endPointTo === Infinity) {\r\n            return this.endPointFrom + 0.1\r\n        }\r\n        return this.endPointFrom + (this.endPointTo - this.endPointFrom) / 2\r\n    }\r\n\r\n    isInputWithinCell(input: number): boolean {\r\n        return this.endPointFrom < input && input <= this.endPointTo;\r\n    }\r\n}\r\n","import { RiskRatioTableCellInterface } from \"./RiskRatioTableCellInterface\";\r\n\r\nexport class NumericValue implements RiskRatioTableCellInterface {\r\n    value: number;\r\n\r\n    constructor(number: string) {\r\n        this.value = +number;\r\n    }\r\n    getValueInCell(): number {\r\n        return this.value\r\n    }\r\n\r\n    isInputWithinCell(input: string | number | boolean): boolean {\r\n        return +input === this.value;\r\n    }\r\n}\r\n","import { Monomial } from \"./Monomial\";\r\nimport { Polynomial } from \"./Polynomial\";\r\nimport { EnumeratedValue } from \"./RiskRatioTableCell/EnumerateValue\";\r\nimport { NumericInterval } from \"./RiskRatioTableCell/NumericInterval\";\r\nimport { NumericValue } from \"./RiskRatioTableCell/NumericValue\";\r\nimport { RiskRatioTableCellInterface } from \"./RiskRatioTableCell/RiskRatioTableCellInterface\";\r\n\r\nexport const parseStringToInputType = (input: string): RiskRatioTableCellInterface => {\r\n    const intervalRegex = new RegExp('^([0-9.]*)[,+]([0-9.]*)$');\r\n    const singleNumericRegex = new RegExp('^([0-9.]*)$');\r\n    let intervalResult = intervalRegex.exec(input);\r\n    if (intervalResult) {\r\n        return new NumericInterval(intervalResult[1], intervalResult[2])\r\n    }\r\n\r\n    let singleNumericResult = singleNumericRegex.exec(input)\r\n    if (singleNumericResult) {\r\n        return new NumericValue(singleNumericResult[1])\r\n    }\r\n    return new EnumeratedValue(input);\r\n}\r\n\r\nexport const parseStringToPolynomial = (input: string): Polynomial => {\r\n    let polynomialTermRegex = new RegExp('[+]?(?<coef>[-]?[.0-9e-]+)[*]?(?<expo>[x0-9^*]*)', 'g')\r\n    let variablesRegex = new RegExp('(x\\\\d+)')\r\n    let regexResult\r\n    let numberOfVariables = new Set(input.match(variablesRegex)).size\r\n    let monomials = []\r\n    while ((regexResult = polynomialTermRegex.exec(input)) !== null) {\r\n        if (!regexResult.groups?.coef) {\r\n            continue\r\n        }\r\n        monomials.push(new Monomial(+regexResult.groups.coef, parseExponents(regexResult.groups?.expo, numberOfVariables)))\r\n    }\r\n\r\n    return new Polynomial(monomials);\r\n}\r\n\r\nconst parseExponents = (input: string, numberOfVariables: number): number[] => {\r\n    let exponentRegex = new RegExp('([0-9]+)(?:\\\\^)([0-9]+)\\\\*?', 'g')\r\n\r\n    if (input === '') {\r\n        return []\r\n    }\r\n\r\n    let exponents = new Array(numberOfVariables);\r\n    for (let i = 0; i < numberOfVariables; ++i) {\r\n        exponents[i] = 0;\r\n    }\r\n\r\n    let regexResult\r\n    while ((regexResult = exponentRegex.exec(input))) {\r\n        exponents.splice(+regexResult[1], 1, +regexResult[2])\r\n    }\r\n    return exponents;\r\n}","import { FactorAnswers } from \"../../models/Factors\";\r\nimport { parseStringToInputType, parseStringToPolynomial } from \"./ParsingFunctions\";\r\nimport { Polynomial } from \"./Polynomial\";\r\nimport { RiskRatioTableCellInterface } from \"./RiskRatioTableCell/RiskRatioTableCellInterface\";\r\n\r\nexport interface InterpolationTableJson {\r\n    domain: string[];\r\n    factors: string[];\r\n    interpolationPolynomial: string;\r\n    minValue: number | null;\r\n    maxValue: number | null;\r\n}\r\n\r\nexport class InterpolationEntry {\r\n    domain: RiskRatioTableCellInterface[] = [];\r\n    factors: string[]\r\n    minValue: number| null;\r\n    maxValue: number | null;\r\n    polynomial: Polynomial;\r\n\r\n    constructor(inputJson: InterpolationTableJson) {\r\n        inputJson.domain.forEach(element => this.domain.push(parseStringToInputType(element)))\r\n        this.minValue = inputJson.minValue;\r\n        this.maxValue = inputJson.maxValue;\r\n        this.factors = inputJson.factors;\r\n        this.polynomial = parseStringToPolynomial(inputJson.interpolationPolynomial);\r\n    }\r\n\r\n    getRelevantFactorAnswers = (sumbittedFactorAnswers: FactorAnswers): (string | number)[] => {\r\n        let res: (string | number)[] = []\r\n        this.factors.forEach(factor => res.push(sumbittedFactorAnswers[factor]))\r\n        return res;\r\n    }\r\n\r\n    isFactorAnswersInDomain(relevantFactorAnswers: (string  | number)[]) {\r\n        for (let i = 0; i < this.factors.length; i++) {\r\n            let isSubmittedFactorAnswerWithinCell = this.domain[i].isInputWithinCell(relevantFactorAnswers[i])\r\n            if (!isSubmittedFactorAnswerWithinCell) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    interpolateRR(submittedFactorAnswers: number[]) {\r\n        let res = this.polynomial.evaluate(submittedFactorAnswers)\r\n        if (this.minValue && res < this.minValue) return this.minValue;\r\n        if (this.maxValue && res > this.maxValue) return this.maxValue; \r\n        return res;\r\n    }\r\n}","import { parseStringToInputType } from \"./ParsingFunctions\";\r\nimport { RiskRatioTableCellInterface } from \"./RiskRatioTableCell/RiskRatioTableCellInterface\";\r\n\r\nexport class RiskRatioTableEntry {\r\n    factorValues: RiskRatioTableCellInterface[];\r\n    riskRatioValue: number;\r\n\r\n    constructor(factorValues: string[], riskRatioValue: number) {\r\n        this.riskRatioValue = riskRatioValue;\r\n        this.factorValues = factorValues.map(element => parseStringToInputType(element))\r\n    }\r\n\r\n    isFactorAnswersInDomain(relevantFactorAnswers: (string | number)[]) {\r\n        for (let i = 0; i < this.factorValues.length; i++) {\r\n            let isSubmittedFactorAnswerWithinCell = this.factorValues[i].isInputWithinCell(relevantFactorAnswers[i])\r\n            if (!isSubmittedFactorAnswerWithinCell) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isFactorAnswersInDomainExceptOneFactor(factorToMinimize: number, relevantFactorAnswers: (string | number)[]) {\r\n        for (let i = 0; i < this.factorValues.length; i++) {\r\n            if (i === factorToMinimize) {\r\n                continue;\r\n            }\r\n            let isSubmittedFactorAnswerWithinCell = this.factorValues[i].isInputWithinCell(relevantFactorAnswers[i])\r\n            if (!isSubmittedFactorAnswerWithinCell) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isSingleFactorInDomain(factorIndexToFind: number, factorAnswer: (string | number)) {\r\n        if (this.factorValues[factorIndexToFind].isInputWithinCell(factorAnswer)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import { FactorAnswers } from \"../../models/Factors\";\r\nimport { InterpolationEntry, InterpolationTableJson } from \"./InterpolationEntry\";\r\nimport { RiskRatioTableEntry } from \"./RiskRatioTableEntry\";\r\n\r\nexport interface RiskRatioTableJson {\r\n    riskFactorNames: string[];\r\n    interpolationTable: InterpolationTableJson[];\r\n    riskRatioTable: (string[] | number)[][];\r\n}\r\n\r\nexport interface MinimumRiskRatios {\r\n    [key: string]: number\r\n}\r\n\r\nclass RiskRatioTable {\r\n    factorNames: string[];\r\n    riskRatioTable: RiskRatioTableEntry[];\r\n    interpolation: InterpolationEntry[] = [];\r\n\r\n    constructor(json: RiskRatioTableJson) {\r\n        this.factorNames = json.riskFactorNames;\r\n        this.riskRatioTable = json.riskRatioTable.map(element => new RiskRatioTableEntry(element[0] as string[], element[1] as number))\r\n        json.interpolationTable.forEach(element => {\r\n            return this.interpolation.push(new InterpolationEntry(element))\r\n        });\r\n    }\r\n\r\n    getMinimumRRForSingleFactor(submittedFactorAnswers: FactorAnswers, factorToMinimize: string): number {\r\n        let indexOfFactor = this.factorNames.indexOf(factorToMinimize)\r\n        if (indexOfFactor === -1) {\r\n            return 1;\r\n        }\r\n\r\n        let riskRatiosToMinimize = this.riskRatioTable.filter(rrt => {\r\n            return rrt.isSingleFactorInDomain(indexOfFactor, submittedFactorAnswers[factorToMinimize])\r\n        }).map(rte => rte.riskRatioValue)\r\n\r\n        return Math.min(...riskRatiosToMinimize)\r\n    }\r\n\r\n    getMinimumRR() {\r\n        let riskRatioValues = this.riskRatioTable.map(rrte => rrte.riskRatioValue)\r\n        return Math.min(...riskRatioValues)\r\n    }\r\n\r\n    getMinimumRRFactors() {\r\n        let riskRatioValues = this.riskRatioTable.map(rrte => rrte.riskRatioValue)\r\n        let minimumIndex = riskRatioValues.indexOf(Math.min(...riskRatioValues))\r\n        let minRrte = this.riskRatioTable[minimumIndex]\r\n        let res: any = {}\r\n        this.factorNames.forEach((value, index) =>\r\n            res[value] = minRrte.factorValues[index]\r\n        )\r\n        return res\r\n    }\r\n\r\n    getRiskRatio(submittedFactorAnswers: FactorAnswers): number {\r\n        let relevantFactorAnswers = this.getRelevantFactorAnswers(submittedFactorAnswers);\r\n        for (let i = 0; i < this.riskRatioTable.length; i++) {\r\n            if (this.riskRatioTable[i].isFactorAnswersInDomain(relevantFactorAnswers)) {\r\n                return this.riskRatioTable[i].riskRatioValue;\r\n            }\r\n        }\r\n        return this.riskRatioTable[this.riskRatioTable.length-1].riskRatioValue; // tmp to make it run\r\n    }\r\n\r\n    private getRelevantFactorAnswers = (sumbittedFactorAnswers: FactorAnswers): (string  | number)[] => {\r\n        let res: (string  | number)[] = []\r\n        this.factorNames.forEach(factor => res.push(sumbittedFactorAnswers[factor]))\r\n        return res;\r\n    }\r\n\r\n    getInterpolatedRiskRatio(submittedFactorAnswers: FactorAnswers): number {\r\n        let relevantFactorAnswers = this.getRelevantFactorAnswers(submittedFactorAnswers);\r\n\r\n        for (let index = 0; index < this.interpolation.length; index++) {\r\n            let interpolationEntry = this.interpolation[index];\r\n            let relevantInterpolationFactorAnswers = interpolationEntry.getRelevantFactorAnswers(submittedFactorAnswers) as number[];\r\n            if (interpolationEntry.isFactorAnswersInDomain(relevantFactorAnswers)) {\r\n                return interpolationEntry.interpolateRR(relevantInterpolationFactorAnswers);\r\n            }\r\n\r\n        }\r\n\r\n        return 1;\r\n    }\r\n}\r\n\r\nexport { RiskRatioTable };\r\n\r\n","import FrequencyTable, { FrequencyJson } from \"./FrequencyTable\";\r\nimport { RiskRatioTable, RiskRatioTableJson } from \"./RiskRatioTable\";\r\n\r\nexport interface RiskFactorGroupJson {\r\n    normalisingFactors: FrequencyJson;\r\n    interactionFunction: string;\r\n    riskRatioTables: RiskRatioTableJson[];\r\n}\r\n\r\nexport class RiskFactorGroup {\r\n    normalisationFactors: FrequencyTable;\r\n    interactionFunction: string; //todo: consider enum\r\n    riskRatioTables: RiskRatioTable[];\r\n\r\n    constructor(json: RiskFactorGroupJson) {\r\n        this.normalisationFactors = new FrequencyTable(json.normalisingFactors);\r\n        this.interactionFunction  = json.interactionFunction;\r\n        this.riskRatioTables = json.riskRatioTables.map(element => {return new RiskRatioTable(element)})\r\n    }\r\n\r\n    getAllFactorsInGroup(): Set<string> {\r\n        let allFactors: string[] = [];\r\n        this.riskRatioTables.forEach(rrt => allFactors.push(...rrt.factorNames));\r\n        return new Set(allFactors)\r\n    }\r\n}\r\n","import FrequencyTable, { FrequencyJson } from \"./FrequencyTable\";\r\nimport { RiskFactorGroup, RiskFactorGroupJson } from \"./RickFactorGroup\";\r\n\r\ninterface DeathCauseJson {\r\n    Age: FrequencyJson;\r\n    RiskFactorGroups: RiskFactorGroupJson[];\r\n}\r\n\r\nexport class DeathCause {\r\n    ages: FrequencyTable;\r\n    riskFactorGroups: RiskFactorGroup[];\r\n    deathCauseName: string;\r\n\r\n    constructor(json: DeathCauseJson, name: string) {\r\n        this.ages = new FrequencyTable(json.Age);\r\n        this.riskFactorGroups = json.RiskFactorGroups.map(element => {\r\n            return new RiskFactorGroup(element)\r\n        });\r\n        this.deathCauseName = name\r\n    }\r\n}\r\n\r\nexport default DeathCause;","import * as d3 from 'd3';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { SurvivalCurveData } from './Calculations/SurvivalCurveData';\r\nimport d3Tip from \"d3-tip\";\r\nimport './BarPlotWrapper.css'\r\nimport { unstable_batchedUpdates } from 'react-dom';\r\n\r\ninterface BarPlotWrapperProps {\r\n    data: SurvivalCurveData[]\r\n}\r\n\r\nconst BarPlotWrapper = (props: BarPlotWrapperProps) => {\r\n    console.log(props.data);\r\n\r\n    const chartArea = useRef(null);\r\n    const margin = { top: 50, right: 50, bottom: 50, left: 50 },\r\n        width = 800 - margin.left - margin.right,\r\n        height = 600 - margin.top - margin.bottom;\r\n\r\n    // const [chart, setChart] = useState<BarPlot | null>(null);\r\n    // const { width } = useWindowSize();\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('dataset changed');\r\n        if (props.data && chartArea.current) {\r\n            createNewChart()\r\n        }\r\n    }, [props.data]);\r\n\r\n    useEffect(() => {\r\n        const svg = d3.select(chartArea.current)\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\r\n        var x = d3.scaleBand()\r\n            .range([0, width])\r\n            .padding(0.2)\r\n            .domain(props.data.map(element => element.age.toString()));\r\n\r\n\r\n        var xAxis = svg.append(\"g\")\r\n            .attr(\"class\", \"xAxis\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(d3.axisBottom(x))\r\n\r\n\r\n        var y = d3.scaleLinear()\r\n            .range([height, 0])\r\n            .domain([0, 1]);\r\n        var yAxis = svg.append(\"g\").attr(\"class\", \"yXxis\").call(d3.axisLeft(y));\r\n\r\n        // createNewChart()\r\n\r\n        var u = svg.selectAll<SVGRectElement, SurvivalCurveData[]>(\"rect\").data(props.data)\r\n        u.enter()\r\n            .append(\"rect\")\r\n            .attr(\"x\", function (d, i) { return (x(d.age.toString()) as number) })\r\n            .attr(\"width\", x.bandwidth())\r\n            .attr(\"height\", function (d: any) { return height - y(0) })\r\n            .attr(\"y\", function (d, i) { return y(0) })\r\n            .attr(\"fill\", \"#9e1986\")\r\n\r\n        svg.selectAll<SVGRectElement, SurvivalCurveData[]>(\"rect\").data(props.data)\r\n            .transition()\r\n            .duration(700)\r\n            .attr(\"y\", function (d, i) { return y(d.prob) })\r\n            .attr(\"height\", function (d: any) { return height - y(d.prob) })\r\n            .delay(function (d, i) { console.log(i); return (i * 5 ) })\r\n    }, []);\r\n\r\n    const createNewChart = function () {\r\n        var svg = d3.select(\"g\")\r\n\r\n        var u = svg.selectAll<SVGRectElement, SurvivalCurveData[]>(\"rect\").data(props.data)\r\n\r\n        var x = d3.scaleBand()\r\n            .range([0, width])\r\n            .padding(0.2)\r\n            .domain(props.data.map(element => element.age.toString()))\r\n\r\n        var y = d3.scaleLinear()\r\n            .domain([0, 1])\r\n            .range([height, 0]);\r\n\r\n        d3.select<any, any>(\"g.xAxis\").call(d3.axisBottom(x).tickValues(\r\n            x.domain().filter(function (d, i) {\r\n                return !(+d % 5);\r\n            })\r\n        ));\r\n\r\n\r\n        u.join((enter: any) => {\r\n            return enter.append(\"rect\")\r\n                .attr(\"x\", function (d: any, i: any) { return width })\r\n                .attr(\"width\", x.bandwidth())\r\n                .attr(\"height\", function (d: any) { return height - y(0) })\r\n                .attr(\"y\", function (d: any, i: any) { return y(0) })\r\n                .attr(\"fill\", \"#9e19236\").transition().selection()\r\n        },\r\n            (update: any) => { return update },\r\n            (exit: any) => {\r\n                return exit.remove().selection()\r\n            })\r\n            .transition()\r\n            .duration(700)\r\n            .attr(\"x\", function (d, i) { return (x(d.age.toString()) as number) })\r\n            .attr(\"y\", function (d, i) { return y(d.prob) })\r\n            .attr(\"width\", x.bandwidth())\r\n            .attr(\"height\", function (d: any) { return height - y(d.prob) })\r\n        // .attr(\"fill\", \"#9e1986\")\r\n\r\n\r\n        // // Bars\r\n        // u.enter()\r\n        //     .append(\"rect\")\r\n        //     .merge(u)\r\n        //     .transition()\r\n        //     .duration(800)\r\n        //     .attr(\"x\", function (d, i) { return (x(d.age.toString()) as number) })\r\n        //     .attr(\"y\", function (d, i) { return y(d.prob) })\r\n        //     .attr(\"width\", x.bandwidth())\r\n        //     .attr(\"height\", function (d: any) { return height - y(d.prob) })\r\n        //     .attr(\"fill\", \"#9e1986\")\r\n\r\n        // u.exit().remove()\r\n\r\n        d3.select(\".d3-tip\").remove();\r\n\r\n        let tip = d3Tip()\r\n            .attr('class', 'd3-tip')\r\n            .offset([-10, 0])\r\n            .html(function (d: SurvivalCurveData) {\r\n                return \"<strong>Frequency:</strong> <span style='color:red'>\" + d.age + \" \" + d.prob + \"</span>\";\r\n            })\r\n\r\n        svg.call(tip);\r\n\r\n        d3.selectAll(\"rect\").data(props.data)\r\n            .on(\"mouseenter\", function (e: Event, d: SurvivalCurveData) {\r\n                d3.selectAll(\".d3-tip\").style(\"background-color\", \"9cc986\").style(\"opacity\", 1)\r\n                tip.show(d, this);\r\n                d3.select(this)\r\n                    .raise()\r\n                    .style(\"fill\", \"#9ea286\")\r\n            })\r\n            .on(\"mouseleave\", function (e: Event, d: SurvivalCurveData) {\r\n                tip.hide(d, this);\r\n                d3.select(this)\r\n                    .style('fill', '#9e1986')\r\n            })\r\n\r\n    }\r\n\r\n\r\n    return <svg\r\n        ref={chartArea}\r\n    />;\r\n}\r\nexport default BarPlotWrapper;","import { FactorAnswers } from \"../../models/Factors\";\r\nimport { ProbabilityKeyValue } from \"../../models/ProbabilityKeyValue\";\r\nimport DeathCause from \"../database/Deathcause\";\r\nimport { ProbabilitiesOfAllDeathCauses, ProbabilityOfDeathCause } from \"../database/ProbabilityResult\";\r\nimport { RiskFactorGroup } from \"../database/RickFactorGroup\";\r\nimport { MinimumRiskRatios } from \"../database/RiskRatioTable\";\r\nimport { RiskRatioTableCellInterface } from \"../database/RiskRatioTableCell/RiskRatioTableCellInterface\";\r\nimport { DataRow } from \"../PlottingData\";\r\nimport { SurvivalCurveData } from \"./SurvivalCurveData\";\r\n\r\ninterface InnerCausesForAllAges {\r\n    [key: string]: DataRow[]\r\n}\r\n\r\ninterface MinimumFactorInputs {\r\n    [key: string]: RiskRatioTableCellInterface\r\n}\r\n\r\ninterface UStar {\r\n    propForDeathcause: number,\r\n    minProbForDeathcause: number,\r\n    minFactorIntervals: MinimumFactorInputs,\r\n    minFactorValues: FactorAnswers;\r\n}\r\n\r\nexport class RiskRatioCalculationService {\r\n    private readonly MAX_AGE = 120;\r\n\r\n    calculateSurvivalCurve(submittedFactorAnswers: FactorAnswers, deathcauses: DeathCause[]): SurvivalCurveData[] {\r\n        let probabilitiesPerDeathCause = this.calculateProbabilitiesOfDeathCauses(submittedFactorAnswers, deathcauses)\r\n        let deathCauseProbabilities = probabilitiesPerDeathCause.probabilitiesOfAllDeathCauses.map(x => x.probabiltiesOfDeathCause)\r\n\r\n        let totalProbabilityOfNotDying: number[] = Array.from({ length: probabilitiesPerDeathCause.ages.length })\r\n        totalProbabilityOfNotDying = totalProbabilityOfNotDying.map((_, i) => deathCauseProbabilities.map(val => val[i]).reduce((sum, x) => sum + x, 0))\r\n            .map(x => 1 - x)\r\n\r\n        let res: SurvivalCurveData[] = []\r\n        let survivalCurve = Array.from({ length: totalProbabilityOfNotDying.length - 1 }, () => 1)\r\n        for (let i = 1; i < totalProbabilityOfNotDying.length; i++) {\r\n            survivalCurve[i] = survivalCurve[i - 1] * totalProbabilityOfNotDying[i]\r\n            res.push({ age: probabilitiesPerDeathCause.ages[i], prob: survivalCurve[i] })\r\n        }\r\n\r\n        return res\r\n    }\r\n\r\n    calculateProbabilitiesOfDeathCauses(submittedFactorAnswers: FactorAnswers, deathcauses: DeathCause[]): ProbabilitiesOfAllDeathCauses {\r\n        let currentAge: number = +submittedFactorAnswers['Age']\r\n        let ageRange: number[] = this.getAgeRange(currentAge);\r\n\r\n        let probabilityOfDeathcause: ProbabilityOfDeathCause[] = []\r\n        for (var deathcause of deathcauses) {\r\n            let probabilties = this.calculateProbForSingleCauseAndAllAges(submittedFactorAnswers, ageRange, deathcause);\r\n            probabilityOfDeathcause.push(this.createProbabilityOfDeathCauseObject(deathcause.deathCauseName, probabilties));\r\n        }\r\n\r\n        let probabilityResultForAllCauses: ProbabilitiesOfAllDeathCauses = { probabilitiesOfAllDeathCauses: probabilityOfDeathcause, ages: ageRange }\r\n        return probabilityResultForAllCauses;\r\n    }\r\n\r\n    private getAgeRange(currentAge: number): number[] {\r\n        return Array.from({ length: this.MAX_AGE - currentAge + 1 }, (_, i) => i + currentAge);\r\n    }\r\n\r\n    private createProbabilityOfDeathCauseObject(deathCauseName: string, probabilityOfDeathcause: number[]): ProbabilityOfDeathCause {\r\n        return { deathCause: deathCauseName, probabiltiesOfDeathCause: probabilityOfDeathcause };\r\n    }\r\n\r\n    private calculateProbForSingleCauseAndAllAges(submittedFactorAnswers: FactorAnswers, ageRange: number[], deathcause: DeathCause): number[] {\r\n        let probabilities: number[] = []\r\n        ageRange.forEach(age => {\r\n            let probability = this.calculateProbabilityForSingleCauseAndAge(submittedFactorAnswers, age, deathcause)\r\n            probabilities.push(probability);\r\n        })\r\n        return probabilities\r\n    }\r\n\r\n    private calculateProbabilityForSingleCauseAndAge(factorAnswers: FactorAnswers, selectedAge: number, deathcause: DeathCause): number {\r\n        let agePrevalence = deathcause.ages.getPrevalence(selectedAge);\r\n        let res = 1;\r\n        deathcause.riskFactorGroups.forEach(riskFactorGroup =>\r\n            res = res * this.calculateProbabilityOfRiskFactorGroup(factorAnswers, riskFactorGroup, selectedAge)\r\n        )\r\n        return agePrevalence * res;\r\n    }\r\n\r\n    private calculateProbabilityOfRiskFactorGroup(factorAnswers: FactorAnswers, riskFactorGroup: RiskFactorGroup, age: number): number {\r\n        const riskFactorGroupFactors = Array.from(riskFactorGroup.getAllFactorsInGroup().values())\r\n\r\n        for (let i = 0; i < riskFactorGroup.getAllFactorsInGroup().size; i++) {\r\n            const factor = riskFactorGroupFactors[i]\r\n            if (factorAnswers[factor] === '') {\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        let res = 1;\r\n        riskFactorGroup.riskRatioTables.forEach(riskRatioTable => {\r\n            res = res * riskRatioTable.getRiskRatio(factorAnswers)\r\n        });\r\n        return res / riskFactorGroup.normalisationFactors.getPrevalence(age)\r\n    }\r\n\r\n    calculateInnerProbabilitiesForAllCausesAndAges(factorAnswersSubmitted: FactorAnswers, deathCauses: DeathCause[]): DataRow[] {\r\n        let innerCausesForAllAges: InnerCausesForAllAges = {}\r\n        let currentAge = +factorAnswersSubmitted['Age'] as number\r\n        let ageRange = this.getAgeRange(currentAge)\r\n        let currentProbOfBeingAlive = 1;\r\n        let totalProbOfDying = 0;\r\n\r\n        deathCauses.forEach(d => innerCausesForAllAges[d.deathCauseName] = [])\r\n\r\n        ageRange.forEach(age => {\r\n            let factorAnswersSubmittedUpdated = { ...factorAnswersSubmitted }\r\n            factorAnswersSubmittedUpdated['Age'] = age\r\n            let innerCausesForAges: DataRow[] = []\r\n\r\n            deathCauses.forEach(deathCause => {\r\n                innerCausesForAges.push(this.calculateInnerProbabilities(factorAnswersSubmittedUpdated, deathCause))\r\n            })\r\n\r\n            totalProbOfDying = innerCausesForAges.map(it => it.totalProb).reduce((first, second) => first + second, 0)\r\n\r\n            innerCausesForAges.forEach(innerCause => innerCause.totalProb *= currentProbOfBeingAlive)\r\n\r\n            currentProbOfBeingAlive *= 1 - Math.min(1,totalProbOfDying)\r\n\r\n            innerCausesForAges.forEach(innerCause => {\r\n                innerCausesForAllAges[innerCause.name].push(innerCause)\r\n            })\r\n\r\n        })\r\n\r\n        let res: DataRow[] = []\r\n        for (let key of Object.keys(innerCausesForAllAges)) {\r\n            res.push(this.combineMultipleInnerCauses(innerCausesForAllAges[key]))\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private combineMultipleInnerCauses(innerCauses: DataRow[]): DataRow {\r\n        let sum = innerCauses.map(innerCause => innerCause.totalProb).reduce((first, second) => first + second, 0)\r\n        let deathCauseName = innerCauses[0].name\r\n\r\n        if (sum === 0) {\r\n            return { name: deathCauseName, totalProb: 0, innerCauses: {} }\r\n        }\r\n\r\n        let combinedInnerCause: ProbabilityKeyValue = {}\r\n        let factors = Object.keys(innerCauses[0].innerCauses)\r\n\r\n        for (let factor of factors) {\r\n            combinedInnerCause[factor] = 0\r\n            innerCauses.forEach(innerCause => {\r\n                combinedInnerCause[factor] += innerCause.totalProb * innerCause.innerCauses[factor] / sum\r\n            })\r\n        }\r\n\r\n        return { name: deathCauseName, totalProb: sum, innerCauses: combinedInnerCause }\r\n    }\r\n\r\n\r\n\r\n    calculateInnerProbabilities(factorAnswersSubmitted: FactorAnswers, deathcause: DeathCause): DataRow {\r\n        let uStar = this.calculateUStar(factorAnswersSubmitted, deathcause);\r\n        let firstOrderDecomposition = this.calculateFirstOrderDecomposition(factorAnswersSubmitted, deathcause);\r\n\r\n        let ratio\r\n        if (uStar.propForDeathcause < 1e-12) {\r\n            ratio = 0\r\n        } else {\r\n            ratio = Math.max(0,uStar.propForDeathcause - uStar.minProbForDeathcause) / uStar.propForDeathcause\r\n        }\r\n        let innerCauses: ProbabilityKeyValue = {}\r\n        for (let key of Object.keys(firstOrderDecomposition)) {\r\n            innerCauses[key] = firstOrderDecomposition[key] * ratio\r\n        }\r\n\r\n        let res = {\r\n            name: deathcause.deathCauseName,\r\n            totalProb: uStar.propForDeathcause,\r\n            innerCauses: innerCauses\r\n        }\r\n\r\n        return res\r\n    }\r\n\r\n    private calculateUStar(factorAnswersSubmitted: FactorAnswers, deathcause: DeathCause): UStar {\r\n        let probForDeathcause = this.calculateProbabilityForSingleCauseAndAge(factorAnswersSubmitted, factorAnswersSubmitted['Age'] as number, deathcause)\r\n        let minimumFactorIntervals: MinimumFactorInputs = {}\r\n        deathcause.riskFactorGroups.forEach(rfg => {\r\n            rfg.riskRatioTables.forEach(rrt => {\r\n                minimumFactorIntervals = { ...minimumFactorIntervals, ...rrt.getMinimumRRFactors() }\r\n            })\r\n        })\r\n\r\n        let minimumFactorInputs: FactorAnswers = {}\r\n        for (var key in minimumFactorIntervals) {\r\n            minimumFactorInputs[key] = minimumFactorIntervals[key].getValueInCell()\r\n        }\r\n\r\n        let minProbForDeathcause = this.calculateProbabilityForSingleCauseAndAge(minimumFactorInputs, factorAnswersSubmitted['Age'] as number, deathcause)\r\n\r\n        return { propForDeathcause: probForDeathcause, minProbForDeathcause: minProbForDeathcause, minFactorIntervals: minimumFactorIntervals, minFactorValues: minimumFactorInputs }\r\n    }\r\n\r\n    private calculateFirstOrderDecomposition(factorAnswersSubmitted: FactorAnswers, deathcause: DeathCause): ProbabilityKeyValue {\r\n        let res: ProbabilityKeyValue = {}\r\n        for (let rfg of deathcause.riskFactorGroups) {\r\n            let rfgRes = this.calculateFirstOrderDecompositionForRiskFactorGroup(factorAnswersSubmitted, rfg);\r\n            res = { ...res, ...rfgRes };\r\n        }\r\n\r\n        let sum = 0;\r\n        for (let key of Object.keys(res)) {\r\n            sum += res[key];\r\n        }\r\n        for (let key of Object.keys(res)) {\r\n            if (sum === 0) {\r\n                res[key] = 1 / Object.keys(res).length\r\n            } else {\r\n                res[key] = res[key] / sum;\r\n            }\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    //todo: returner objekter med de optimale faktorværdier og om det submitted faktor værdi er for lidt / for meget ift. den minimale.\r\n    private calculateFirstOrderDecompositionForRiskFactorGroup(factorAnswersSubmitted: FactorAnswers, riskFactorGroup: RiskFactorGroup) {\r\n        let res: MinimumRiskRatios = {}\r\n        let factors = riskFactorGroup.getAllFactorsInGroup()\r\n\r\n        factors.forEach(factor => {\r\n            res[factor] = 1\r\n        })\r\n\r\n        riskFactorGroup.riskRatioTables.forEach(rrt => {\r\n            let ratio = 1;\r\n            rrt.factorNames.forEach(factor => {\r\n                let minRR = rrt.getMinimumRR() //todo: return factor values/factor intervals for minRR and minRRexceptForOne\r\n                let minRRexceptForOne = rrt.getMinimumRRForSingleFactor(factorAnswersSubmitted, factor)\r\n                if (minRR === 0) {\r\n                    ratio = 0\r\n                } else {\r\n                    ratio = ratio * Math.max(0,minRRexceptForOne - minRR) / minRR\r\n                }\r\n                res[factor] *= ratio;\r\n            })\r\n        })\r\n        return res;\r\n    }\r\n}\r\n","import { FactorAnswers } from \"../../models/Factors\";\r\nimport DeathCause from \"../database/Deathcause\";\r\nimport { RiskRatioCalculationService } from \"./CalculationService\";\r\n\r\nexport class CalculationFacade {\r\n    private readonly probabilityOfDeathCauseCalculation: RiskRatioCalculationService\r\n    private readonly deathCauses: DeathCause[];\r\n\r\n    constructor(deathcauses: DeathCause[]) {\r\n        this.deathCauses=deathcauses\r\n        this.probabilityOfDeathCauseCalculation = new RiskRatioCalculationService()\r\n    }\r\n    \r\n    calculateProbabilitiesForDeathcauses = (submittedFactorAnswers: FactorAnswers) => {\r\n        return this.probabilityOfDeathCauseCalculation.calculateProbabilitiesOfDeathCauses(submittedFactorAnswers, this.deathCauses)\r\n    }\r\n\r\n    calculateInnerProbabilities = (submittedFactorAnswers: FactorAnswers) => {\r\n        return this.probabilityOfDeathCauseCalculation.calculateInnerProbabilitiesForAllCausesAndAges(submittedFactorAnswers, this.deathCauses);\r\n    }\r\n\r\n    calculateSurvivalCurve = (submittedFactorAnswers: FactorAnswers) => {\r\n        return this.probabilityOfDeathCauseCalculation.calculateSurvivalCurve(submittedFactorAnswers, this.deathCauses)\r\n    }\r\n}","import React from \"react\";\r\nimport \"./VizWindow.css\";\r\nimport BarChartWrapper from \"./BarChartWrapper\";\r\nimport RelationLinkVizWrapper from \"./RelationLinkVizWrapper\";\r\nimport { TEST_DATA, TEST_DATA2, DataSet } from \"./PlottingData\";\r\nimport { FactorAnswers } from \"../models/Factors\";\r\nimport RelationLinks from \"../models/RelationLinks\";\r\nimport { Visualization } from \"./Helpers\";\r\nimport ComputeController from \"../models/updateFormNodes/UpdateFormController\";\r\nimport Deathcause from \"./database/Deathcause\";\r\nimport causesData from \"../resources/Causes.json\";\r\nimport BarPlotWrapper from \"./BarPlotWrapper\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { SurvivalCurveData } from \"./Calculations/SurvivalCurveData\";\r\nimport { CalculationFacade } from \"./Calculations/CalculationsFacade\";\r\n\r\ninterface VizWindowProps {\r\n  factorAnswersSubmitted: FactorAnswers | null;\r\n  relationLinkData: RelationLinks;\r\n  elementInFocus: string;\r\n  visualization: Visualization;\r\n  orderVisualization: (elementInFocus: string, vizType: Visualization) => void;\r\n}\r\n\r\ninterface VizWindowStates {\r\n  database: DataSet;\r\n  chosenValue: string;\r\n  survivalData: SurvivalCurveData[];\r\n}\r\n\r\nclass VizWindow extends React.PureComponent<VizWindowProps, VizWindowStates> {\r\n  computerController: ComputeController | null;\r\n  factorDatabase: Deathcause[] = [];\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      database: TEST_DATA,\r\n      chosenValue: \"Risk factor contributions 1\",\r\n      survivalData: [],\r\n    };\r\n    this.computerController = null; //new ComputeController(this.props.relationLinkData, null);\r\n  }\r\n\r\n  componentDidUpdate(prevProps: VizWindowProps) {\r\n    if (\r\n      prevProps.factorAnswersSubmitted !== this.props.factorAnswersSubmitted &&\r\n      this.props.factorAnswersSubmitted\r\n    ) {\r\n      console.log(\"initiating update computercontroller\");\r\n      this.updateComputerController();\r\n    }\r\n  }\r\n\r\n  updateComputerController() {\r\n    const a = this.computerController?.computeInnerProbabilities(\r\n      this.props.factorAnswersSubmitted!\r\n    );\r\n    console.log(\"new inner causes\");\r\n    console.log(a);\r\n    this.setState({ database: a! }, () => {\r\n      const b = this.computerController?.computeSurvivalData(\r\n        this.props.factorAnswersSubmitted!\r\n      );\r\n      this.setState({ survivalData: b! });\r\n    });\r\n    // this.computerController?.computeInnerProbabilities(this.props.factorAnswersSubmitted!).then((res) => {\r\n    //   this.setState({database: res},\r\n    //     () => this.computerController?.computeSurvivalData(this.props.factorAnswersSubmitted!).then((res) => {\r\n    //       this.setState({survivalData: res}, () => {\r\n    //         if(  !(this.props.visualization===Visualization.BAR_GRAPH || this.props.visualization=== Visualization.SURVIVAL_GRAPH)){\r\n    //           this.props.orderVisualization(this.props.elementInFocus, Visualization.BAR_GRAPH);\r\n    //         }\r\n    //       })\r\n    //     }))\r\n    // })\r\n  }\r\n\r\n  loadFactorDatabase() {\r\n    let database: Deathcause[] = [];\r\n    for (var key in causesData) {\r\n      if (causesData.hasOwnProperty(key)) {\r\n        database.push(\r\n          new Deathcause(causesData[key as keyof typeof causesData], key)\r\n        );\r\n      }\r\n    }\r\n    const c = new CalculationFacade(database);\r\n    console.log(\"calculation facade\");\r\n    console.log(c);\r\n    this.computerController = new ComputeController(\r\n      this.props.relationLinkData,\r\n      null,\r\n      120,\r\n      c\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadFactorDatabase();\r\n  }\r\n\r\n  renderVisualization() {\r\n    //uses this.state.selcted_visualization and this.props.database and this.props.factor_answers to make the relevant revisualization.\r\n  }\r\n\r\n  handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    const value: string = event.currentTarget.value;\r\n    switch (value) {\r\n      case \"Risk factor contributions 1\": {\r\n        this.setState(\r\n          {\r\n            chosenValue: value,\r\n          },\r\n          () =>\r\n            this.props.orderVisualization(\r\n              this.props.elementInFocus,\r\n              Visualization.BAR_GRAPH\r\n            )\r\n        );\r\n        break;\r\n      }\r\n      case \"Risk factor contributions 2\": {\r\n        this.setState(\r\n          {\r\n            database: TEST_DATA2,\r\n            chosenValue: value,\r\n          },\r\n          () =>\r\n            this.props.orderVisualization(\r\n              this.props.elementInFocus,\r\n              Visualization.BAR_GRAPH\r\n            )\r\n        );\r\n        break;\r\n      }\r\n      case \"Relation graph\": {\r\n        this.setState({ chosenValue: value }, () => {\r\n          this.props.orderVisualization(\r\n            this.props.elementInFocus,\r\n            Visualization.RELATION_GRAPH\r\n          );\r\n        });\r\n        break;\r\n      }\r\n      case \"Survival curve\": {\r\n        this.props.orderVisualization(\r\n          this.props.elementInFocus,\r\n          Visualization.SURVIVAL_GRAPH\r\n        );\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  renderChosenGraph() {\r\n    switch (this.props.visualization) {\r\n      case Visualization.BAR_GRAPH: {\r\n        return (\r\n          <BarChartWrapper\r\n            database={this.state.database}\r\n            colorDic={this.props.relationLinkData.getColorDic()}\r\n          />\r\n        );\r\n      }\r\n      case Visualization.RELATION_GRAPH: {\r\n        return (\r\n          <RelationLinkVizWrapper\r\n            rdat={this.props.relationLinkData}\r\n            elementInFocus={this.props.elementInFocus}\r\n            changeElementInFocus={(newFocus: string) => {\r\n              this.props.orderVisualization(\r\n                newFocus,\r\n                Visualization.RELATION_GRAPH\r\n              );\r\n            }}\r\n          />\r\n        );\r\n      }\r\n      case Visualization.SURVIVAL_GRAPH:\r\n        return <BarPlotWrapper data={this.state.survivalData} />;\r\n      case Visualization.NO_GRAPH: {\r\n        return \"Input an age to get started\";\r\n      }\r\n      default: {\r\n        return <p>'No visualizations'</p>;\r\n      }\r\n    }\r\n  }\r\n\r\n  renderSelectOption() {\r\n    return (\r\n      <Form>\r\n        <Form.Group className=\"visualisation\">\r\n          <Form.Row>\r\n            <Form.Control\r\n              className=\"visualisation\"\r\n              as=\"select\"\r\n              defaultValue=\"Choose...\"\r\n              onChange={this.handleChange}\r\n              style={{ height: \"40px\" }}\r\n            >\r\n              <option>Survival curve</option>\r\n              <option>Risk factor contributions 1</option>\r\n              <option>Risk factor contributions 2</option>\r\n              <option>Relation graph</option>\r\n            </Form.Control>\r\n          </Form.Row>\r\n        </Form.Group>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    console.log(this.props);\r\n    return (\r\n      <div className=\"vizwindow\">\r\n        <h4> Visualization Menu </h4>\r\n        {this.renderSelectOption()}\r\n        <hr></hr>\r\n        {this.renderChosenGraph()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VizWindow;\r\n","import {json} from \"d3\";\r\nimport React from \"react\";\r\nimport { Col, Container, Row } from \"reactstrap\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/Header\";\r\nimport QuestionMenu from \"./components/QuestionMenu\";\r\nimport VizWindow from \"./components/VizWindow\";\r\nimport  { FactorAnswers } from \"./models/Factors\";\r\nimport RelationLinks, { RelationLinkJson } from \"./models/RelationLinks\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { Visualization } from \"./components/Helpers\";\r\n\r\n\r\n\r\n\r\ninterface AppState {\r\n  factorAnswersSubmitted: FactorAnswers | null;\r\n  elementInFocus: string;\r\n  relationLinkData: RelationLinks | null;\r\n  visualization: Visualization;\r\n}\r\n\r\nclass App extends React.Component<any, AppState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      factorAnswersSubmitted: null,\r\n      elementInFocus: \"BMI\",\r\n      relationLinkData: null,\r\n      visualization: Visualization.NO_GRAPH\r\n    };\r\n    \r\n    this.handleSuccessfulSubmit = this.handleSuccessfulSubmit.bind(this);\r\n    this.orderVisualization = this.orderVisualization.bind(this);\r\n  }\r\n\r\n  handleSuccessfulSubmit(factorAnswers: FactorAnswers): void {\r\n    console.log(\"submitted factoranswers\")\r\n    console.log(factorAnswers);\r\n    this.setState({\r\n      factorAnswersSubmitted: factorAnswers,\r\n    });\r\n  }\r\n\r\n  // loadFactorAnswers() {\r\n  //   this.setState({\r\n  //     factorAnswers: new Factors()\r\n  //   })\r\n  //   // load_factor_answers.then((loaded_factor_answers)=> this.setState({hasLoadedFactorAnswers: false, factor_answers:loaded_factor_answers})).\r\n  //   // This will load the factor answers and then it will update the rendered view using setState.\r\n  // }\r\n\r\n  // loadDatabase() {\r\n  //   // load_data.then((loaded_data)=> this.setState({hasLoadedDatabase: false, factor_answers:loaded_data})).\r\n  //   // This will load the data and then it will update the rendered view using setState.\r\n  //   // this.setState({ database: json('../compile/Causes_for_json'), hasLoadedDatabase: true });\r\n  // }\r\n\r\n\r\n  loadRelationLinks() {\r\n    Promise.all([\r\n      json(\"Relations.json\")\r\n    ]).then((data) => {\r\n      this.setState({ relationLinkData: new RelationLinks(data[0] as RelationLinkJson)\r\n    })});\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadRelationLinks()\r\n  }\r\n\r\n  orderVisualization(elementInFocus: string, visualizationType: Visualization): void {\r\n    this.setState({ visualization: visualizationType, elementInFocus: elementInFocus} );\r\n  }\r\n\r\n  renderQuestionMenu() {\r\n    return (\r\n      <QuestionMenu \r\n        handleSuccessfulSubmit={this.handleSuccessfulSubmit} \r\n        relationLinkData={this.state.relationLinkData!}\r\n        orderVisualization={this.orderVisualization}          \r\n    />\r\n    );\r\n  }\r\n\r\n  renderVizWindow() {\r\n    return (\r\n      <VizWindow\r\n        factorAnswersSubmitted={this.state.factorAnswersSubmitted}\r\n        relationLinkData={this.state.relationLinkData!}\r\n        elementInFocus={this.state.elementInFocus}\r\n        visualization={this.state.visualization}\r\n        orderVisualization={this.orderVisualization}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Container fluid>\r\n          <Row>\r\n            <Col lg={5} xl={4} style={{ padding: \"0px\" }}>\r\n              {this.state.relationLinkData!== null ? this.renderQuestionMenu() : <Spinner animation=\"grow\" />}\r\n            </Col>\r\n            <Col lg={7} xl={8} style={{ padding: \"0px\" }}>\r\n              { this.state.relationLinkData !== null\r\n                ? this.renderVizWindow()\r\n                : <Spinner animation=\"grow\" />}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}