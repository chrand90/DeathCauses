{"version":3,"sources":["components/Header.tsx","components/ComptutationEngine.tsx","components/BarChart.tsx","components/BarChartWrapper.tsx","components/PlottingData.tsx","components/VizWindow.tsx","models/Factors.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","React","Component","make_squares","res_dat","r","map","p_object","new_res","explained","Object","values","inner_causes","reduce","a","b","push","name","cause","x0","x","total_prob","entries","key","value","concat","BARHEIGHT","XBARHEIGHT","ALTERNATING_COLORS","CAUSE_COLORS","longDesignConstants","n","width","barheight","totalheight","totalheightWithXBar","startXScale","yListStart","yListInnerPadding","yListOuterPadding","yListAlign","middleOfChart","textTranslation","textAnchor","BarChart","element","database","svg","xAxisGroup","data","data2","stip","drect_order","yBars","console","log","this","d3","vis","div","style","slice","Math","round","Number","getDivWidth","append","attr","designConstants","text","make","remove","sort_data","domain","d","range","paddingInner","paddingOuter","align","length","dataSortedName","copyOfSortedDataset","dataSortedTotal","augmented_data","index","res","dataSquares","newMaxX","getMaxX","createXAxisCall","xAxisCall","xscale","call","recalibrate_ybars","yRects","diseases","selectAll","exit","g_components","enter","i","id","insert","gs","d3Tip","html","direction","offset","bandwidth","on","e","show","raise","hide","newMax","dataset","rename_object","new_name","duration_per_transition","transition","duration","delay","sorter","sort","undefined","BarChartWrapper","props","chartArea","useRef","useState","chart","setChart","window","innerWidth","windowSize","setWindowSize","resize_graphic","changeWindowSize","setTimeout","useEffect","addEventListener","removeEventListener","useWindowSize","createNewChart","current","clear","update","ref","TEST_DATA","partying","smoking","TEST_DATA2","VizWindow","counter","handleChange","event","setState","selected_visualization","currentTarget","state","onChange","PureComponent","Factors","factorList","forEach","factorType","NumericFactorPermanent","factorName","BooleanFactorPermanent","StringFactorPermanent","stateObject","getInitialValue","GeneralFactor","initialValue","App","hasLoadedFactorAnswers","hasLoadedDatabase","hasLoadedFactorDatabase","factorDatabase","factorAnswers","factorAnswersSubmitted","bind","handleSubmit","preventDefault","create","type","checked","prevState","loadFactorNames","loadFactorDatabase","causesData","then","getFactorsAsStateObject","Row","Col","md","xs","lg","sm","xl","padding","renderQuestionMenu","renderVizWindow","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8c9a209.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component {\r\n\r\n    render(): React.ReactNode {\r\n        return (<div className='header'> \r\n            <h1> Death Causes</h1>\r\n        </div>);\r\n    };\r\n}\r\n\r\nexport default Header;","import { sum } from \"d3\";\r\nimport { DataRow, DataSet } from \"./PlottingData\";\r\n\r\nexport interface SquareSection {\r\n    name: string,\r\n    cause: string,\r\n    x0: number,\r\n    x: number\r\n}\r\n\r\n\r\nfunction make_squares(res_dat: DataSet){\r\n    const r: SquareSection[][]= res_dat.map( (p_object: DataRow): SquareSection[] => {\r\n        let new_res=[];\r\n        const total_explained= Object.values(p_object.inner_causes).reduce((a, b) => a + b,0);\r\n        // console.log(total_explained);\r\n        let explained=1-total_explained;\r\n        new_res.push({\r\n            name: p_object.name,\r\n            cause: 'Unexplained',\r\n            x0:0,\r\n            x: explained*p_object.total_prob\r\n        });\r\n        for (let [key, value] of Object.entries(p_object.inner_causes)) {\r\n            new_res.push({\r\n                name: p_object.name,\r\n                cause: key,\r\n                x0: explained*p_object.total_prob,\r\n                x: (explained+value)*p_object.total_prob\r\n            });\r\n            explained+=value;\r\n        };\r\n        return new_res;\r\n    });\r\n    const flattened_array = ([] as SquareSection[]).concat(...r);\r\n    return flattened_array;\r\n};\r\n\r\nexport default make_squares;","import * as d3 from 'd3';\r\nimport d3Tip from \"d3-tip\";\r\nimport './BarChart.css';\r\nimport { DataRow, DataSet, AugmentedDataSet, AugmentedDataRow } from './PlottingData';\r\nimport  make_squares, {SquareSection}  from './ComptutationEngine';\r\nimport { ScaleBand } from 'd3';\r\n\r\n\r\nconst MARGIN = { TOP: 2, BOTTOM: 2, LEFT: 10, RIGHT: 10 }\r\nconst WIDTH = 1200;\r\nlet DESIGN= \"LONG\";\r\nconst BARHEIGHT = 50;\r\nconst XBARHEIGHT= 50;\r\nconst PADDING = 0.3;\r\nconst TEXT_COLUMN_SIZE=100;\r\nconst ALTERNATING_COLORS=[\"#CFCFCF\",\"#E4E4E4\"];\r\n\r\ninterface ColorDic {\r\n\t[key: string]: string\r\n}\r\n\r\nconst CAUSE_COLORS: ColorDic={'Unexplained':\"#FFFFFF\",\r\n'partying':'#FF6C00'};\r\n\r\nfunction getDivWidth(div: HTMLElement | null): number {\r\n\tconsole.log(div);\r\n\tif(div === null){\r\n\t\treturn 0;\r\n\t}\r\n    var width = d3.select(div)\r\n      // get the width of div element\r\n      .style('width')\r\n      // take of 'px'\r\n      .slice(0, -2)\r\n    // return as an integer\r\n    return Math.round(Number(width))\r\n  }\r\n\r\ninterface DesignConstants {\r\n\tbarheight: number,\r\n\ttotalheight: number,\r\n\ttotalheightWithXBar: number,\r\n\tstartXScale: number,\r\n\tyListStart: number,\r\n\tyListInnerPadding: number,\r\n\tyListOuterPadding: number,\r\n\tyListAlign: number,\r\n\tmiddleOfChart: number,\r\n\twidth: number,\r\n\ttextTranslation: string,\r\n\ttextAnchor: 'start' | 'middle' | 'end'\r\n}\r\n\r\nfunction longDesignConstants(n: number, width:number): DesignConstants{\r\n\treturn {\r\n\t\tbarheight: 1.5*BARHEIGHT,\r\n\t\ttotalheight: n*1.5*BARHEIGHT,\r\n\t\ttotalheightWithXBar: n*1.5*BARHEIGHT+XBARHEIGHT,\r\n\t\tstartXScale: 10,\r\n\t\tyListStart: XBARHEIGHT,\r\n\t\tyListInnerPadding: 0.48,\r\n\t\tyListOuterPadding: 0.24,\r\n\t\tyListAlign:0.8,\r\n\t\tmiddleOfChart: width/2,\r\n\t\twidth: width,\r\n\t\ttextTranslation: \"translate(\" + 10 +\r\n\t\t \",\" + -BARHEIGHT/8 + \")\",\r\n\t\ttextAnchor: 'start'\r\n\t}\r\n}\r\n\r\nfunction wideDesignConstants(n: number, width: number): DesignConstants{\r\n\treturn {\r\n\t\tbarheight: BARHEIGHT,\r\n\t\ttotalheight: n*BARHEIGHT,\r\n\t\ttotalheightWithXBar: n*BARHEIGHT+XBARHEIGHT,\r\n\t\tstartXScale: TEXT_COLUMN_SIZE,\r\n\t\tyListStart: XBARHEIGHT,\r\n\t\tyListInnerPadding: PADDING,\r\n\t\tyListOuterPadding: PADDING/2,\r\n\t\tyListAlign: 0.5,\r\n\t\tmiddleOfChart: TEXT_COLUMN_SIZE+(width-TEXT_COLUMN_SIZE)/2,\r\n\t\twidth: width,\r\n\t\ttextTranslation: \"translate(\" + -10 + \",\" + (BARHEIGHT/2) + \")\",\r\n\t\ttextAnchor: 'end'\r\n\t}\r\n}\r\n\r\nexport default class BarChart {\r\n    element: HTMLElement|null=null ;\r\n    width: number=0;\r\n    svg!: d3.Selection<SVGSVGElement,unknown,null,undefined>; // the exclamation point is necessary because the compiler does not realize that it is initialized in the constructor\r\n    xAxisGroup: any| null;\r\n\tdata: DataRow[] ;\r\n\tdata2: SquareSection[]=[];\r\n\tstip: any;\r\n\tdrect_order: string[];\r\n\tyBars: ScaleBand<string>;\r\n\r\n\tconstructor(element: HTMLElement | null, database: DataSet) {\r\n\t\tconsole.log(database);\r\n\r\n\t\t//Initializers\r\n\t\tthis.drect_order=[];\r\n\t\tthis.yBars=d3.scaleBand();\r\n\r\n\r\n\t\tthis.data=database;\r\n\t\tconst vis = this\r\n\t\tvis.element=element;\r\n\t\tvis.width=getDivWidth(element)*0.9;  //getDivWidth(element)*0.9;\r\n\t\tconsole.log(\"vis width \" + vis.width);\r\n\t\t//width=\"100%\" viewBox=\"0 0 10 1.5\" preserveAspectRatio=\"xMinYMin\">\r\n\t\tvis.svg = d3.select(element)\r\n\t\t\t.append(\"svg\")\r\n\t\t\t\t.attr(\"width\", vis.width)\r\n                .attr(\"height\", BARHEIGHT+XBARHEIGHT)\r\n\t\t\r\n\r\n\t\tvis.xAxisGroup = vis.svg.append(\"g\")\r\n\t\t\t\t\t\t\t.attr('transform',`translate(0,${XBARHEIGHT})`)\r\n\t\tlet designConstants = (DESIGN==='WIDE') ? wideDesignConstants(1,vis.width) : longDesignConstants(1, vis.width);\r\n\r\n\t\tvis.svg.append('text')\r\n\t\t\t.attr(\"x\", designConstants.middleOfChart)\r\n\t\t\t.attr(\"y\", XBARHEIGHT/2)\r\n\t\t\t.attr(\"font-size\", 20)\r\n\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t.text(\"Probability of dying of cause\")\r\n\t\t\r\n\t\tvis.make();\r\n\t}\r\n\r\n\tclear(){\r\n\t\td3.select('svg').remove();\r\n\t}\r\n\r\n\trecalibrate_ybars(sort_data: DataSet, designConstants: DesignConstants){\r\n\t\tthis.yBars = d3.scaleBand()\r\n\t\t.domain(sort_data.map((d:any) => d.name))\r\n\t\t.range([designConstants.yListStart, designConstants.totalheightWithXBar])\r\n\t\t.paddingInner(designConstants.yListInnerPadding)\r\n\t\t.paddingOuter(designConstants.yListOuterPadding)\r\n\t\t.align(designConstants.yListAlign)\r\n\t}\r\n\r\n\tmake() {\r\n\t\tconst vis = this;\r\n\t\tconst n=vis.data.length;\r\n\t\tlet designConstants = (DESIGN==='WIDE') ? wideDesignConstants(n,vis.width) : longDesignConstants(n, vis.width);\r\n\r\n\t\tvis.svg.attr(\"height\", designConstants.totalheightWithXBar)\r\n\t\tconst dataSortedName= copyOfSortedDataset(vis.data, 'name');\r\n\t\tconst dataSortedTotal= copyOfSortedDataset(vis.data, 'total_prob');\r\n\r\n\t\tconst augmented_data: AugmentedDataSet=dataSortedTotal.map((d: DataRow, index: number): AugmentedDataRow=> {\r\n\t\t\tlet res: any= d;\r\n\t\t\tres[\"id\"]=index;\r\n\t\t\treturn res;\r\n\t\t})\r\n\r\n\t\tthis.drect_order=dataSortedTotal.map((d) => d.name);\r\n\t\tconst dataSquares=make_squares(dataSortedName);\r\n\r\n\t\t//Setting X-axis\r\n\t\tconst newMaxX=getMaxX(dataSquares);\r\n\t\tconst {xAxisCall, xscale} = this.createXAxisCall(newMaxX, designConstants)\r\n\t\tvis.xAxisGroup.call(xAxisCall)\r\n\r\n\t\t//Setting the mapping disease -> y value\r\n\t\tthis.recalibrate_ybars(dataSortedTotal, designConstants);\r\n\r\n\t\tconst yRects = d3.scaleBand()\r\n\t\t\t.domain(dataSortedTotal.map((d:any) => d.name))\r\n\t\t\t.align(designConstants.yListAlign)\r\n\t\t\t.range([designConstants.yListStart, designConstants.totalheightWithXBar])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\r\n\t\t//DATA JOIN\r\n\t\tconst diseases = vis.svg.selectAll(\"rect.shell\").data(augmented_data, function(d: any){ return d.name })\r\n\r\n\t\t// EXIT\r\n\t\tdiseases.exit().remove()\r\n\r\n\t\t// ENTER\r\n\t\tconst g_components= diseases.enter().append('g').attr('class','rect.shell')\r\n\r\n\r\n\t\t/*  One disadvantage of this structure is that it is important that the text is never inserted before the \r\n\t\t\trectangle. Therefore it is important that they are inserted in the same order. \r\n\t\t*/\r\n\t\tg_components.append('rect').attr('class','drect')\r\n\t\t\t\t.attr(\"y\", (d:any,i:number) => (yRects(d.name) as number))\r\n\t\t\t\t.attr(\"x\", xscale(0))\r\n\t\t\t\t.attr(\"width\", designConstants.width)\r\n\t\t\t\t.attr(\"height\", designConstants.barheight)\r\n\t\t\t\t.attr('fill', function(d:any,i:number) { return ALTERNATING_COLORS[d.id%2]})\r\n\t\t\t\t.style(\"opacity\", 0.5)\r\n\r\n\t\tg_components.insert('text').attr('class','dtext')\r\n\t\t\t\t.attr(\"y\", (d:any) => (this.yBars(d.name) as number))\r\n\t\t\t\t.attr(\"x\", xscale(0))\r\n\t\t\t\t.text( (d:any) => d.name)\r\n\t\t\t\t.style('text-anchor',designConstants.textAnchor)\r\n\t\t\t\t.attr(\"transform\",designConstants.textTranslation)\r\n\r\n\t\t\r\n\t\t//The causes themselves are plotted by this.\r\n        const gs= vis.svg.selectAll(\".causebar\")\r\n\t\t\t\t\t.data(dataSquares, function(d: any) {return d.name+'.'+d.cause})\r\n\r\n\r\n\t\td3.select(\".d3-tip\").remove(); //removes any old visible tooltips that was perhaps not removed by a mouseout event (for example because the mouse teleported instantanously by entering/exiting a full-screen). \r\n\r\n\r\n\t\tvis.stip = d3Tip().attr('class', 'd3-tip').html( (d: SquareSection) => {\r\n\t\t\treturn d.cause;\r\n\t\t\t} )\r\n\t\t\t\t\t\t\t.direction('s')\r\n\t\t\t\t\t\t\t.offset([10,0])\r\n\t\t\t\t\t\t\r\n\t\tvis.svg.call(vis.stip);\r\n\t\t\r\n\r\n\r\n\t\t\r\n\t\tgs.exit().remove()\r\n\r\n\t\tgs.enter().append('rect')\r\n\t\t\t.attr('class','causebar')\r\n\t\t\t.attr(\"y\", d => (this.yBars(d.name) as number))\r\n\t\t\t.attr(\"x\", d => xscale(d.x0))\r\n\t\t\t.attr('height', this.yBars.bandwidth)\r\n\t\t\t.attr(\"width\", d => xscale(d.x)-xscale(d.x0))\r\n\t\t\t.attr(\"fill\", d => CAUSE_COLORS[d.cause])\r\n\t\t\t.attr('stroke', '#2378ae' )\r\n\t\t\t.on(\"mouseenter\", function(e: Event, d: SquareSection){\r\n\t\t\t\td3.selectAll(\".d3-tip\").style(\"background-color\", CAUSE_COLORS[d.cause])\r\n\t\t\t\tvis.stip.show(d,this);\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.raise()\r\n\t\t\t\t\t.style(\"stroke-width\",3)\r\n\t\t\t\t\t.style('stroke','#000000')\r\n\t\t\t\t})\r\n\t\t\t.on(\"mouseleave\",  function(e: Event, d: SquareSection){\r\n\t\t\t\tvis.stip.hide(d,this);\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.style(\"stroke-width\",1)\r\n\t\t\t\t\t.style('stroke','#2378ae')\r\n\t\t\t\t})\r\n\t\t\t.on(\"resize\",  function(e: Event, d: SquareSection){\r\n\t\t\t\tconsole.log('fullscreenchange');\r\n\t\t\t\tvis.stip.hide(d,this);\r\n\t\t\t\td3.select(this)\r\n\t\t\t\t\t.style(\"stroke-width\",1)\r\n\t\t\t\t\t.style('stroke','#2378ae')\r\n\t\t\t\t})\r\n\r\n\t\t\t\r\n\t\t\t//\r\n\t\t\t//});\r\n\t\t\t//.transition().duration(500)\r\n\t\t\t\t//.attr(\"height\", d => HEIGHT - y(d.total_prob))\r\n\t\t\t\t//.attr(\"y\", d => y(d.height)) */\t\r\n\t\t\t\r\n\t}\r\n\r\n\tcreateXAxisCall(newMax: number, designConstants: DesignConstants){\r\n\t\tconst x = d3.scaleLinear()\r\n\t\t.domain([\r\n\t\t\t0, \r\n\t\t\tnewMax*1.15\r\n\t\t])\r\n\t\t.range([designConstants.startXScale,designConstants.width])\r\n\t\t\r\n\t\treturn {xAxisCall: d3.axisTop(x), xscale:x}\r\n\t}\r\n\r\n\tupdate(dataset: DataSet){\r\n\r\n\t\tconst vis = this;\r\n\t\t\r\n\t\tconst dataSortedTotal = copyOfSortedDataset(dataset, \"total_prob\"); \r\n\t\tconst dataSortedName = copyOfSortedDataset(dataset, 'name'); \r\n\r\n\t\t//dataset that connects the original disease order (drect_order) with the new label.\r\n\t\t//In theory, it would be possible to rearrange the labels, but some of them will almost always end up\r\n\t\t//\"below\" a drect-object. Therefore it is easier to rename them.\r\n\t\tconst rename_object= this.drect_order.map((d,i) => {\r\n\t\t\treturn {new_name: dataSortedTotal[i].name, name: d}\r\n\t\t})\r\n\r\n\t\tconst dataSquares=make_squares(dataSortedName);\r\n\r\n\t\tconst n=dataSortedName.length;\r\n\t\tconst designConstants = (DESIGN==='WIDE') ? wideDesignConstants(n,vis.width) : longDesignConstants(n, vis.width);\r\n\r\n\t\t//Updating X-axis\r\n\t\tconst newMaxX=getMaxX(dataSquares);\r\n\t\tconst {xAxisCall, xscale} = this.createXAxisCall(newMaxX, designConstants)\r\n\t\tvis.xAxisGroup.call(xAxisCall)\r\n\r\n\t\t//Updating the disease-to-y mapping (this.yBars)\r\n\t\tthis.recalibrate_ybars(dataSortedTotal, designConstants); \r\n\r\n\t\tconst gs= vis.svg.selectAll(\".causebar\")\r\n\t\t\t.data(dataSquares, function(d: any) {return d.name+'.'+d.cause})\r\n\r\n\t\tconst duration_per_transition=500;\r\n\r\n\t\tgs.transition()\r\n\t\t\t .duration(duration_per_transition)\r\n\t\t\t.attr(\"x\", d => xscale(d.x0))\r\n\t\t\t.attr(\"width\", d => xscale(d.x)-xscale(d.x0))\r\n\t\tgs.transition()\r\n\t\t\t.delay(duration_per_transition)\r\n\t\t\t.duration(duration_per_transition)\r\n\t\t\t.attr(\"y\", d => (this.yBars(d.name) as number))\r\n\r\n\t\tvis.svg.selectAll('.dtext')\r\n\t\t\t.data(rename_object, function(d:any){ return d.name})\r\n\t\t\t.transition()\r\n\t\t\t.delay(duration_per_transition*2)\r\n\t\t\t.text( (d:any) => d.new_name)\r\n\r\n\r\n\t};\r\n}\r\n\r\nfunction copyOfSortedDataset(dataset: DataSet, sorter: 'total_prob' | 'name' ='total_prob'): DataSet{\r\n\treturn dataset.slice().sort(function(a: DataRow, b: DataRow) { return d3.descending(a[sorter], b[sorter]) });\r\n}\r\n\r\nfunction getMaxX(dataset: SquareSection[]):number{\r\n\tlet a= d3.max(dataset, d => d.x);\r\n\tif(a === undefined){\r\n\t\ta=1.0\r\n\t}\r\n\treturn a;\r\n}\r\n","import React, { useRef, useState, useEffect } from 'react';\r\nimport BarChart from './BarChart';\r\nimport { DataSet } from './PlottingData';\r\n\r\ninterface BarChartWrapperProps {\r\n\tdatabase: DataSet\r\n}\r\n\r\nconst BarChartWrapper = (props: BarChartWrapperProps) => { //class ChartWrapper extends React.PureComponent<any,any> {\r\n\tconst database = props.database;\r\n\tconsole.log(database);\r\n\tconst chartArea = useRef(null);\r\n\tconst [chart, setChart] = useState<BarChart | null>(null);\r\n\tconst { width } = useWindowSize();\r\n\r\n\tconst createNewChart = function () {\r\n\t\tsetChart(new BarChart(chartArea.current, database));\r\n\t}\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('width changed');\r\n\t\tif (chart) {\r\n\t\t\tchart.clear();\r\n\t\t\tcreateNewChart();\r\n\t\t}\r\n\t}, [width])\r\n\r\n\tuseEffect(() => {\r\n\t\tconsole.log('dataset changed');\r\n\t\tif (chart) {\r\n\t\t\tchart.update(database);\r\n\t\t}\r\n\t}, [database]);\r\n\r\n\tuseEffect(() => {\r\n\t\tcreateNewChart();\r\n\t}, []);\r\n\r\n\treturn <div className=\"container\" ref={chartArea} id=\"barchartcontainer\" />\r\n\r\n}\r\n\r\nfunction useWindowSize() {\r\n\tconst [windowSize, setWindowSize] = useState({\r\n\t\twidth: window.innerWidth,\r\n\t});\r\n\r\n\tlet resize_graphic = true;\r\n\tfunction changeWindowSize() {\r\n\t\tif (resize_graphic) {\r\n\t\t\tresize_graphic = false;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetWindowSize({ width: window.innerWidth });\r\n\t\t\t\tresize_graphic = true;\r\n\t\t\t}, 400);\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.addEventListener(\"resize\", changeWindowSize);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"resize\", changeWindowSize);\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn windowSize;\r\n}\r\n\r\nexport default BarChartWrapper;","import { idText } from \"typescript\";\r\n\r\nexport interface InnerCause {\r\n    [key: string]: number;\r\n}\r\n\r\nexport interface DataRow {\r\n    name: string,\r\n    total_prob: number,\r\n    inner_causes: InnerCause\r\n}\r\n\r\nexport type DataSet = DataRow[];\r\n\r\nexport const TEST_DATA: DataSet = [{ name: 'Corona', total_prob: 0.15, inner_causes: { partying: 0.45, smoking: 0.1 } },\r\n{ name: 'Old age', total_prob: 0.75, inner_causes: {} }, { name: 'Accidents', total_prob: 0.10, inner_causes: { partying: 0.1 } }];\r\n\r\nexport const TEST_DATA2: DataSet = [{ name: 'Corona', total_prob: 0.15, inner_causes: { partying: 0.05, smoking: 0.20 } },\r\n{ name: 'Old age', total_prob: 0.75, inner_causes: { 'smoking': 0.02 } }, { name: 'Accidents', total_prob: 0.10, inner_causes: {} }];\r\n\r\n","import React from 'react';\r\nimport './VizWindow.css';\r\nimport BarChartWrapper from './BarChartWrapper';\r\nimport { TEST_DATA, TEST_DATA2 } from './PlottingData';\r\n\r\nclass VizWindow extends React.PureComponent<any, any> {\r\n    counter: number = 0;\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            selected_visualization: \"allcauses\",\r\n            database: TEST_DATA\r\n        };\r\n    }\r\n\r\n    renderVisualization() {\r\n        //uses this.state.selcted_visualization and this.props.database and this.props.factor_answers to make the relevant revisualization.\r\n    }\r\n\r\n    handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n        //this.setState({ });\r\n        if (this.counter % 2 === 0) {\r\n            this.counter++;\r\n            this.setState({ database: TEST_DATA2, selected_visualization: event.currentTarget.value });\r\n        }\r\n        else {\r\n            this.counter++;\r\n            this.setState({ database: TEST_DATA, selected_visualization: event.currentTarget.value });\r\n        }\r\n    };\r\n\r\n    render(): React.ReactNode {\r\n        console.log(this.props)\r\n        return (<div className='vizwindow'>\r\n            <h4> Visualization Menu </h4>\r\n\r\n            <select id=\"visualizations\" onChange={this.handleChange} value={this.state.selected_visualization}>\r\n                <option value=\"allcauses\">TEST_DATA</option>\r\n                <option value=\"allages\">TEST_DATA2</option>\r\n            </select>\r\n            <BarChartWrapper database={this.state.database} />\r\n        </div>);\r\n    };\r\n}\r\n\r\nexport default VizWindow;","export interface FactorAnswers {\r\n    [id: string]: number | string | boolean\r\n}\r\n\r\nclass Factors {\r\n    factorList: GeneralFactor<string | number | boolean>[] = []\r\n\r\n    constructor(data: d3.DSVRowArray<string>) {\r\n        data.forEach(\r\n            element => {\r\n                switch (element.factorType) {\r\n                    case 'number': {\r\n                        this.factorList.push(new NumericFactorPermanent(element.factorName as string))\r\n                        break;\r\n                    }\r\n                    case 'boolean': {\r\n                        this.factorList.push(new BooleanFactorPermanent(element.factorName as string))\r\n                        break;\r\n                    }\r\n                    case 'string': {\r\n                        this.factorList.push(new StringFactorPermanent(element.factorName as string))\r\n                        break;\r\n                    }\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    getFactorsAsStateObject() {\r\n        let stateObject: FactorAnswers = {};\r\n        this.factorList.forEach(element => { return stateObject[element.factorName] = element.getInitialValue() })\r\n        return stateObject;\r\n    }\r\n}\r\n\r\nabstract class GeneralFactor<T> {\r\n    factorName: string;\r\n    initialValue: T;\r\n\r\n    constructor(factorName: string, initialValue: T) {\r\n        this.factorName = factorName;\r\n        this.initialValue = initialValue;\r\n    }\r\n\r\n    getInitialValue(): T {\r\n        return this.initialValue;\r\n    }\r\n}\r\n\r\nclass NumericFactorPermanent extends GeneralFactor<number> {\r\n    constructor(factorName: string) {\r\n        super(factorName, 0);\r\n    }\r\n}\r\n\r\nclass BooleanFactorPermanent extends GeneralFactor<boolean> {\r\n    constructor(factorName: string) {\r\n        super(factorName, false);\r\n    }\r\n}\r\n\r\nclass StringFactorPermanent extends GeneralFactor<string> {\r\n    constructor(factorName: string, initialValue: string = \"\") {\r\n        super(factorName, initialValue);\r\n    }\r\n}\r\n\r\nexport default Factors;","import * as d3 from 'd3';\r\nimport React, { MouseEvent } from 'react';\r\nimport { Col, Row } from 'reactstrap';\r\nimport './App.css';\r\nimport FrequencyTable from './components/database/Age';\r\nimport Deathcause from './components/database/Deathcause';\r\nimport { RiskFactorGroup } from './components/database/RickFactorGroup';\r\nimport { RiskRatioTable } from './components/database/RiskRatioTable';\r\nimport Header from './components/Header';\r\nimport QuestionMenu from './components/QuestionMenu';\r\nimport VizWindow from './components/VizWindow';\r\nimport Factors, { FactorAnswers } from './models/Factors';\r\nimport causesData from './resources/Causes.json';\r\n\r\ninterface AppState {\r\n  hasLoadedFactorAnswers: boolean,\r\n  hasLoadedDatabase: boolean,\r\n  hasLoadedFactorDatabase: boolean,\r\n  factorDatabase: any,\r\n  factorAnswers: FactorAnswers | null\r\n  factorAnswersSubmitted: FactorAnswers | null\r\n}\r\n\r\nclass App extends React.Component<any, AppState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasLoadedFactorAnswers: true,\r\n      hasLoadedDatabase: true,\r\n      hasLoadedFactorDatabase: true,\r\n      factorDatabase: undefined,\r\n      factorAnswers: null,\r\n      factorAnswersSubmitted: null\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  };\r\n\r\n  handleSubmit(event: MouseEvent): void {\r\n    event.preventDefault()\r\n    this.setState({\r\n      factorAnswersSubmitted: Object.create(this.state.factorAnswers)\r\n    })\r\n  }\r\n\r\n  handleChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n    var value: boolean | string | number\r\n    const { name, type } = event.currentTarget\r\n    type === \"checkbox\" ? value = event.currentTarget.checked : value = event.currentTarget.value\r\n    this.setState<any>((prevState: { factorAnswers: Factors }) => {\r\n      return {\r\n        factorAnswers: {\r\n          ...prevState.factorAnswers,\r\n          [name]: value\r\n        }\r\n      }\r\n    })\r\n    console.log(this.state)\r\n  }\r\n\r\n  // loadFactorAnswers() {\r\n  //   this.setState({\r\n  //     factorAnswers: new Factors()\r\n  //   })\r\n  //   // load_factor_answers.then((loaded_factor_answers)=> this.setState({hasLoadedFactorAnswers: false, factor_answers:loaded_factor_answers})).\r\n  //   // This will load the factor answers and then it will update the rendered view using setState.\r\n  // }\r\n\r\n  // loadDatabase() {\r\n  //   // load_data.then((loaded_data)=> this.setState({hasLoadedDatabase: false, factor_answers:loaded_data})).\r\n  //   // This will load the data and then it will update the rendered view using setState.\r\n  //   // this.setState({ database: json('../compile/Causes_for_json'), hasLoadedDatabase: true });\r\n  // }\r\n\r\n  loadFactorDatabase() {\r\n    let res: Deathcause[] = [];\r\n    let database = causesData;\r\n    // console.log(database.BreastCancer.RiskFactorGroups[0])\r\n\r\n    // for (var key in database) {\r\n    //   if (database.hasOwnProperty(key)) {\r\n    //     console.log(database[key as keyof typeof database])\r\n    //     res.push(new Deathcause(database[key as keyof typeof database], key))\r\n    //   }\r\n    // }\r\n\r\n    // console.log(res)\r\n    // console.log(age)\r\n    this.loadFactorNames()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadFactorDatabase()\r\n    this.setState({\r\n      factorDatabase: causesData\r\n    })\r\n  }\r\n\r\n  loadFactorNames() {\r\n    d3.csv('FactorDatabase.csv').then(data => { this.setState({ factorAnswers: new Factors(data).getFactorsAsStateObject() }) });\r\n  }\r\n\r\n  renderQuestionMenu() {\r\n    return (\r\n      <h1>hej</h1>\r\n      // <QuestionMenu factors={this.state.factorAnswers} handleChange={this.handleChange} handleSubmit={this.handleSubmit} />\r\n    );\r\n  }\r\n\r\n  renderVizWindow() {\r\n    return (\r\n      <VizWindow factorAnswersSubmitted={this.state.factorAnswersSubmitted} />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Row>\r\n          <Col md={3} xs={3} lg={3} sm={3} xl={3} style={{ padding: '0px' }}>\r\n            {this.state.factorAnswers ? this.renderQuestionMenu() : \"Waiting for loading quesitons\"}\r\n          </Col>\r\n          <Col md={9} xs={9} lg={9} sm={9} xl={9} style={{ padding: '0px' }}>\r\n            {this.state.factorAnswersSubmitted ? this.renderVizWindow() : \"yolo\"}\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}